/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const RADIX: u32 = 3;
pub const TRYTE_ALPHABET: &'static [u8; 28usize] = b"9ABCDEFGHIJKLMNOPQRSTUVWXYZ\0";
pub const TRYTE_SPACE: u32 = 27;
pub const BYTE_SPACE: u32 = 243;
pub const TRYTE_VALUE_MAX: u32 = 13;
pub const BYTE_VALUE_MAX: u32 = 121;
pub const TRYTE_VALUE_MIN: i32 = -13;
pub const BYTE_VALUE_MIN: i32 = -121;
pub const TRYTE_WIDTH: u32 = 3;
pub const BYTE_WIDTH: u32 = 5;
pub const NUMBER_OF_TRITS_IN_A_TRYTE: u32 = 3;
pub const NUMBER_OF_TRITS_IN_A_BYTE: u32 = 5;
pub const HASH_LENGTH_BYTE: u32 = 49;
pub const HASH_LENGTH_TRYTE: u32 = 81;
pub const HASH_LENGTH_TRIT: u32 = 243;
pub const SECURITY_LEVEL_MAX: u32 = 3;
pub const NORMALIZED_FRAGMENT_LENGTH: u32 = 27;
pub const ISS_FRAGMENTS: u32 = 27;
pub const ISS_KEY_LENGTH: u32 = 6561;
pub const ISS_CHUNK_LENGTH: u32 = 81;
pub const STR_OK: &'static [u8; 3usize] = b"OK\0";
pub const STR_ERROR: &'static [u8; 6usize] = b"ERROR\0";
pub const STR_NULL_PARAM: &'static [u8; 36usize] = b"Attempting to access a null pointer\0";
pub const STR_CCLIENT_JSON_CREATE: &'static [u8; 26usize] = b"Create JSON object error!\0";
pub const STR_CCLIENT_JSON_PARSE: &'static [u8; 20usize] = b"JSON parsing failed\0";
pub const STR_CCLIENT_OOM: &'static [u8; 15usize] = b"Out of Memory!\0";
pub const STR_CCLIENT_HTTP: &'static [u8; 19usize] = b"HTTP service error\0";
pub const STR_CCLIENT_HTTP_REQ: &'static [u8; 19usize] = b"HTTP request error\0";
pub const STR_CCLIENT_HTTP_RES: &'static [u8; 20usize] = b"HTTP response error\0";
pub const STR_CCLIENT_RES_ERROR: &'static [u8; 14usize] = b"IRI response:\0";
pub const STR_CCLIENT_JSON_KEY: &'static [u8; 19usize] = b"JSON key not found\0";
pub const STR_CCLIENT_FLEX_TRITS: &'static [u8; 24usize] = b"trits converting failed\0";
pub const STR_CCLIENT_NULL_PTR: &'static [u8; 13usize] = b"NULL pointer\0";
pub const STR_CCLIENT_UNIMPLEMENTED: &'static [u8; 23usize] = b"Function unimplemented\0";
pub const STR_CCLIENT_INVALID_SECURITY: &'static [u8; 23usize] = b"Invalid security level\0";
pub const STR_CCLIENT_TX_DESERIALIZE_FAILED: &'static [u8; 40usize] =
    b"deserializing transaction object failed\0";
pub const STR_CCLIENT_INSUFFICIENT_BALANCE: &'static [u8; 21usize] = b"Insufficient balance\0";
pub const STR_CCLIENT_POW_FAILED: &'static [u8; 17usize] = b"Local PoW failed\0";
pub const SRT_CCLIENT_INVALID_TRANSFER: &'static [u8; 18usize] = b"Invalid transfers\0";
pub const STR_CCLIENT_INVALID_TAIL_HASH: &'static [u8; 18usize] = b"Invalid tail hash\0";
pub const SRT_CCLIENT_INVALID_BUNDLE: &'static [u8; 15usize] = b"Invalid bundle\0";
pub const STR_UTILS_SOCKET_TLS_RNG: &'static [u8; 28usize] = b"TLS random number generator\0";
pub const STR_UTILS_SOCKET_TLS_CA: &'static [u8; 25usize] = b"TLS parsing CA PEM error\0";
pub const STR_UTILS_SOCKET_TLS_CLIENT_PEM: &'static [u8; 47usize] =
    b"TLS parsing client Certificate Authority error\0";
pub const STR_UTILS_SOCKET_TLS_CLIENT_PK: &'static [u8; 37usize] =
    b"TLS parsing client private key error\0";
pub const STR_UTILS_SOCKET_TLS_CONF: &'static [u8; 16usize] = b"TLS setup error\0";
pub const STR_UTILS_SOCKET_TLS_AUTHMODE: &'static [u8; 30usize] =
    b"TLS configure auth mode error\0";
pub const STR_UTILS_SOCKET_CLIENT_AUTH: &'static [u8; 52usize] =
    b"TLS set own certificate chain and private key error\0";
pub const STR_UTILS_SOCKET_TLS_HANDSHAKE: &'static [u8; 20usize] = b"TLS handshake error\0";
pub const STR_UTILS_SOCKET_CONNECT: &'static [u8; 21usize] = b"Socket connect error\0";
pub const STR_UTILS_SOCKET_RECV: &'static [u8; 21usize] = b"Socket receive error\0";
pub const STR_UTILS_SOCKET_SEND: &'static [u8; 18usize] = b"Socket send error\0";
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 101404;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &'static [u8; 10usize] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_ctermid: u32 = 1024;
pub const __CTERMID_DEFINED: u32 = 1;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const RC_SEVERITY_MASK: u32 = 192;
pub const RC_SHIFT_SEVERITY: u32 = 6;
pub const RC_SEVERITY_FATAL: u32 = 192;
pub const RC_SEVERITY_MAJOR: u32 = 128;
pub const RC_SEVERITY_MODERATE: u32 = 64;
pub const RC_SEVERITY_MINOR: u32 = 0;
pub const RC_MODULE_MASK: u32 = 65280;
pub const RC_SHIFT_MODULE: u32 = 8;
pub const RC_MODULE_GENERAL: u32 = 256;
pub const RC_MODULE_STORAGE: u32 = 512;
pub const RC_MODULE_STORAGE_SQL: u32 = 768;
pub const RC_MODULE_STORAGE_SQLITE3: u32 = 1024;
pub const RC_MODULE_CORE: u32 = 1280;
pub const RC_MODULE_NODE: u32 = 1536;
pub const RC_MODULE_NEIGHBOR: u32 = 1792;
pub const RC_MODULE_CCLIENT: u32 = 2048;
pub const RC_MODULE_CONSENSUS: u32 = 2304;
pub const RC_MODULE_CONSENSUS_CW: u32 = 2560;
pub const RC_MODULE_CONSENSUS_EXIT_PROBABILITIES: u32 = 2816;
pub const RC_MODULE_CONSENSUS_MT: u32 = 3072;
pub const RC_MODULE_CONSENSUS_SNAPSHOT: u32 = 3328;
pub const RC_MODULE_LEDGER_VALIDATOR: u32 = 3584;
pub const RC_MODULE_CONSENSUS_TIP_SELECTOR: u32 = 3840;
pub const RC_MODULE_CONSENSUS_TANGLE: u32 = 4096;
pub const RC_MODULE_UTILS: u32 = 41216;
pub const RC_MODULE_BROADCASTER: u32 = 41472;
pub const RC_MODULE_PROCESSOR: u32 = 41728;
pub const RC_MODULE_RECEIVER_COMPONENT: u32 = 41984;
pub const RC_MODULE_REQUESTER_COMPONENT: u32 = 42240;
pub const RC_MODULE_RESPONDER_COMPONENT: u32 = 42496;
pub const RC_MODULE_CIRI_CONF: u32 = 42752;
pub const RC_MODULE_API: u32 = 43008;
pub const RC_MODULE_GOSSIP: u32 = 43264;
pub const RC_MODULE_MAM: u32 = 45056;
pub const RC_MODULE_HELPERS: u32 = 45312;
pub const RC_MODULE_CRYPTO: u32 = 45568;
pub const RC_ERRORCODE_MASK: u32 = 63;
pub const RC_RESOLVE_FORMAT_STR: &'static [u8; 36usize] = b"M=0x%02X, E=0x%02X, S=0x%X (0x%04X)\0";
pub const _POSIX_VERSION: u32 = 200112;
pub const _POSIX2_VERSION: u32 = 200112;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const F_OK: u32 = 0;
pub const X_OK: u32 = 1;
pub const W_OK: u32 = 2;
pub const R_OK: u32 = 4;
pub const _READ_OK: u32 = 512;
pub const _WRITE_OK: u32 = 1024;
pub const _EXECUTE_OK: u32 = 2048;
pub const _DELETE_OK: u32 = 4096;
pub const _APPEND_OK: u32 = 8192;
pub const _RMFILE_OK: u32 = 16384;
pub const _RATTR_OK: u32 = 32768;
pub const _WATTR_OK: u32 = 65536;
pub const _REXT_OK: u32 = 131072;
pub const _WEXT_OK: u32 = 262144;
pub const _RPERM_OK: u32 = 524288;
pub const _WPERM_OK: u32 = 1048576;
pub const _CHOWN_OK: u32 = 2097152;
pub const _ACCESS_EXTENDED_MASK: u32 = 4193792;
pub const SEEK_HOLE: u32 = 3;
pub const SEEK_DATA: u32 = 4;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const ACCESSX_MAX_DESCRIPTORS: u32 = 100;
pub const ACCESSX_MAX_TABLESIZE: u32 = 16384;
pub const _PC_LINK_MAX: u32 = 1;
pub const _PC_MAX_CANON: u32 = 2;
pub const _PC_MAX_INPUT: u32 = 3;
pub const _PC_NAME_MAX: u32 = 4;
pub const _PC_PATH_MAX: u32 = 5;
pub const _PC_PIPE_BUF: u32 = 6;
pub const _PC_CHOWN_RESTRICTED: u32 = 7;
pub const _PC_NO_TRUNC: u32 = 8;
pub const _PC_VDISABLE: u32 = 9;
pub const _PC_NAME_CHARS_MAX: u32 = 10;
pub const _PC_CASE_SENSITIVE: u32 = 11;
pub const _PC_CASE_PRESERVING: u32 = 12;
pub const _PC_EXTENDED_SECURITY_NP: u32 = 13;
pub const _PC_AUTH_OPAQUE_NP: u32 = 14;
pub const _PC_2_SYMLINKS: u32 = 15;
pub const _PC_ALLOC_SIZE_MIN: u32 = 16;
pub const _PC_ASYNC_IO: u32 = 17;
pub const _PC_FILESIZEBITS: u32 = 18;
pub const _PC_PRIO_IO: u32 = 19;
pub const _PC_REC_INCR_XFER_SIZE: u32 = 20;
pub const _PC_REC_MAX_XFER_SIZE: u32 = 21;
pub const _PC_REC_MIN_XFER_SIZE: u32 = 22;
pub const _PC_REC_XFER_ALIGN: u32 = 23;
pub const _PC_SYMLINK_MAX: u32 = 24;
pub const _PC_SYNC_IO: u32 = 25;
pub const _PC_XATTR_SIZE_BITS: u32 = 26;
pub const _PC_MIN_HOLE_SIZE: u32 = 27;
pub const _CS_PATH: u32 = 1;
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const _XOPEN_VERSION: u32 = 600;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _POSIX_ADVISORY_INFO: i32 = -1;
pub const _POSIX_ASYNCHRONOUS_IO: i32 = -1;
pub const _POSIX_BARRIERS: i32 = -1;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 200112;
pub const _POSIX_CLOCK_SELECTION: i32 = -1;
pub const _POSIX_CPUTIME: i32 = -1;
pub const _POSIX_FSYNC: u32 = 200112;
pub const _POSIX_IPV6: u32 = 200112;
pub const _POSIX_JOB_CONTROL: u32 = 200112;
pub const _POSIX_MAPPED_FILES: u32 = 200112;
pub const _POSIX_MEMLOCK: i32 = -1;
pub const _POSIX_MEMLOCK_RANGE: i32 = -1;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200112;
pub const _POSIX_MESSAGE_PASSING: i32 = -1;
pub const _POSIX_MONOTONIC_CLOCK: i32 = -1;
pub const _POSIX_NO_TRUNC: u32 = 200112;
pub const _POSIX_PRIORITIZED_IO: i32 = -1;
pub const _POSIX_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_RAW_SOCKETS: i32 = -1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200112;
pub const _POSIX_REALTIME_SIGNALS: i32 = -1;
pub const _POSIX_REGEXP: u32 = 200112;
pub const _POSIX_SAVED_IDS: u32 = 200112;
pub const _POSIX_SEMAPHORES: i32 = -1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_SHELL: u32 = 200112;
pub const _POSIX_SPAWN: i32 = -1;
pub const _POSIX_SPIN_LOCKS: i32 = -1;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_SYNCHRONIZED_IO: i32 = -1;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200112;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200112;
pub const _POSIX_THREAD_CPUTIME: i32 = -1;
pub const _POSIX_THREAD_PRIO_INHERIT: i32 = -1;
pub const _POSIX_THREAD_PRIO_PROTECT: i32 = -1;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200112;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200112;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREADS: u32 = 200112;
pub const _POSIX_TIMEOUTS: i32 = -1;
pub const _POSIX_TIMERS: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX2_C_BIND: u32 = 200112;
pub const _POSIX2_C_DEV: u32 = 200112;
pub const _POSIX2_CHAR_TERM: u32 = 200112;
pub const _POSIX2_FORT_DEV: i32 = -1;
pub const _POSIX2_FORT_RUN: u32 = 200112;
pub const _POSIX2_LOCALEDEF: u32 = 200112;
pub const _POSIX2_PBS: i32 = -1;
pub const _POSIX2_PBS_ACCOUNTING: i32 = -1;
pub const _POSIX2_PBS_CHECKPOINT: i32 = -1;
pub const _POSIX2_PBS_LOCATE: i32 = -1;
pub const _POSIX2_PBS_MESSAGE: i32 = -1;
pub const _POSIX2_PBS_TRACK: i32 = -1;
pub const _POSIX2_SW_DEV: u32 = 200112;
pub const _POSIX2_UPE: u32 = 200112;
pub const __ILP32_OFF32: i32 = -1;
pub const __ILP32_OFFBIG: u32 = 1;
pub const __LP64_OFF64: u32 = 1;
pub const __LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V6_ILP32_OFF32: i32 = -1;
pub const _POSIX_V6_ILP32_OFFBIG: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V7_ILP32_OFF32: i32 = -1;
pub const _POSIX_V7_ILP32_OFFBIG: u32 = 1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V7_LPBIG_OFFBIG: u32 = 1;
pub const _V6_ILP32_OFF32: i32 = -1;
pub const _V6_ILP32_OFFBIG: u32 = 1;
pub const _V6_LP64_OFF64: u32 = 1;
pub const _V6_LPBIG_OFFBIG: u32 = 1;
pub const _XBS5_ILP32_OFF32: i32 = -1;
pub const _XBS5_ILP32_OFFBIG: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const _XBS5_LPBIG_OFFBIG: u32 = 1;
pub const _XOPEN_CRYPT: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: i32 = -1;
pub const _XOPEN_REALTIME: i32 = -1;
pub const _XOPEN_REALTIME_THREADS: i32 = -1;
pub const _XOPEN_SHM: u32 = 1;
pub const _XOPEN_STREAMS: i32 = -1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _SC_ARG_MAX: u32 = 1;
pub const _SC_CHILD_MAX: u32 = 2;
pub const _SC_CLK_TCK: u32 = 3;
pub const _SC_NGROUPS_MAX: u32 = 4;
pub const _SC_OPEN_MAX: u32 = 5;
pub const _SC_JOB_CONTROL: u32 = 6;
pub const _SC_SAVED_IDS: u32 = 7;
pub const _SC_VERSION: u32 = 8;
pub const _SC_BC_BASE_MAX: u32 = 9;
pub const _SC_BC_DIM_MAX: u32 = 10;
pub const _SC_BC_SCALE_MAX: u32 = 11;
pub const _SC_BC_STRING_MAX: u32 = 12;
pub const _SC_COLL_WEIGHTS_MAX: u32 = 13;
pub const _SC_EXPR_NEST_MAX: u32 = 14;
pub const _SC_LINE_MAX: u32 = 15;
pub const _SC_RE_DUP_MAX: u32 = 16;
pub const _SC_2_VERSION: u32 = 17;
pub const _SC_2_C_BIND: u32 = 18;
pub const _SC_2_C_DEV: u32 = 19;
pub const _SC_2_CHAR_TERM: u32 = 20;
pub const _SC_2_FORT_DEV: u32 = 21;
pub const _SC_2_FORT_RUN: u32 = 22;
pub const _SC_2_LOCALEDEF: u32 = 23;
pub const _SC_2_SW_DEV: u32 = 24;
pub const _SC_2_UPE: u32 = 25;
pub const _SC_STREAM_MAX: u32 = 26;
pub const _SC_TZNAME_MAX: u32 = 27;
pub const _SC_ASYNCHRONOUS_IO: u32 = 28;
pub const _SC_PAGESIZE: u32 = 29;
pub const _SC_MEMLOCK: u32 = 30;
pub const _SC_MEMLOCK_RANGE: u32 = 31;
pub const _SC_MEMORY_PROTECTION: u32 = 32;
pub const _SC_MESSAGE_PASSING: u32 = 33;
pub const _SC_PRIORITIZED_IO: u32 = 34;
pub const _SC_PRIORITY_SCHEDULING: u32 = 35;
pub const _SC_REALTIME_SIGNALS: u32 = 36;
pub const _SC_SEMAPHORES: u32 = 37;
pub const _SC_FSYNC: u32 = 38;
pub const _SC_SHARED_MEMORY_OBJECTS: u32 = 39;
pub const _SC_SYNCHRONIZED_IO: u32 = 40;
pub const _SC_TIMERS: u32 = 41;
pub const _SC_AIO_LISTIO_MAX: u32 = 42;
pub const _SC_AIO_MAX: u32 = 43;
pub const _SC_AIO_PRIO_DELTA_MAX: u32 = 44;
pub const _SC_DELAYTIMER_MAX: u32 = 45;
pub const _SC_MQ_OPEN_MAX: u32 = 46;
pub const _SC_MAPPED_FILES: u32 = 47;
pub const _SC_RTSIG_MAX: u32 = 48;
pub const _SC_SEM_NSEMS_MAX: u32 = 49;
pub const _SC_SEM_VALUE_MAX: u32 = 50;
pub const _SC_SIGQUEUE_MAX: u32 = 51;
pub const _SC_TIMER_MAX: u32 = 52;
pub const _SC_NPROCESSORS_CONF: u32 = 57;
pub const _SC_NPROCESSORS_ONLN: u32 = 58;
pub const _SC_2_PBS: u32 = 59;
pub const _SC_2_PBS_ACCOUNTING: u32 = 60;
pub const _SC_2_PBS_CHECKPOINT: u32 = 61;
pub const _SC_2_PBS_LOCATE: u32 = 62;
pub const _SC_2_PBS_MESSAGE: u32 = 63;
pub const _SC_2_PBS_TRACK: u32 = 64;
pub const _SC_ADVISORY_INFO: u32 = 65;
pub const _SC_BARRIERS: u32 = 66;
pub const _SC_CLOCK_SELECTION: u32 = 67;
pub const _SC_CPUTIME: u32 = 68;
pub const _SC_FILE_LOCKING: u32 = 69;
pub const _SC_GETGR_R_SIZE_MAX: u32 = 70;
pub const _SC_GETPW_R_SIZE_MAX: u32 = 71;
pub const _SC_HOST_NAME_MAX: u32 = 72;
pub const _SC_LOGIN_NAME_MAX: u32 = 73;
pub const _SC_MONOTONIC_CLOCK: u32 = 74;
pub const _SC_MQ_PRIO_MAX: u32 = 75;
pub const _SC_READER_WRITER_LOCKS: u32 = 76;
pub const _SC_REGEXP: u32 = 77;
pub const _SC_SHELL: u32 = 78;
pub const _SC_SPAWN: u32 = 79;
pub const _SC_SPIN_LOCKS: u32 = 80;
pub const _SC_SPORADIC_SERVER: u32 = 81;
pub const _SC_THREAD_ATTR_STACKADDR: u32 = 82;
pub const _SC_THREAD_ATTR_STACKSIZE: u32 = 83;
pub const _SC_THREAD_CPUTIME: u32 = 84;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: u32 = 85;
pub const _SC_THREAD_KEYS_MAX: u32 = 86;
pub const _SC_THREAD_PRIO_INHERIT: u32 = 87;
pub const _SC_THREAD_PRIO_PROTECT: u32 = 88;
pub const _SC_THREAD_PRIORITY_SCHEDULING: u32 = 89;
pub const _SC_THREAD_PROCESS_SHARED: u32 = 90;
pub const _SC_THREAD_SAFE_FUNCTIONS: u32 = 91;
pub const _SC_THREAD_SPORADIC_SERVER: u32 = 92;
pub const _SC_THREAD_STACK_MIN: u32 = 93;
pub const _SC_THREAD_THREADS_MAX: u32 = 94;
pub const _SC_TIMEOUTS: u32 = 95;
pub const _SC_THREADS: u32 = 96;
pub const _SC_TRACE: u32 = 97;
pub const _SC_TRACE_EVENT_FILTER: u32 = 98;
pub const _SC_TRACE_INHERIT: u32 = 99;
pub const _SC_TRACE_LOG: u32 = 100;
pub const _SC_TTY_NAME_MAX: u32 = 101;
pub const _SC_TYPED_MEMORY_OBJECTS: u32 = 102;
pub const _SC_V6_ILP32_OFF32: u32 = 103;
pub const _SC_V6_ILP32_OFFBIG: u32 = 104;
pub const _SC_V6_LP64_OFF64: u32 = 105;
pub const _SC_V6_LPBIG_OFFBIG: u32 = 106;
pub const _SC_IPV6: u32 = 118;
pub const _SC_RAW_SOCKETS: u32 = 119;
pub const _SC_SYMLOOP_MAX: u32 = 120;
pub const _SC_ATEXIT_MAX: u32 = 107;
pub const _SC_IOV_MAX: u32 = 56;
pub const _SC_PAGE_SIZE: u32 = 29;
pub const _SC_XOPEN_CRYPT: u32 = 108;
pub const _SC_XOPEN_ENH_I18N: u32 = 109;
pub const _SC_XOPEN_LEGACY: u32 = 110;
pub const _SC_XOPEN_REALTIME: u32 = 111;
pub const _SC_XOPEN_REALTIME_THREADS: u32 = 112;
pub const _SC_XOPEN_SHM: u32 = 113;
pub const _SC_XOPEN_STREAMS: u32 = 114;
pub const _SC_XOPEN_UNIX: u32 = 115;
pub const _SC_XOPEN_VERSION: u32 = 116;
pub const _SC_XOPEN_XCU_VERSION: u32 = 121;
pub const _SC_XBS5_ILP32_OFF32: u32 = 122;
pub const _SC_XBS5_ILP32_OFFBIG: u32 = 123;
pub const _SC_XBS5_LP64_OFF64: u32 = 124;
pub const _SC_XBS5_LPBIG_OFFBIG: u32 = 125;
pub const _SC_SS_REPL_MAX: u32 = 126;
pub const _SC_TRACE_EVENT_NAME_MAX: u32 = 127;
pub const _SC_TRACE_NAME_MAX: u32 = 128;
pub const _SC_TRACE_SYS_MAX: u32 = 129;
pub const _SC_TRACE_USER_EVENT_MAX: u32 = 130;
pub const _SC_PASS_MAX: u32 = 131;
pub const _SC_PHYS_PAGES: u32 = 200;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: u32 = 2;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: u32 = 3;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: u32 = 4;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: u32 = 5;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: u32 = 6;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: u32 = 7;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: u32 = 8;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: u32 = 9;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: u32 = 10;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: u32 = 11;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: u32 = 12;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: u32 = 13;
pub const _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS: u32 = 14;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: u32 = 20;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: u32 = 21;
pub const _CS_XBS5_ILP32_OFF32_LIBS: u32 = 22;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: u32 = 23;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: u32 = 24;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: u32 = 25;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: u32 = 26;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: u32 = 27;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: u32 = 28;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: u32 = 29;
pub const _CS_XBS5_LP64_OFF64_LIBS: u32 = 30;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: u32 = 31;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: u32 = 32;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: u32 = 33;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: u32 = 34;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: u32 = 35;
pub const _CS_DARWIN_USER_DIR: u32 = 65536;
pub const _CS_DARWIN_USER_TEMP_DIR: u32 = 65537;
pub const _CS_DARWIN_USER_CACHE_DIR: u32 = 65538;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const __DARWIN_FD_SETSIZE: u32 = 1024;
pub const __DARWIN_NBBY: u32 = 8;
pub const FD_SETSIZE: u32 = 1024;
pub const SYNC_VOLUME_FULLSYNC: u32 = 1;
pub const SYNC_VOLUME_WAIT: u32 = 2;
pub const __WORDSIZE: u32 = 64;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const __HAS_FIXED_CHK_PROTOTYPES: u32 = 1;
pub const MAM_SPONGE_RATE: u32 = 486;
pub const MAM_SPONGE_CONTROL: u32 = 6;
pub const MAM_SPONGE_CAPACITY: u32 = 237;
pub const MAM_SPONGE_WIDTH: u32 = 729;
pub const MAM_SPONGE_KEY_SIZE: u32 = 243;
pub const MAM_SPONGE_HASH_SIZE: u32 = 243;
pub const MAM_SPONGE_MAC_SIZE: u32 = 243;
pub const MAM_SPONGE_CTL_DATA: u32 = 0;
pub const MAM_SPONGE_CTL_HASH: u32 = 0;
pub const MAM_SPONGE_CTL_KEY: u32 = 1;
pub const MAM_SPONGE_CTL_PRN: u32 = 1;
pub const MAM_SPONGE_CTL_TEXT: i32 = -1;
pub const MAM_SPONGE_CTL_MAC: i32 = -1;
pub const MAM_PB3_SIZE_MAX: u64 = 2026277576509488133;
pub const MAM_PRNG_SECRET_KEY_SIZE: u32 = 243;
pub const MAM_WOTS_PUBLIC_KEY_SIZE: u32 = 243;
pub const MAM_WOTS_PRIVATE_KEY_PART_SIZE: u32 = 162;
pub const MAM_WOTS_PRIVATE_KEY_PART_COUNT: u32 = 81;
pub const MAM_WOTS_PRIVATE_KEY_SIZE: u32 = 13122;
pub const MAM_WOTS_HASH_SIZE: u32 = 234;
pub const MAM_WOTS_SIGNATURE_SIZE: u32 = 13122;
pub const MAM_MSS_PK_SIZE: u32 = 243;
pub const MAM_MSS_SKN_TREE_DEPTH_SIZE: u32 = 4;
pub const MAM_MSS_SKN_KEY_NUMBER_SIZE: u32 = 14;
pub const MAM_MSS_SKN_SIZE: u32 = 18;
pub const MAM_MSS_HASH_SIZE: u32 = 234;
pub const MAM_MSS_MAX_D: u32 = 20;
pub const MAM_MSS_MT_HASH_SIZE: u32 = 243;
pub const MAM_ENDPOINT_ID_SIZE: u32 = 243;
pub const MAM_ENDPOINT_NAME_SIZE: u32 = 18;
pub const __DARWIN_NSIG: u32 = 32;
pub const NSIG: u32 = 32;
pub const _I386_SIGNAL_H_: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const FP_PREC_24B: u32 = 0;
pub const FP_PREC_53B: u32 = 2;
pub const FP_PREC_64B: u32 = 3;
pub const FP_RND_NEAR: u32 = 0;
pub const FP_RND_DOWN: u32 = 1;
pub const FP_RND_UP: u32 = 2;
pub const FP_CHOP: u32 = 3;
pub const FP_STATE_BYTES: u32 = 512;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 3;
pub const ILL_NOOP: u32 = 0;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLTRP: u32 = 2;
pub const ILL_PRVOPC: u32 = 3;
pub const ILL_ILLOPN: u32 = 4;
pub const ILL_ILLADR: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const FPE_NOOP: u32 = 0;
pub const FPE_FLTDIV: u32 = 1;
pub const FPE_FLTOVF: u32 = 2;
pub const FPE_FLTUND: u32 = 3;
pub const FPE_FLTRES: u32 = 4;
pub const FPE_FLTINV: u32 = 5;
pub const FPE_FLTSUB: u32 = 6;
pub const FPE_INTDIV: u32 = 7;
pub const FPE_INTOVF: u32 = 8;
pub const SEGV_NOOP: u32 = 0;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const BUS_NOOP: u32 = 0;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const CLD_NOOP: u32 = 0;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const SA_USERTRAMP: u32 = 256;
pub const SA_64REGSET: u32 = 512;
pub const SA_USERSPACE_MASK: u32 = 127;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 32768;
pub const SIGSTKSZ: u32 = 131072;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const PRIO_DARWIN_THREAD: u32 = 3;
pub const PRIO_DARWIN_PROCESS: u32 = 4;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_DARWIN_BG: u32 = 4096;
pub const PRIO_DARWIN_NONUI: u32 = 4097;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_INFO_V0: u32 = 0;
pub const RUSAGE_INFO_V1: u32 = 1;
pub const RUSAGE_INFO_V2: u32 = 2;
pub const RUSAGE_INFO_V3: u32 = 3;
pub const RUSAGE_INFO_V4: u32 = 4;
pub const RUSAGE_INFO_CURRENT: u32 = 4;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_AS: u32 = 5;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_MEMLOCK: u32 = 6;
pub const RLIMIT_NPROC: u32 = 7;
pub const RLIMIT_NOFILE: u32 = 8;
pub const RLIM_NLIMITS: u32 = 9;
pub const _RLIMIT_POSIX_FLAG: u32 = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: u32 = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: u32 = 2;
pub const RLIMIT_THREAD_CPULIMITS: u32 = 3;
pub const RLIMIT_FOOTPRINT_INTERVAL: u32 = 4;
pub const WAKEMON_ENABLE: u32 = 1;
pub const WAKEMON_DISABLE: u32 = 2;
pub const WAKEMON_GET_PARAMS: u32 = 4;
pub const WAKEMON_SET_DEFAULTS: u32 = 8;
pub const WAKEMON_MAKE_FATAL: u32 = 16;
pub const CPUMON_MAKE_FATAL: u32 = 4096;
pub const FOOTPRINT_INTERVAL_RESET: u32 = 1;
pub const IOPOL_TYPE_DISK: u32 = 0;
pub const IOPOL_TYPE_VFS_ATIME_UPDATES: u32 = 2;
pub const IOPOL_SCOPE_PROCESS: u32 = 0;
pub const IOPOL_SCOPE_THREAD: u32 = 1;
pub const IOPOL_SCOPE_DARWIN_BG: u32 = 2;
pub const IOPOL_DEFAULT: u32 = 0;
pub const IOPOL_IMPORTANT: u32 = 1;
pub const IOPOL_PASSIVE: u32 = 2;
pub const IOPOL_THROTTLE: u32 = 3;
pub const IOPOL_UTILITY: u32 = 4;
pub const IOPOL_STANDARD: u32 = 5;
pub const IOPOL_APPLICATION: u32 = 5;
pub const IOPOL_NORMAL: u32 = 1;
pub const IOPOL_ATIME_UPDATES_DEFAULT: u32 = 0;
pub const IOPOL_ATIME_UPDATES_OFF: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WCOREFLAG: u32 = 128;
pub const _WSTOPPED: u32 = 127;
pub const WEXITED: u32 = 4;
pub const WSTOPPED: u32 = 8;
pub const WCONTINUED: u32 = 16;
pub const WNOWAIT: u32 = 32;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const HASH_NONFATAL_OOM: u32 = 0;
pub const HASH_INITIAL_NUM_BUCKETS: u32 = 32;
pub const HASH_INITIAL_NUM_BUCKETS_LOG2: u32 = 5;
pub const HASH_BKT_CAPACITY_THRESH: u32 = 10;
pub const HASH_BLOOM_BYTELEN: u32 = 0;
pub const HASH_SIGNATURE: u32 = 2685476833;
pub const HASH_BLOOM_SIGNATURE: u32 = 2971803890;
pub const __PRI_8_LENGTH_MODIFIER__: &'static [u8; 3usize] = b"hh\0";
pub const __PRI_64_LENGTH_MODIFIER__: &'static [u8; 3usize] = b"ll\0";
pub const __SCN_64_LENGTH_MODIFIER__: &'static [u8; 3usize] = b"ll\0";
pub const __PRI_MAX_LENGTH_MODIFIER__: &'static [u8; 2usize] = b"j\0";
pub const __SCN_MAX_LENGTH_MODIFIER__: &'static [u8; 2usize] = b"j\0";
pub const PRId8: &'static [u8; 4usize] = b"hhd\0";
pub const PRIi8: &'static [u8; 4usize] = b"hhi\0";
pub const PRIo8: &'static [u8; 4usize] = b"hho\0";
pub const PRIu8: &'static [u8; 4usize] = b"hhu\0";
pub const PRIx8: &'static [u8; 4usize] = b"hhx\0";
pub const PRIX8: &'static [u8; 4usize] = b"hhX\0";
pub const PRId16: &'static [u8; 3usize] = b"hd\0";
pub const PRIi16: &'static [u8; 3usize] = b"hi\0";
pub const PRIo16: &'static [u8; 3usize] = b"ho\0";
pub const PRIu16: &'static [u8; 3usize] = b"hu\0";
pub const PRIx16: &'static [u8; 3usize] = b"hx\0";
pub const PRIX16: &'static [u8; 3usize] = b"hX\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRId64: &'static [u8; 4usize] = b"lld\0";
pub const PRIi64: &'static [u8; 4usize] = b"lli\0";
pub const PRIo64: &'static [u8; 4usize] = b"llo\0";
pub const PRIu64: &'static [u8; 4usize] = b"llu\0";
pub const PRIx64: &'static [u8; 4usize] = b"llx\0";
pub const PRIX64: &'static [u8; 4usize] = b"llX\0";
pub const PRIdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const PRIiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const PRIoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const PRIuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const PRIxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const PRIXLEAST8: &'static [u8; 4usize] = b"hhX\0";
pub const PRIdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const PRIiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const PRIoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const PRIuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const PRIxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const PRIXLEAST16: &'static [u8; 3usize] = b"hX\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIdLEAST64: &'static [u8; 4usize] = b"lld\0";
pub const PRIiLEAST64: &'static [u8; 4usize] = b"lli\0";
pub const PRIoLEAST64: &'static [u8; 4usize] = b"llo\0";
pub const PRIuLEAST64: &'static [u8; 4usize] = b"llu\0";
pub const PRIxLEAST64: &'static [u8; 4usize] = b"llx\0";
pub const PRIXLEAST64: &'static [u8; 4usize] = b"llX\0";
pub const PRIdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const PRIiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const PRIoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const PRIuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const PRIxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const PRIXFAST8: &'static [u8; 4usize] = b"hhX\0";
pub const PRIdFAST16: &'static [u8; 3usize] = b"hd\0";
pub const PRIiFAST16: &'static [u8; 3usize] = b"hi\0";
pub const PRIoFAST16: &'static [u8; 3usize] = b"ho\0";
pub const PRIuFAST16: &'static [u8; 3usize] = b"hu\0";
pub const PRIxFAST16: &'static [u8; 3usize] = b"hx\0";
pub const PRIXFAST16: &'static [u8; 3usize] = b"hX\0";
pub const PRIdFAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIiFAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIoFAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIuFAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIxFAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIXFAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIdFAST64: &'static [u8; 4usize] = b"lld\0";
pub const PRIiFAST64: &'static [u8; 4usize] = b"lli\0";
pub const PRIoFAST64: &'static [u8; 4usize] = b"llo\0";
pub const PRIuFAST64: &'static [u8; 4usize] = b"llu\0";
pub const PRIxFAST64: &'static [u8; 4usize] = b"llx\0";
pub const PRIXFAST64: &'static [u8; 4usize] = b"llX\0";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\0";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\0";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\0";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\0";
pub const PRIdMAX: &'static [u8; 3usize] = b"jd\0";
pub const PRIiMAX: &'static [u8; 3usize] = b"ji\0";
pub const PRIoMAX: &'static [u8; 3usize] = b"jo\0";
pub const PRIuMAX: &'static [u8; 3usize] = b"ju\0";
pub const PRIxMAX: &'static [u8; 3usize] = b"jx\0";
pub const PRIXMAX: &'static [u8; 3usize] = b"jX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNd64: &'static [u8; 4usize] = b"lld\0";
pub const SCNi64: &'static [u8; 4usize] = b"lli\0";
pub const SCNo64: &'static [u8; 4usize] = b"llo\0";
pub const SCNu64: &'static [u8; 4usize] = b"llu\0";
pub const SCNx64: &'static [u8; 4usize] = b"llx\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNdLEAST64: &'static [u8; 4usize] = b"lld\0";
pub const SCNiLEAST64: &'static [u8; 4usize] = b"lli\0";
pub const SCNoLEAST64: &'static [u8; 4usize] = b"llo\0";
pub const SCNuLEAST64: &'static [u8; 4usize] = b"llu\0";
pub const SCNxLEAST64: &'static [u8; 4usize] = b"llx\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNdFAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNiFAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNoFAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNuFAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNxFAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNdFAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNiFAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNoFAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNuFAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNxFAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNdFAST64: &'static [u8; 4usize] = b"lld\0";
pub const SCNiFAST64: &'static [u8; 4usize] = b"lli\0";
pub const SCNoFAST64: &'static [u8; 4usize] = b"llo\0";
pub const SCNuFAST64: &'static [u8; 4usize] = b"llu\0";
pub const SCNxFAST64: &'static [u8; 4usize] = b"llx\0";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\0";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\0";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\0";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\0";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\0";
pub const SCNdMAX: &'static [u8; 3usize] = b"jd\0";
pub const SCNiMAX: &'static [u8; 3usize] = b"ji\0";
pub const SCNoMAX: &'static [u8; 3usize] = b"jo\0";
pub const SCNuMAX: &'static [u8; 3usize] = b"ju\0";
pub const SCNxMAX: &'static [u8; 3usize] = b"jx\0";
pub const MAM_CHANNEL_ID_SIZE: u32 = 243;
pub const MAM_CHANNEL_NAME_SIZE: u32 = 18;
pub const MAM_CHANNEL_MSG_ORD_SIZE: u32 = 81;
pub const MAM_POLY_Q: u32 = 12289;
pub const MAM_POLY_N_LOG: u32 = 10;
pub const MAM_POLY_N: u32 = 1024;
pub const MAM_NTRU_ID_SIZE: u32 = 81;
pub const MAM_NTRU_PK_SIZE: u32 = 9216;
pub const MAM_NTRU_SK_SIZE: u32 = 1024;
pub const MAM_NTRU_KEY_SIZE: u32 = 243;
pub const MAM_NTRU_EKEY_SIZE: u32 = 9216;
pub const MAM_PSK_ID_SIZE: u32 = 81;
pub const MAM_PSK_KEY_SIZE: u32 = 243;
pub const MAM_MSG_ID_SIZE: u32 = 63;
pub const MAM_MSG_ORD_SIZE: u32 = 18;
pub const FLEX_TRIT_NULL_VALUE: u32 = 0;
pub const FLEX_TRIT_SIZE_27: u32 = 27;
pub const FLEX_TRIT_SIZE_81: u32 = 81;
pub const FLEX_TRIT_SIZE_243: u32 = 243;
pub const FLEX_TRIT_SIZE_6561: u32 = 6561;
pub const FLEX_TRIT_SIZE_8019: u32 = 8019;
pub const NUM_TRITS_PER_FLEX_TRIT: u32 = 1;
pub const KeccakP1600_implementation: &'static [u8; 32usize] = b"64-bit reference implementation\0";
pub const KeccakP1600_stateSizeInBytes: u32 = 200;
pub const KeccakP1600_stateAlignment: u32 = 8;
pub const NUM_TRITS_SERIALIZED_TRANSACTION: u32 = 8019;
pub const NUM_TRITS_SIGNATURE: u32 = 6561;
pub const NUM_TRITS_MESSAGE: u32 = 6561;
pub const NUM_TRITS_ADDRESS: u32 = 243;
pub const NUM_TRITS_VALUE: u32 = 81;
pub const NUM_TRITS_OBSOLETE_TAG: u32 = 81;
pub const NUM_TRITS_TIMESTAMP: u32 = 27;
pub const NUM_TRITS_CURRENT_INDEX: u32 = 27;
pub const NUM_TRITS_LAST_INDEX: u32 = 27;
pub const NUM_TRITS_BUNDLE: u32 = 243;
pub const NUM_TRITS_TRUNK: u32 = 243;
pub const NUM_TRITS_BRANCH: u32 = 243;
pub const NUM_TRITS_TAG: u32 = 81;
pub const NUM_TRITS_ATTACHMENT_TIMESTAMP: u32 = 27;
pub const NUM_TRITS_ATTACHMENT_TIMESTAMP_LOWER: u32 = 27;
pub const NUM_TRITS_ATTACHMENT_TIMESTAMP_UPPER: u32 = 27;
pub const NUM_TRITS_NONCE: u32 = 81;
pub const NUM_TRITS_HASH: u32 = 243;
pub const NUM_TRYTES_SERIALIZED_TRANSACTION: u32 = 2673;
pub const NUM_TRYTES_SIGNATURE: u32 = 2187;
pub const NUM_TRYTES_MESSAGE: u32 = 2187;
pub const NUM_TRYTES_ADDRESS: u32 = 81;
pub const NUM_TRYTES_VALUE: u32 = 27;
pub const NUM_TRYTES_OBSOLETE_TAG: u32 = 27;
pub const NUM_TRYTES_TIMESTAMP: u32 = 9;
pub const NUM_TRYTES_CURRENT_INDEX: u32 = 9;
pub const NUM_TRYTES_LAST_INDEX: u32 = 9;
pub const NUM_TRYTES_BUNDLE: u32 = 81;
pub const NUM_TRYTES_TRUNK: u32 = 81;
pub const NUM_TRYTES_BRANCH: u32 = 81;
pub const NUM_TRYTES_TAG: u32 = 27;
pub const NUM_TRYTES_ATTACHMENT_TIMESTAMP: u32 = 9;
pub const NUM_TRYTES_ATTACHMENT_TIMESTAMP_LOWER: u32 = 9;
pub const NUM_TRYTES_ATTACHMENT_TIMESTAMP_UPPER: u32 = 9;
pub const NUM_TRYTES_NONCE: u32 = 27;
pub const NUM_TRYTES_HASH: u32 = 81;
pub const NUM_FLEX_TRITS_SERIALIZED_TRANSACTION: u32 = 8019;
pub const NUM_FLEX_TRITS_SIGNATURE: u32 = 6561;
pub const NUM_FLEX_TRITS_MESSAGE: u32 = 6561;
pub const NUM_FLEX_TRITS_ADDRESS: u32 = 243;
pub const NUM_FLEX_TRITS_VALUE: u32 = 81;
pub const NUM_FLEX_TRITS_OBSOLETE_TAG: u32 = 81;
pub const NUM_FLEX_TRITS_TIMESTAMP: u32 = 27;
pub const NUM_FLEX_TRITS_CURRENT_INDEX: u32 = 27;
pub const NUM_FLEX_TRITS_LAST_INDEX: u32 = 27;
pub const NUM_FLEX_TRITS_BUNDLE: u32 = 243;
pub const NUM_FLEX_TRITS_TRUNK: u32 = 243;
pub const NUM_FLEX_TRITS_BRANCH: u32 = 243;
pub const NUM_FLEX_TRITS_TAG: u32 = 81;
pub const NUM_FLEX_TRITS_ATTACHMENT_TIMESTAMP: u32 = 27;
pub const NUM_FLEX_TRITS_ATTACHMENT_TIMESTAMP_LOWER: u32 = 27;
pub const NUM_FLEX_TRITS_ATTACHMENT_TIMESTAMP_UPPER: u32 = 27;
pub const NUM_FLEX_TRITS_NONCE: u32 = 81;
pub const NUM_FLEX_TRITS_HASH: u32 = 243;
pub const NUM_TRITS_ESSENCE: u32 = 486;
pub const MAX_IOTA_SUPPLY: u64 = 2779530283277761;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__next as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__cleanup_stack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__opaque as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type va_list = __darwin_va_list;
extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    assert_eq!(
        ::std::mem::size_of::<__sbuf>(),
        16usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._r as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._file as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._bf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_bf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lbfsize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lbfsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._cookie as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_cookie)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._close as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._read as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._seek as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._write as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ub as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._extra as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ur as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ubuf as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ubuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._nbuf as *const _ as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_nbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lb as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._blksize as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_offset)
        )
    );
}
pub type FILE = __sFILE;
extern "C" {
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type off_t = __darwin_off_t;
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: usize,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
#[doc = "< Sucess"]
pub const retcode_t_RC_OK: retcode_t = 0;
#[doc = "< uninitialized or unknown error"]
pub const retcode_t_RC_ERROR: retcode_t = 65535;
pub const retcode_t_RC_NULL_PARAM: retcode_t = 385;
pub const retcode_t_RC_INVALID_PARAM: retcode_t = 386;
pub const retcode_t_RC_OOM: retcode_t = 387;
pub const retcode_t_RC_FAILED_THREAD_SPAWN: retcode_t = 452;
pub const retcode_t_RC_FAILED_THREAD_JOIN: retcode_t = 325;
pub const retcode_t_RC_STILL_RUNNING: retcode_t = 326;
pub const retcode_t_RC_SQLITE3_FAILED_OPEN_DB: retcode_t = 1217;
pub const retcode_t_RC_SQLITE3_FAILED_INSERT_DB: retcode_t = 1154;
pub const retcode_t_RC_SQLITE3_FAILED_CREATE_INDEX_DB: retcode_t = 1155;
pub const retcode_t_RC_SQLITE3_FAILED_WRITE_STATEMENT: retcode_t = 1156;
pub const retcode_t_RC_SQLITE3_FAILED_SELECT_DB: retcode_t = 1157;
pub const retcode_t_RC_SQLITE3_NO_PATH_FOR_DB_SPECIFIED: retcode_t = 1222;
pub const retcode_t_RC_SQLITE3_FAILED_NOT_IMPLEMENTED: retcode_t = 1159;
pub const retcode_t_RC_SQLITE3_FAILED_START_TRANSACTION: retcode_t = 1160;
pub const retcode_t_RC_SQLITE3_FAILED_END_TRANSACTION: retcode_t = 1161;
pub const retcode_t_RC_SQLITE3_FAILED_BINDING: retcode_t = 1162;
pub const retcode_t_RC_SQLITE3_FAILED_PREPARED_STATEMENT: retcode_t = 1163;
pub const retcode_t_RC_SQLITE3_FAILED_FINALIZE: retcode_t = 1164;
pub const retcode_t_RC_SQLITE3_FAILED_STEP: retcode_t = 1165;
pub const retcode_t_RC_SQLITE3_FAILED_BEGIN: retcode_t = 1166;
pub const retcode_t_RC_SQLITE3_FAILED_END: retcode_t = 1167;
pub const retcode_t_RC_SQLITE3_FAILED_ROLLBACK: retcode_t = 1232;
pub const retcode_t_RC_SQLITE3_FAILED_CONFIG: retcode_t = 1233;
pub const retcode_t_RC_SQLITE3_FAILED_INITIALIZE: retcode_t = 1234;
pub const retcode_t_RC_SQLITE3_FAILED_SHUTDOWN: retcode_t = 1235;
pub const retcode_t_RC_SQL_FAILED_WRITE_STATEMENT: retcode_t = 897;
pub const retcode_t_RC_CORE_FAILED_DATABASE_INIT: retcode_t = 1474;
pub const retcode_t_RC_CORE_FAILED_DATABASE_DESTROY: retcode_t = 1347;
pub const retcode_t_RC_CORE_FAILED_MILESTONE_TRACKER_INIT: retcode_t = 1476;
pub const retcode_t_RC_CORE_FAILED_MILESTONE_TRACKER_START: retcode_t = 1477;
pub const retcode_t_RC_CORE_FAILED_MILESTONE_TRACKER_STOP: retcode_t = 1350;
pub const retcode_t_RC_CORE_FAILED_MILESTONE_TRACKER_DESTROY: retcode_t = 1351;
pub const retcode_t_RC_CORE_FAILED_NODE_INIT: retcode_t = 1480;
pub const retcode_t_RC_CORE_FAILED_NODE_START: retcode_t = 1481;
pub const retcode_t_RC_CORE_FAILED_NODE_STOP: retcode_t = 1354;
pub const retcode_t_RC_CORE_FAILED_NODE_DESTROY: retcode_t = 1355;
pub const retcode_t_RC_CORE_FAILED_API_INIT: retcode_t = 1484;
pub const retcode_t_RC_CORE_FAILED_API_START: retcode_t = 1485;
pub const retcode_t_RC_CORE_FAILED_API_STOP: retcode_t = 1358;
pub const retcode_t_RC_CORE_FAILED_API_DESTROY: retcode_t = 1359;
pub const retcode_t_RC_CORE_FAILED_SNAPSHOT_INIT: retcode_t = 1488;
pub const retcode_t_RC_CORE_FAILED_SNAPSHOT_DESTROY: retcode_t = 1361;
pub const retcode_t_RC_CORE_FAILED_LEDGER_VALIDATOR_INIT: retcode_t = 1490;
pub const retcode_t_RC_CORE_FAILED_LEDGER_VALIDATOR_DESTROY: retcode_t = 1363;
pub const retcode_t_RC_CORE_FAILED_CONSENSUS_INIT: retcode_t = 1493;
pub const retcode_t_RC_CORE_FAILED_CONSENSUS_START: retcode_t = 1494;
pub const retcode_t_RC_CORE_FAILED_CONSENSUS_STOP: retcode_t = 1495;
pub const retcode_t_RC_CORE_FAILED_CONSENSUS_DESTROY: retcode_t = 1496;
pub const retcode_t_RC_CORE_FAILED_API_HTTP_INIT: retcode_t = 1497;
pub const retcode_t_RC_CORE_FAILED_API_HTTP_START: retcode_t = 1498;
pub const retcode_t_RC_CORE_FAILED_API_HTTP_STOP: retcode_t = 1499;
pub const retcode_t_RC_CORE_FAILED_API_HTTP_DESTROY: retcode_t = 1500;
pub const retcode_t_RC_NODE_FAILED_NEIGHBORS_INIT: retcode_t = 1731;
pub const retcode_t_RC_NODE_FAILED_NEIGHBORS_DESTROY: retcode_t = 1732;
pub const retcode_t_RC_NODE_FAILED_BROADCASTER_INIT: retcode_t = 1733;
pub const retcode_t_RC_NODE_FAILED_BROADCASTER_START: retcode_t = 1734;
pub const retcode_t_RC_NODE_FAILED_BROADCASTER_STOP: retcode_t = 1607;
pub const retcode_t_RC_NODE_FAILED_BROADCASTER_DESTROY: retcode_t = 1608;
pub const retcode_t_RC_NODE_FAILED_PROCESSOR_INIT: retcode_t = 1737;
pub const retcode_t_RC_NODE_FAILED_PROCESSOR_START: retcode_t = 1738;
pub const retcode_t_RC_NODE_FAILED_PROCESSOR_STOP: retcode_t = 1611;
pub const retcode_t_RC_NODE_FAILED_PROCESSOR_DESTROY: retcode_t = 1612;
pub const retcode_t_RC_NODE_FAILED_RECEIVER_INIT: retcode_t = 1741;
pub const retcode_t_RC_NODE_FAILED_RECEIVER_START: retcode_t = 1742;
pub const retcode_t_RC_NODE_FAILED_RECEIVER_STOP: retcode_t = 1615;
pub const retcode_t_RC_NODE_FAILED_RECEIVER_DESTROY: retcode_t = 1616;
pub const retcode_t_RC_NODE_FAILED_RESPONDER_INIT: retcode_t = 1747;
pub const retcode_t_RC_NODE_FAILED_RESPONDER_START: retcode_t = 1748;
pub const retcode_t_RC_NODE_FAILED_RESPONDER_STOP: retcode_t = 1621;
pub const retcode_t_RC_NODE_FAILED_RESPONDER_DESTROY: retcode_t = 1622;
pub const retcode_t_RC_NODE_FAILED_REQUESTER_INIT: retcode_t = 1751;
pub const retcode_t_RC_NODE_FAILED_REQUESTER_DESTROY: retcode_t = 1624;
pub const retcode_t_RC_NEIGHBOR_NULL_NEIGHBOR: retcode_t = 1985;
pub const retcode_t_RC_NEIGHBOR_NULL_URI: retcode_t = 1986;
pub const retcode_t_RC_NEIGHBOR_NULL_HASH: retcode_t = 1987;
pub const retcode_t_RC_NEIGHBOR_NULL_PACKET: retcode_t = 1988;
pub const retcode_t_RC_NEIGHBOR_NULL_NODE: retcode_t = 1989;
pub const retcode_t_RC_NEIGHBOR_FAILED_URI_PARSING: retcode_t = 1926;
pub const retcode_t_RC_NEIGHBOR_INVALID_PROTOCOL: retcode_t = 1927;
pub const retcode_t_RC_NEIGHBOR_INVALID_HOST: retcode_t = 1928;
pub const retcode_t_RC_NEIGHBOR_FAILED_SEND: retcode_t = 1865;
pub const retcode_t_RC_NEIGHBOR_FAILED_REQUESTER: retcode_t = 1994;
pub const retcode_t_RC_NEIGHBOR_FAILED_ENDPOINT_INIT: retcode_t = 1995;
pub const retcode_t_RC_NEIGHBOR_FAILED_ENDPOINT_DESTROY: retcode_t = 1996;
pub const retcode_t_RC_NEIGHBOR_ALREADY_PAIRED: retcode_t = 1869;
pub const retcode_t_RC_NEIGHBOR_NOT_PAIRED: retcode_t = 1870;
#[doc = "< json create object error, might OOM."]
pub const retcode_t_RC_CCLIENT_JSON_CREATE: retcode_t = 2241;
pub const retcode_t_RC_CCLIENT_JSON_PARSE: retcode_t = 2178;
#[doc = "< Out of memory"]
pub const retcode_t_RC_CCLIENT_OOM: retcode_t = 2243;
#[doc = "< HTTP service error"]
pub const retcode_t_RC_CCLIENT_HTTP: retcode_t = 2180;
#[doc = "< HTTP post error"]
pub const retcode_t_RC_CCLIENT_HTTP_REQ: retcode_t = 2181;
#[doc = "< HTTP response error"]
pub const retcode_t_RC_CCLIENT_HTTP_RES: retcode_t = 2182;
#[doc = "< IRI response error string"]
pub const retcode_t_RC_CCLIENT_RES_ERROR: retcode_t = 2119;
#[doc = "< JSON key not found"]
pub const retcode_t_RC_CCLIENT_JSON_KEY: retcode_t = 2056;
#[doc = "< Flex trits converting error"]
pub const retcode_t_RC_CCLIENT_FLEX_TRITS: retcode_t = 2121;
#[doc = "< Null pointer"]
pub const retcode_t_RC_CCLIENT_NULL_PTR: retcode_t = 2186;
#[doc = "< Method unimplemented"]
pub const retcode_t_RC_CCLIENT_UNIMPLEMENTED: retcode_t = 2187;
#[doc = "< invalid security level"]
pub const retcode_t_RC_CCLIENT_INVALID_SECURITY: retcode_t = 2060;
#[doc = "< Host not found"]
pub const retcode_t_RC_CCLIENT_HOST_NOT_FOUND: retcode_t = 2189;
pub const retcode_t_RC_CCLIENT_TX_DESERIALIZE_FAILED: retcode_t = 2126;
#[doc = "< Insufficient balance"]
pub const retcode_t_RC_CCLIENT_INSUFFICIENT_BALANCE: retcode_t = 2063;
#[doc = "< PoW failed"]
pub const retcode_t_RC_CCLIENT_POW_FAILED: retcode_t = 2064;
#[doc = "< Invalid transfer object"]
pub const retcode_t_RC_CCLIENT_INVALID_TRANSFER: retcode_t = 2129;
#[doc = "< Invalid tail hash"]
pub const retcode_t_RC_CCLIENT_INVALID_TAIL_HASH: retcode_t = 2194;
#[doc = "< Invalid bundle object"]
pub const retcode_t_RC_CCLIENT_INVALID_BUNDLE: retcode_t = 2067;
pub const retcode_t_RC_CONSENSUS_NOT_IMPLEMENTED: retcode_t = 2433;
pub const retcode_t_RC_CONSENSUS_CW_FAILED_IN_DFS_FROM_DB: retcode_t = 2690;
pub const retcode_t_RC_CONSENSUS_CW_FAILED_IN_LIGHT_DFS: retcode_t = 2691;
pub const retcode_t_RC_CONSENSUS_NULL_PTR: retcode_t = 2501;
pub const retcode_t_RC_CONSENSUS_EXIT_PROBABILITIES_INVALID_ENTRYPOINT: retcode_t = 2950;
pub const retcode_t_RC_CONSENSUS_EXIT_PROBABILITIES_MISSING_RATING: retcode_t = 2887;
pub const retcode_t_RC_CONSENSUS_NULL_BUNDLE_PTR: retcode_t = 2696;
pub const retcode_t_RC_UTILS_FAILED_REMOVE_FILE: retcode_t = 41345;
pub const retcode_t_RC_UTILS_FAILED_TO_COPY_FILE: retcode_t = 41346;
pub const retcode_t_RC_UTILS_FAILED_TO_OPEN_FILE: retcode_t = 41347;
pub const retcode_t_RC_UTILS_FAILED_TO_DIGEST_FILE: retcode_t = 41348;
pub const retcode_t_RC_UTILS_INVALID_SIG_FILE: retcode_t = 41350;
pub const retcode_t_RC_UTILS_INVALID_LOGGER_VERSION: retcode_t = 41351;
pub const retcode_t_RC_UTILS_FAILED_WRITE_FILE: retcode_t = 41352;
pub const retcode_t_RC_UTILS_FAILED_READ_FILE: retcode_t = 41353;
pub const retcode_t_RC_UTILS_SOCKET_TLS_RNG: retcode_t = 41354;
pub const retcode_t_RC_UTILS_SOCKET_TLS_CA: retcode_t = 41355;
pub const retcode_t_RC_UTILS_SOCKET_TLS_CLIENT_PEM: retcode_t = 41356;
pub const retcode_t_RC_UTILS_SOCKET_TLS_CLIENT_PK: retcode_t = 41357;
pub const retcode_t_RC_UTILS_SOCKET_TLS_CONF: retcode_t = 41358;
pub const retcode_t_RC_UTILS_SOCKET_TLS_AUTHMODE: retcode_t = 41359;
pub const retcode_t_RC_UTILS_SOCKET_CLIENT_AUTH: retcode_t = 41360;
pub const retcode_t_RC_UTILS_SOCKET_TLS_HANDSHAKE: retcode_t = 41361;
pub const retcode_t_RC_UTILS_SOCKET_CONNECT: retcode_t = 41362;
pub const retcode_t_RC_UTILS_SOCKET_RECV: retcode_t = 41235;
pub const retcode_t_RC_UTILS_SOCKET_SEND: retcode_t = 41236;
pub const retcode_t_RC_BROADCASTER_FAILED_PUSH_QUEUE: retcode_t = 41473;
pub const retcode_t_RC_BROADCASTER_STILL_RUNNING: retcode_t = 41666;
pub const retcode_t_RC_PROCESSOR_INVALID_TRANSACTION: retcode_t = 41793;
pub const retcode_t_RC_PROCESSOR_INVALID_REQUEST: retcode_t = 41794;
pub const retcode_t_RC_RECEIVER_COMPONENT_INVALID_PROCESSOR: retcode_t = 42177;
pub const retcode_t_RC_REQUESTER_COMPONENT_FAILED_INIT_LIST: retcode_t = 42433;
pub const retcode_t_RC_REQUESTER_COMPONENT_FAILED_DESTROY_LIST: retcode_t = 42306;
pub const retcode_t_RC_REQUESTER_COMPONENT_FAILED_ADD_LIST: retcode_t = 42243;
pub const retcode_t_RC_REQUESTER_COMPONENT_FAILED_REMOVE_LIST: retcode_t = 42244;
pub const retcode_t_RC_RESPONDER_COMPONENT_FAILED_TX_PROCESSING: retcode_t = 42509;
pub const retcode_t_RC_RESPONDER_COMPONENT_FAILED_REQ_PROCESSING: retcode_t = 42510;
pub const retcode_t_RC_RESPONDER_COMPONENT_INVALID_TX: retcode_t = 42575;
pub const retcode_t_RC_GOSSIP_SET_PACKET_TRANSACTION_FAILED: retcode_t = 43329;
pub const retcode_t_RC_GOSSIP_SET_PACKET_REQUEST_FAILED: retcode_t = 43330;
pub const retcode_t_RC_CIRI_CONF_INVALID_ARGUMENT: retcode_t = 42945;
pub const retcode_t_RC_CIRI_CONF_MISSING_ARGUMENT: retcode_t = 42946;
pub const retcode_t_RC_CIRI_CONF_UNKNOWN_OPTION: retcode_t = 42947;
pub const retcode_t_RC_CIRI_CONF_FILE_NOT_FOUND: retcode_t = 42948;
pub const retcode_t_RC_CIRI_CONF_PARSER_ERROR: retcode_t = 42949;
pub const retcode_t_RC_API_SERIALIZER_NOT_IMPLEMENTED: retcode_t = 43201;
pub const retcode_t_RC_API_MAX_GET_TRYTES: retcode_t = 43074;
pub const retcode_t_RC_API_FIND_TRANSACTIONS_NO_INPUT: retcode_t = 43075;
pub const retcode_t_RC_API_MAX_FIND_TRANSACTIONS: retcode_t = 43076;
pub const retcode_t_RC_API_INVALID_DEPTH_INPUT: retcode_t = 43077;
pub const retcode_t_RC_API_INVALID_SUBTANGLE_STATUS: retcode_t = 43078;
pub const retcode_t_RC_API_TAIL_MISSING: retcode_t = 43079;
pub const retcode_t_RC_API_NOT_TAIL: retcode_t = 43080;
pub const retcode_t_RC_API_INVALID_COMMAND: retcode_t = 43017;
pub const retcode_t_RC_API_GET_BALANCES_INVALID_THRESHOLD: retcode_t = 43018;
pub const retcode_t_RC_API_GET_BALANCES_UNKNOWN_TIP: retcode_t = 43019;
pub const retcode_t_RC_API_GET_BALANCES_INCONSISTENT_TIP: retcode_t = 43019;
pub const retcode_t_RC_SNAPSHOT_FILE_NOT_FOUND: retcode_t = 3521;
pub const retcode_t_RC_SNAPSHOT_INVALID_FILE: retcode_t = 3522;
pub const retcode_t_RC_SNAPSHOT_INVALID_SUPPLY: retcode_t = 3523;
pub const retcode_t_RC_SNAPSHOT_INCONSISTENT_SNAPSHOT: retcode_t = 3524;
pub const retcode_t_RC_SNAPSHOT_INCONSISTENT_PATCH: retcode_t = 3461;
pub const retcode_t_RC_SNAPSHOT_BALANCE_NOT_FOUND: retcode_t = 3398;
pub const retcode_t_RC_SNAPSHOT_INVALID_SIGNATURE: retcode_t = 3527;
pub const retcode_t_RC_SNAPSHOT_FAILED_JSON_PARSING: retcode_t = 3528;
pub const retcode_t_RC_LEDGER_VALIDATOR_INVALID_TRANSACTION: retcode_t = 3713;
pub const retcode_t_RC_LEDGER_VALIDATOR_COULD_NOT_LOAD_MILESTONE: retcode_t = 3714;
pub const retcode_t_RC_LEDGER_VALIDATOR_INCONSISTENT_DELTA: retcode_t = 3779;
pub const retcode_t_RC_LEDGER_VALIDATOR_TRANSACTION_NOT_SOLID: retcode_t = 3780;
pub const retcode_t_RC_TIP_SELECTOR_TIPS_NOT_CONSISTENT: retcode_t = 3905;
pub const retcode_t_RC_TIP_SELECTOR_REFERENCE_TOO_OLD: retcode_t = 3906;
pub const retcode_t_RC_TANGLE_TAIL_NOT_FOUND: retcode_t = 4161;
pub const retcode_t_RC_TANGLE_NOT_A_TAIL: retcode_t = 4162;
pub const retcode_t_RC_MAM_BUFFER_TOO_SMALL: retcode_t = 45121;
pub const retcode_t_RC_MAM_INVALID_ARGUMENT: retcode_t = 45122;
pub const retcode_t_RC_MAM_INVALID_VALUE: retcode_t = 45123;
pub const retcode_t_RC_MAM_NEGATIVE_VALUE: retcode_t = 45124;
pub const retcode_t_RC_MAM_INTERNAL_ERROR: retcode_t = 45125;
pub const retcode_t_RC_MAM_NOT_IMPLEMENTED: retcode_t = 45126;
pub const retcode_t_RC_MAM_PB3_EOF: retcode_t = 45127;
pub const retcode_t_RC_MAM_PB3_BAD_ONEOF: retcode_t = 45128;
pub const retcode_t_RC_MAM_PB3_BAD_OPTIONAL: retcode_t = 45129;
pub const retcode_t_RC_MAM_PB3_BAD_REPEATED: retcode_t = 45130;
pub const retcode_t_RC_MAM_PB3_BAD_MAC: retcode_t = 45131;
pub const retcode_t_RC_MAM_PB3_BAD_SIG: retcode_t = 45132;
pub const retcode_t_RC_MAM_PB3_BAD_EKEY: retcode_t = 45133;
pub const retcode_t_RC_MAM_PB3_SIZE_T_NOT_SUPPORTED: retcode_t = 45134;
pub const retcode_t_RC_MAM_CHANNEL_NOT_FOUND: retcode_t = 45135;
pub const retcode_t_RC_MAM_ENDPOINT_NOT_FOUND: retcode_t = 45136;
pub const retcode_t_RC_MAM_VERSION_NOT_SUPPORTED: retcode_t = 45137;
pub const retcode_t_RC_MAM_CHANNEL_NOT_TRUSTED: retcode_t = 45138;
pub const retcode_t_RC_MAM_ENDPOINT_NOT_TRUSTED: retcode_t = 45139;
pub const retcode_t_RC_MAM_KEYLOAD_IRRELEVANT: retcode_t = 45140;
pub const retcode_t_RC_MAM_KEYLOAD_OVERLOADED: retcode_t = 45141;
pub const retcode_t_RC_MAM_BUNDLE_NOT_EMPTY: retcode_t = 45142;
pub const retcode_t_RC_MAM_BUNDLE_DOES_NOT_CONTAIN_HEADER: retcode_t = 45143;
pub const retcode_t_RC_MAM_RECV_CTX_NOT_FOUND: retcode_t = 45144;
pub const retcode_t_RC_MAM_SEND_CTX_NOT_FOUND: retcode_t = 45145;
pub const retcode_t_RC_MAM_MESSAGE_NOT_FOUND: retcode_t = 45146;
pub const retcode_t_RC_MAM_BAD_PACKET_ORD: retcode_t = 45147;
pub const retcode_t_RC_MAM_MSS_EXHAUSTED: retcode_t = 45148;
pub const retcode_t_RC_MAM_NTRU_POLY_FAILED: retcode_t = 45149;
pub const retcode_t_RC_MAM_API_FAILED_CREATE_ENDPOINT: retcode_t = 45150;
pub const retcode_t_RC_MAM_API_FAILED_CREATE_CHANNEL: retcode_t = 45151;
pub const retcode_t_RC_MAM_PK_IS_NOT_TRUSTED: retcode_t = 45152;
pub const retcode_t_RC_MAM_MSS_NOT_FOUND: retcode_t = 45153;
pub const retcode_t_RC_HELPERS_POW_INVALID_TX: retcode_t = 45377;
pub const retcode_t_RC_CRYPTO_UNSUPPORTED_SPONGE_TYPE: retcode_t = 45441;
#[doc = " @brief Error codes"]
#[doc = ""]
pub type retcode_t = u32;
extern "C" {
    #[doc = " @brief error code to string"]
    #[doc = ""]
    #[doc = " @param err error code"]
    #[doc = " @return string"]
    pub fn error_2_string(err: retcode_t) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct accessx_descriptor {
    pub ad_name_offset: ::std::os::raw::c_uint,
    pub ad_flags: ::std::os::raw::c_int,
    pub ad_pad: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout_accessx_descriptor() {
    assert_eq!(
        ::std::mem::size_of::<accessx_descriptor>(),
        16usize,
        concat!("Size of: ", stringify!(accessx_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<accessx_descriptor>(),
        4usize,
        concat!("Alignment of ", stringify!(accessx_descriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<accessx_descriptor>())).ad_name_offset as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(accessx_descriptor),
            "::",
            stringify!(ad_name_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<accessx_descriptor>())).ad_flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(accessx_descriptor),
            "::",
            stringify!(ad_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<accessx_descriptor>())).ad_pad as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(accessx_descriptor),
            "::",
            stringify!(ad_pad)
        )
    );
}
extern "C" {
    pub fn getattrlistbulk(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
        arg6: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
        arg6: u32,
    ) -> ::std::os::raw::c_int;
}
pub type uid_t = __darwin_uid_t;
pub type gid_t = __darwin_gid_t;
extern "C" {
    pub fn faccessat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: uid_t,
        arg4: gid_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> isize;
}
extern "C" {
    pub fn symlinkat(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type pid_t = __darwin_pid_t;
pub type useconds_t = __darwin_useconds_t;
extern "C" {
    pub fn _exit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn access(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn chdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn close(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execve(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> pid_t;
}
extern "C" {
    pub fn fpathconf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn getcwd(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getegid() -> gid_t;
}
extern "C" {
    pub fn geteuid() -> uid_t;
}
extern "C" {
    pub fn getgid() -> gid_t;
}
extern "C" {
    pub fn getgroups(arg1: ::std::os::raw::c_int, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getpgrp() -> pid_t;
}
extern "C" {
    pub fn getpid() -> pid_t;
}
extern "C" {
    pub fn getppid() -> pid_t;
}
extern "C" {
    pub fn getuid() -> uid_t;
}
extern "C" {
    pub fn isatty(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(arg1: ::std::os::raw::c_int, arg2: off_t, arg3: ::std::os::raw::c_int) -> off_t;
}
extern "C" {
    pub fn pathconf(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pipe(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn rmdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgid(arg1: pid_t, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> pid_t;
}
extern "C" {
    pub fn setuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sleep(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sysconf(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn tcgetpgrp(arg1: ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn tcsetpgrp(arg1: ::std::os::raw::c_int, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: usize,
    ) -> isize;
}
extern "C" {
    pub fn confstr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> usize;
}
extern "C" {
    pub fn getopt(
        arg1: ::std::os::raw::c_int,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(arg1: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn chroot(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn encrypt(arg1: *mut ::std::os::raw::c_char, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fchdir(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn getpgid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getsid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lchown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbyte: usize,
        __offset: off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: usize,
        __offset: off_t,
    ) -> isize;
}
extern "C" {
    pub fn sbrk(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn setpgrp() -> pid_t;
}
extern "C" {
    pub fn setregid(arg1: gid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(arg1: uid_t, arg2: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: isize,
    );
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn truncate(arg1: *const ::std::os::raw::c_char, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ualarm(arg1: useconds_t, arg2: useconds_t) -> useconds_t;
}
extern "C" {
    pub fn usleep(arg1: useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsync(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(arg1: ::std::os::raw::c_int, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin_r(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(arg1: ::std::os::raw::c_int, arg2: uid_t, arg3: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn setegid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        4usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub type time_t = __darwin_time_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type sigset_t = __darwin_sigset_t;
extern "C" {
    pub fn pselect(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *const timespec,
        arg6: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn select(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
pub type uuid_t = __darwin_uuid_t;
extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn accessx_np(
        arg1: *const accessx_descriptor,
        arg2: usize,
        arg3: *mut ::std::os::raw::c_int,
        arg4: uid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn execvP(
        __file: *const ::std::os::raw::c_char,
        __searchpath: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflagstostr(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getdomainname(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getgrouplist(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostuuid(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmode(arg1: *const ::std::os::raw::c_void, arg2: mode_t) -> mode_t;
}
extern "C" {
    pub fn getpeereid(
        arg1: ::std::os::raw::c_int,
        arg2: *mut uid_t,
        arg3: *mut gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initgroups(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn issetugid() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mknod(
        arg1: *const ::std::os::raw::c_char,
        arg2: mode_t,
        arg3: dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkpath_np(path: *const ::std::os::raw::c_char, omode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkpathat_np(
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        omode: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkostemp(
        path: *mut ::std::os::raw::c_char,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp_dprotected_np(
        path: *mut ::std::os::raw::c_char,
        dpclass: ::std::os::raw::c_int,
        dpflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtempat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nfssvc(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setugid_np(arg1: uid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getugid_np(arg1: *mut uid_t, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reboot(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd_af(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport_af(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok(
        arg1: ::std::os::raw::c_ulong,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok_sa(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgroups(arg1: ::std::os::raw::c_int, arg2: *const gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn sethostname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setlogin(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setmode(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn setrgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setruid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn setwgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtofflags(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swapon(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn undelete(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unwhiteout(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn valloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exchangedata(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdirentriesattr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_uint,
        arg7: *mut ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fssearchblock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct searchstate {
    _unused: [u8; 0],
}
extern "C" {
    pub fn searchfs(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut fssearchblock,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: *mut searchstate,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsctl(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsync_volume_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sync_volume_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optreset: ::std::os::raw::c_int;
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type trit_t = i8;
pub type tryte_t = i8;
extern "C" {
    pub fn get_trit_at(trytes: *const tryte_t, length: usize, index: usize) -> trit_t;
}
extern "C" {
    pub fn set_trit_at(trytes: *mut tryte_t, length: usize, index: usize, trit: trit_t) -> u8;
}
extern "C" {
    pub fn trits_to_trytes(trits: *const trit_t, trytes: *mut tryte_t, length: usize);
}
extern "C" {
    pub fn trytes_to_trits(trytes: *const tryte_t, trits: *mut trit_t, length: usize);
}
extern "C" {
    pub fn ascii_to_trytes(input: *const ::std::os::raw::c_char, output: *mut tryte_t);
}
extern "C" {
    pub fn trytes_to_ascii(
        intput: *const tryte_t,
        input_size: usize,
        ouput: *mut ::std::os::raw::c_char,
    );
}
pub type rsize_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = u128;
extern "C" {
    pub fn __assert_rtn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    );
}
#[doc = " \\brief Signed integer type capable of storing single trit"]
#[doc = "with values in range [-1,0,1]."]
pub type trint1_t = i8;
extern "C" {
    #[doc = " \\brief Return `x + s (mods 3)`."]
    pub fn trit_add(x: trit_t, s: trit_t) -> trit_t;
}
extern "C" {
    #[doc = " \\brief Return `y - s (mods 3)`."]
    pub fn trit_sub(y: trit_t, s: trit_t) -> trit_t;
}
#[doc = " \\brief Signed integer type capable of storing 3 trits"]
#[doc = "with values in range [-13,..,-1,0,1,..,13]."]
pub type trint3_t = i8;
extern "C" {
    pub fn tryte_from_trits(t0: trit_t, t1: trit_t, t2: trit_t) -> tryte_t;
}
extern "C" {
    pub fn tryte_to_char(t: tryte_t) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn tryte_from_char(t: *mut tryte_t, c: ::std::os::raw::c_char) -> bool;
}
#[doc = " \\brief Signed integer type capable of storing 6 trits"]
#[doc = "with values in range [-(3^6-1)/2=-364,..,-1,0,1,..,364=(3^6-1)/2]."]
pub type trint6_t = i16;
#[doc = " \\brief Signed integer type capable of storing 9 trits"]
#[doc = "with values in range [-(3^9-1)/2=-9841,..,-1,0,1,..,9841=(3^9-1)/2]."]
pub type trint9_t = i16;
#[doc = " \\brief Signed integer type capable of storing 18 trits"]
#[doc = "with values in range [-(3^18-1)/2,..,-1,0,1,..,(3^18-1)/2]."]
pub type trint18_t = i32;
#[doc = " Unsigned 8-bit type."]
pub type byte = u8;
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __s1: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
pub type errno_t = ::std::os::raw::c_int;
extern "C" {
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: usize,
        __little: *const ::std::os::raw::c_void,
        __little_len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    );
}
extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
#[doc = " \\brief Array of trits."]
#[doc = "`p -> |...d...|......|`"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct trits_s {
    #[doc = "< total number of trits pointed to by `p`"]
    pub n: usize,
    #[doc = "< offset of the first trit; number of available trits is `n-d`"]
    pub d: usize,
    #[doc = "< pointer to the trits"]
    pub p: *mut trit_t,
}
#[test]
fn bindgen_test_layout_trits_s() {
    assert_eq!(
        ::std::mem::size_of::<trits_s>(),
        24usize,
        concat!("Size of: ", stringify!(trits_s))
    );
    assert_eq!(
        ::std::mem::align_of::<trits_s>(),
        8usize,
        concat!("Alignment of ", stringify!(trits_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<trits_s>())).n as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(trits_s),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<trits_s>())).d as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(trits_s),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<trits_s>())).p as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(trits_s),
            "::",
            stringify!(p)
        )
    );
}
pub type trits_t = trits_s;
extern "C" {
    #[doc = " \\brief Check `x.n` against zero."]
    pub fn trits_is_empty(x: trits_t) -> bool;
}
extern "C" {
    #[doc = " \\brief Size of `x`."]
    pub fn trits_size(x: trits_t) -> usize;
}
extern "C" {
    #[doc = " \\brief Minimum of the size of `x` and `s`."]
    pub fn trits_size_min(x: trits_t, s: usize) -> usize;
}
extern "C" {
    #[doc = " \\brief Construct `n` trits from representation `w`."]
    pub fn trits_from_rep(n: usize, t: *const trit_t) -> trits_t;
}
extern "C" {
    #[doc = " \\brief Take the first `n` trits from `x`."]
    pub fn trits_take(x: trits_t, n: usize) -> trits_t;
}
extern "C" {
    #[doc = " \\brief Take at most `n` first trits from `x`."]
    pub fn trits_take_min(x: trits_t, n: usize) -> trits_t;
}
extern "C" {
    #[doc = " \\brief Drop the first `n` trits from `x`."]
    pub fn trits_drop(x: trits_t, n: usize) -> trits_t;
}
extern "C" {
    #[doc = " \\brief Drop at most `n` first trits from `x`."]
    pub fn trits_drop_min(x: trits_t, n: usize) -> trits_t;
}
extern "C" {
    #[doc = " \\brief Pickup `n` trits previously dropped from `x`."]
    pub fn trits_pickup(x: trits_t, n: usize) -> trits_t;
}
extern "C" {
    pub fn trits_pickup_all(x: trits_t) -> trits_t;
}
extern "C" {
    pub fn trits_advance(b: *mut trits_t, n: usize) -> trits_t;
}
extern "C" {
    #[doc = " \\brief Get the first trit."]
    pub fn trits_get1(x: trits_t) -> trint1_t;
}
extern "C" {
    #[doc = " \\brief Put the first trit."]
    pub fn trits_put1(x: trits_t, t: trint1_t);
}
extern "C" {
    #[doc = " \\brief Get the first tryte."]
    pub fn trits_get3(x: trits_t) -> trint3_t;
}
extern "C" {
    #[doc = " \\brief Put the first tryte."]
    pub fn trits_put3(x: trits_t, t: trint3_t);
}
extern "C" {
    pub fn trits_get6(x: trits_t) -> trint6_t;
}
extern "C" {
    pub fn trits_put6(x: trits_t, t: trint6_t);
}
extern "C" {
    pub fn trits_get9(x: trits_t) -> trint9_t;
}
extern "C" {
    pub fn trits_put9(x: trits_t, t: trint9_t);
}
extern "C" {
    pub fn trits_get18(x: trits_t) -> trint18_t;
}
extern "C" {
    pub fn trits_put18(x: trits_t, t: trint18_t);
}
extern "C" {
    pub fn trits_get_char(x: trits_t) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn trits_put_char(x: trits_t, c: ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn trits_get_byte(x: trits_t) -> byte;
}
extern "C" {
    pub fn trits_put_byte(x: trits_t, b: byte) -> bool;
}
extern "C" {
    #[doc = " \\brief Convert trytes to string."]
    #[doc = "\\note `trits_size(x)` must be multiple of 3."]
    #[doc = "Size of `s` must be equal `trits_size(x)/3`."]
    pub fn trits_to_str(x: trits_t, s: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[doc = " \\brief Convert trytes from string."]
    #[doc = "\\note `trits_size(x)` must be multiple of 3."]
    #[doc = "Size of `s` must be equal `trits_size(x)/3`."]
    pub fn trits_from_str(x: trits_t, s: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    #[doc = " \\brief Copy minimal number of trits contained in `x` and `y`."]
    #[doc = "Return number of trits copied."]
    pub fn trits_copy_min(x: trits_t, y: trits_t) -> usize;
}
extern "C" {
    #[doc = " \\brief Pad trits: `y := c0 || 0^{|y|-1}`."]
    pub fn trits_padc0(c0: trit_t, y: trits_t);
}
extern "C" {
    #[doc = " \\brief Copy and pad trits: `y := x || c0 || 0^{|y|-|x|-1}`."]
    pub fn trits_copy_padc0(c0: trit_t, x: trits_t, y: trits_t);
}
extern "C" {
    #[doc = " \\brief Pad non-empty trits: `y := c0 || 0^{|y|-1}` if `|y|>0`."]
    pub fn trits_padc(c0: trit_t, y: trits_t);
}
extern "C" {
    #[doc = " \\brief Copy and pad non-empty trits: `y := x || c0 || 0^{|y|-|x|-1}` if `|y|"]
    #[doc = " > |x|` else `y := x`."]
    pub fn trits_copy_padc(c0: trit_t, x: trits_t, y: trits_t);
}
extern "C" {
    #[doc = " \\brief Add trits: `y` := `x` + `s`."]
    pub fn trits_add(x: trits_t, s: trits_t, y: trits_t);
}
extern "C" {
    #[doc = " \\brief Sub trits: `x` := `y` - `s`."]
    pub fn trits_sub(y: trits_t, s: trits_t, x: trits_t);
}
extern "C" {
    #[doc = " \\brief Copy and add trits: `y` := `x` + `s`, `s` := `x`."]
    pub fn trits_copy_add(x: trits_t, s: trits_t, y: trits_t);
}
extern "C" {
    #[doc = " \\brief Copy and sub trits: `x` := `y` - `s`, `s` := `x`."]
    pub fn trits_copy_sub(y: trits_t, s: trits_t, x: trits_t);
}
extern "C" {
    pub fn trits_swap_add(x: trits_t, s: trits_t);
}
extern "C" {
    pub fn trits_swap_sub(y: trits_t, s: trits_t);
}
extern "C" {
    pub fn trit_swap_add(x: *mut trit_t, s: *mut trit_t);
}
extern "C" {
    pub fn trit_swap_sub(y: *mut trit_t, s: *mut trit_t);
}
extern "C" {
    pub fn trits_copy_add_min(x: trits_t, s: trits_t, y: trits_t) -> usize;
}
extern "C" {
    pub fn trits_copy_sub_min(x: trits_t, s: trits_t, y: trits_t) -> usize;
}
extern "C" {
    pub fn trits_swap_add_min(x: trits_t, s: trits_t) -> usize;
}
extern "C" {
    pub fn trits_swap_sub_min(x: trits_t, s: trits_t) -> usize;
}
extern "C" {
    #[doc = " \\brief Compare trits: `x` <=> `y`."]
    pub fn trits_cmp_grlex(x: trits_t, y: trits_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " \\brief Compare trits: `x` =? `y`."]
    pub fn trits_cmp_eq(x: trits_t, y: trits_t) -> bool;
}
extern "C" {
    pub fn trits_cmp_eq_str(x: trits_t, y: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    #[doc = " \\brief Return `x` such that:"]
    #[doc = "`trits_is_same(trits_drop(begin, trits_size(x)), end)` and"]
    #[doc = "`trits_is_same(trits_take(begin, trits_size(x)), x)`."]
    pub fn trits_diff(begin: trits_t, end: trits_t) -> trits_t;
}
extern "C" {
    #[doc = " \\brief Null trits."]
    pub fn trits_null() -> trits_t;
}
extern "C" {
    #[doc = " \\brief Check `x.p` against null."]
    #[doc = "\\note Usually trits_t can't be null. All basic layers including"]
    #[doc = "`trits`, `sponge`, `prng`, `wots`, and `mss` rely on caller"]
    #[doc = "to allocate memory for trits. But in certain cases where the size of memory"]
    #[doc = "is difficult to trac memory can be allocated within a callee."]
    #[doc = "In such case trits should be passed by pointer: `trits_t *x`."]
    pub fn trits_is_null(x: trits_t) -> bool;
}
extern "C" {
    #[doc = " \\brief Increment trits with carry. Return false if overflow would occur."]
    pub fn trits_inc(x: trits_t) -> bool;
}
extern "C" {
    #[doc = " \\brief Alloc `n` trits."]
    pub fn trits_alloc(n: usize) -> trits_t;
}
extern "C" {
    #[doc = " \\brief Free trits `x`."]
    pub fn trits_free(x: trits_t);
}
extern "C" {
    #[doc = " \\brief Print string rep of `x` into stdout."]
    pub fn trits_print(x: trits_t);
}
extern "C" {
    pub fn trits_print2(
        pfx: *const ::std::os::raw::c_char,
        x: trits_t,
        sfx: *const ::std::os::raw::c_char,
    );
}
#[doc = " Sponge interface"]
#[doc = ""]
#[doc = " @field stack Additional memory used by the transformation function"]
#[doc = " @field state sponge state"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sponge_s {
    pub state: [trit_t; 729usize],
}
#[test]
fn bindgen_test_layout_sponge_s() {
    assert_eq!(
        ::std::mem::size_of::<sponge_s>(),
        729usize,
        concat!("Size of: ", stringify!(sponge_s))
    );
    assert_eq!(
        ::std::mem::align_of::<sponge_s>(),
        1usize,
        concat!("Alignment of ", stringify!(sponge_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sponge_s>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sponge_s),
            "::",
            stringify!(state)
        )
    );
}
pub type mam_sponge_t = sponge_s;
extern "C" {
    #[doc = " Gets part (the first `rate` trits) of the sponge outer state"]
    #[doc = ""]
    #[doc = " @param sponge Sponge interface"]
    #[doc = ""]
    #[doc = " @return the trits"]
    pub fn mam_sponge_outer_trits(sponge: *const mam_sponge_t) -> trits_t;
}
extern "C" {
    #[doc = " Sponge state initialization"]
    #[doc = ""]
    #[doc = " @param sponge Sponge interface"]
    pub fn mam_sponge_init(sponge: *mut mam_sponge_t);
}
extern "C" {
    #[doc = " Internal state transformation"]
    #[doc = ""]
    #[doc = " @param sponge Sponge interface"]
    pub fn mam_sponge_transform(sponge: *mut mam_sponge_t);
}
extern "C" {
    #[doc = " Fork (copy) sponge state. `fork` must be initialized"]
    #[doc = ""]
    #[doc = " @param sponge Sponge interface"]
    #[doc = " @param fork Sponge interface"]
    pub fn mam_sponge_fork(sponge: *const mam_sponge_t, fork: *mut mam_sponge_t);
}
extern "C" {
    #[doc = " Sponge absorption"]
    #[doc = ""]
    #[doc = " @param sponge Sponge interface"]
    #[doc = " @param c2 Control trit encoding output data type"]
    #[doc = " @param data Input data blocks"]
    pub fn mam_sponge_absorb(sponge: *mut mam_sponge_t, c2: trit_t, data: trits_t);
}
extern "C" {
    #[doc = " Absorb concatenation of `Xs[0]`..`Xs[n-1]`"]
    #[doc = ""]
    #[doc = " @param sponge Sponge interface"]
    #[doc = " @param c2 Control trit encoding output data type"]
    #[doc = " @param n Input data blocks count"]
    #[doc = " @param data_blocks Input data blocks"]
    pub fn mam_sponge_absorbn(
        sponge: *mut mam_sponge_t,
        c2: trit_t,
        n: usize,
        data_blocks: *const trits_t,
    );
}
extern "C" {
    #[doc = " Sponge squeezing"]
    #[doc = ""]
    #[doc = " @param sponge Sponge interface"]
    #[doc = " @param c2 Control trit encoding output data type"]
    #[doc = " @param squeezed Output data"]
    pub fn mam_sponge_squeeze(sponge: *mut mam_sponge_t, c2: trit_t, squeezed: trits_t);
}
extern "C" {
    #[doc = " Sponge AE encryption"]
    #[doc = ""]
    #[doc = " @param sponge Sponge interface"]
    #[doc = " @param plaintext Input data"]
    #[doc = " @param ciphertext Hash value"]
    pub fn mam_sponge_encr(sponge: *mut mam_sponge_t, plaintext: trits_t, ciphertext: trits_t);
}
extern "C" {
    #[doc = " Sponge AE decryption"]
    #[doc = ""]
    #[doc = " @param sponge Sponge interface"]
    #[doc = " @param ciphertext Hash value"]
    #[doc = " @param plaintext Input data"]
    pub fn mam_sponge_decr(sponge: *mut mam_sponge_t, ciphertext: trits_t, plaintext: trits_t);
}
extern "C" {
    #[doc = " Sponge hashing"]
    #[doc = ""]
    #[doc = " @param sponge Sponge interface"]
    #[doc = " @param plaintext Input data"]
    #[doc = " @param digest Hash value"]
    pub fn mam_sponge_hash(sponge: *mut mam_sponge_t, plaintext: trits_t, digest: trits_t);
}
extern "C" {
    #[doc = " Sponge hashing"]
    #[doc = ""]
    #[doc = " @param sponge Sponge interface"]
    #[doc = " @param n Input data blocks count"]
    #[doc = " @param plaintext_blocks Input data blocks"]
    #[doc = " @param digest Hash value"]
    pub fn mam_sponge_hashn(
        sponge: *mut mam_sponge_t,
        n: usize,
        plaintext_blocks: *const trits_t,
        digest: trits_t,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mam_spongos_s {
    pub sponge: mam_sponge_t,
    pub pos: usize,
}
#[test]
fn bindgen_test_layout_mam_spongos_s() {
    assert_eq!(
        ::std::mem::size_of::<mam_spongos_s>(),
        744usize,
        concat!("Size of: ", stringify!(mam_spongos_s))
    );
    assert_eq!(
        ::std::mem::align_of::<mam_spongos_s>(),
        8usize,
        concat!("Alignment of ", stringify!(mam_spongos_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_spongos_s>())).sponge as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_spongos_s),
            "::",
            stringify!(sponge)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_spongos_s>())).pos as *const _ as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_spongos_s),
            "::",
            stringify!(pos)
        )
    );
}
pub type mam_spongos_t = mam_spongos_s;
extern "C" {
    pub fn mam_spongos_serialized_size(spongos: *const mam_spongos_t) -> usize;
}
extern "C" {
    pub fn mam_spongos_serialize(spongos: *const mam_spongos_t, trits: *mut trits_t);
}
extern "C" {
    pub fn mam_spongos_deserialize(trits: *mut trits_t, spongos: *mut mam_spongos_t) -> retcode_t;
}
extern "C" {
    #[doc = " Initializes a spongos state"]
    #[doc = ""]
    #[doc = " @param spongos A spongos interface"]
    pub fn mam_spongos_init(spongos: *mut mam_spongos_t);
}
extern "C" {
    #[doc = " Creates an equivalent spongos instance"]
    #[doc = ""]
    #[doc = " @param spongos A spongos interface"]
    #[doc = " @param fork The fork"]
    pub fn mam_mam_spongos_fork(spongos: *const mam_spongos_t, fork: *mut mam_spongos_t);
}
extern "C" {
    #[doc = " Commits changes in the rate part"]
    #[doc = ""]
    #[doc = " @param spongos A spongos interface"]
    pub fn mam_spongos_commit(spongos: *mut mam_spongos_t);
}
extern "C" {
    #[doc = " Processes input data"]
    #[doc = ""]
    #[doc = " @param spongos A spongos interface"]
    #[doc = " @param input Input data"]
    pub fn mam_spongos_absorb(spongos: *mut mam_spongos_t, input: trits_t);
}
extern "C" {
    #[doc = " Processes n inputs data"]
    #[doc = ""]
    #[doc = " @param spongos A spongos interface"]
    #[doc = " @param n Number of input data"]
    #[doc = " @param inputs Inputs data"]
    pub fn mam_spongos_absorbn(spongos: *mut mam_spongos_t, n: usize, inputs: *mut trits_t);
}
extern "C" {
    #[doc = " Generates output data"]
    #[doc = ""]
    #[doc = " @param spongos A spongos interface"]
    #[doc = " @param output Output data"]
    pub fn mam_spongos_squeeze(spongos: *mut mam_spongos_t, output: trits_t);
}
extern "C" {
    #[doc = " Generates output data and check for equality with given output"]
    #[doc = ""]
    #[doc = " @param spongos A spongos interface"]
    #[doc = " @param expected_output Expected output data"]
    pub fn mam_spongos_squeeze_eq(spongos: *mut mam_spongos_t, expected_output: trits_t) -> bool;
}
extern "C" {
    #[doc = " Hashes input data"]
    #[doc = ""]
    #[doc = " @param spongos A spongos interface"]
    #[doc = " @param input Input data"]
    #[doc = " @param output Output data"]
    pub fn mam_spongos_hash(spongos: *mut mam_spongos_t, input: trits_t, output: trits_t);
}
extern "C" {
    #[doc = " Hashes n input data"]
    #[doc = ""]
    #[doc = " @param spongos A spongos interface"]
    #[doc = " @param n Number of input data"]
    #[doc = " @param inputs Inputs data"]
    #[doc = " @param output Output data"]
    pub fn mam_spongos_hashn(
        spongos: *mut mam_spongos_t,
        n: usize,
        inputs: *mut trits_t,
        output: trits_t,
    );
}
extern "C" {
    #[doc = " Encrypts plaintext"]
    #[doc = ""]
    #[doc = " @param spongos A spongos interface"]
    #[doc = " @param plaintext Plaintext input"]
    #[doc = " @param ciphertext Ciphertext output"]
    pub fn mam_spongos_encr(spongos: *mut mam_spongos_t, plaintext: trits_t, ciphertext: trits_t);
}
extern "C" {
    #[doc = " Decrypts ciphertext"]
    #[doc = ""]
    #[doc = " @param spongos A spongos interface"]
    #[doc = " @param ciphertext Ciphertext input"]
    #[doc = " @param plaintext Plaintext output"]
    pub fn mam_spongos_decr(spongos: *mut mam_spongos_t, ciphertext: trits_t, plaintext: trits_t);
}
extern "C" {
    #[doc = " Copy spongos from src to dst"]
    #[doc = ""]
    #[doc = " @param src The source"]
    #[doc = " @param dst The destination"]
    pub fn mam_spongos_copy(src: *const mam_spongos_t, dst: *mut mam_spongos_t);
}
extern "C" {
    pub fn pb3_trits_take(b: *mut trits_t, n: usize) -> trits_t;
}
extern "C" {
    #[doc = " Protobuf3 primitive types"]
    #[doc = " null, tryte, size_t, trytes, tryte [n]"]
    pub fn pb3_sizeof_tryte() -> usize;
}
extern "C" {
    pub fn pb3_encode_tryte(tryte: tryte_t, buffer: *mut trits_t);
}
extern "C" {
    pub fn pb3_decode_tryte(tryte: *mut tryte_t, buffer: *mut trits_t) -> retcode_t;
}
extern "C" {
    pub fn pb3_sizeof_trint() -> usize;
}
extern "C" {
    pub fn pb3_encode_trint(trint: trint9_t, buffer: *mut trits_t);
}
extern "C" {
    pub fn pb3_decode_trint(trint: *mut trint9_t, buffer: *mut trits_t) -> retcode_t;
}
extern "C" {
    pub fn pb3_sizeof_longtrint() -> usize;
}
extern "C" {
    pub fn pb3_encode_longtrint(trint: trint18_t, buffer: *mut trits_t);
}
extern "C" {
    pub fn pb3_decode_longtrint(trint: *mut trint18_t, buffer: *mut trits_t) -> retcode_t;
}
extern "C" {
    pub fn pb3_sizeof_size_t(n: usize) -> usize;
}
extern "C" {
    pub fn pb3_encode_size_t(n: usize, buffer: *mut trits_t);
}
extern "C" {
    pub fn pb3_decode_size_t(n: *mut usize, buffer: *mut trits_t) -> retcode_t;
}
extern "C" {
    pub fn pb3_sizeof_ntrytes(n: usize) -> usize;
}
extern "C" {
    pub fn pb3_encode_ntrytes(ntrytes: trits_t, buffer: *mut trits_t);
}
extern "C" {
    pub fn pb3_decode_ntrytes(ntrytes: trits_t, buffer: *mut trits_t) -> retcode_t;
}
extern "C" {
    #[doc = " Protobuf3 spongos modifier handling"]
    pub fn pb3_wrap_absorb_tryte(spongos: *mut mam_spongos_t, buffer: *mut trits_t, tryte: tryte_t);
}
extern "C" {
    pub fn pb3_unwrap_absorb_tryte(
        spongos: *mut mam_spongos_t,
        buffer: *mut trits_t,
        tryte: *mut tryte_t,
    ) -> retcode_t;
}
extern "C" {
    pub fn pb3_wrap_absorb_trint(
        spongos: *mut mam_spongos_t,
        buffer: *mut trits_t,
        trint: trint9_t,
    );
}
extern "C" {
    pub fn pb3_unwrap_absorb_trint(
        spongos: *mut mam_spongos_t,
        buffer: *mut trits_t,
        trint: *mut trint9_t,
    ) -> retcode_t;
}
extern "C" {
    pub fn pb3_wrap_absorb_longtrint(
        spongos: *mut mam_spongos_t,
        buffer: *mut trits_t,
        trint: trint18_t,
    );
}
extern "C" {
    pub fn pb3_unwrap_absorb_longtrint(
        spongos: *mut mam_spongos_t,
        buffer: *mut trits_t,
        trint: *mut trint18_t,
    ) -> retcode_t;
}
extern "C" {
    pub fn pb3_wrap_absorb_size_t(spongos: *mut mam_spongos_t, buffer: *mut trits_t, t: usize);
}
extern "C" {
    pub fn pb3_unwrap_absorb_size_t(
        spongos: *mut mam_spongos_t,
        buffer: *mut trits_t,
        t: *mut usize,
    ) -> retcode_t;
}
extern "C" {
    pub fn pb3_wrap_absorb_ntrytes(
        spongos: *mut mam_spongos_t,
        buffer: *mut trits_t,
        trits: trits_t,
    );
}
extern "C" {
    pub fn pb3_unwrap_absorb_ntrytes(
        spongos: *mut mam_spongos_t,
        buffer: *mut trits_t,
        trits: trits_t,
    ) -> retcode_t;
}
extern "C" {
    pub fn pb3_wrap_crypt_ntrytes(
        spongos: *mut mam_spongos_t,
        buffer: *mut trits_t,
        trits: trits_t,
    );
}
extern "C" {
    pub fn pb3_unwrap_crypt_ntrytes(
        spongos: *mut mam_spongos_t,
        buffer: *mut trits_t,
        trits: trits_t,
    ) -> retcode_t;
}
extern "C" {
    pub fn pb3_wrap_squeeze_ntrytes(spongos: *mut mam_spongos_t, buffer: *mut trits_t, n: usize);
}
extern "C" {
    pub fn pb3_unwrap_squeeze_ntrytes(
        spongos: *mut mam_spongos_t,
        buffer: *mut trits_t,
        n: usize,
    ) -> retcode_t;
}
extern "C" {
    pub fn pb3_absorb_external_ntrytes(spongos: *mut mam_spongos_t, trits: trits_t);
}
extern "C" {
    pub fn pb3_squeeze_external_ntrytes(spongos: *mut mam_spongos_t, trits: trits_t);
}
extern "C" {
    pub fn memset_safe(
        dest: *mut ::std::os::raw::c_void,
        destsz: usize,
        ch: ::std::os::raw::c_int,
        count: usize,
    ) -> ::std::os::raw::c_int;
}
#[doc = " @brief PRNG AE destination tryte"]
pub const mam_prng_destination_tryte_e_MAM_PRNG_DST_SEC_KEY: mam_prng_destination_tryte_e = 0;
#[doc = " @brief PRNG WOTS destination tryte"]
pub const mam_prng_destination_tryte_e_MAM_PRNG_DST_WOTS_KEY: mam_prng_destination_tryte_e = 1;
#[doc = " @brief PRNG NTRU destination tryte"]
pub const mam_prng_destination_tryte_e_MAM_PRNG_DST_NTRU_KEY: mam_prng_destination_tryte_e = 2;
#[doc = " @brief Destination context encoded in one tryte"]
pub type mam_prng_destination_tryte_e = u32;
pub use self::mam_prng_destination_tryte_e as mam_prng_destination_tryte_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mam_prng_s {
    pub secret_key: [trit_t; 243usize],
}
#[test]
fn bindgen_test_layout_mam_prng_s() {
    assert_eq!(
        ::std::mem::size_of::<mam_prng_s>(),
        243usize,
        concat!("Size of: ", stringify!(mam_prng_s))
    );
    assert_eq!(
        ::std::mem::align_of::<mam_prng_s>(),
        1usize,
        concat!("Alignment of ", stringify!(mam_prng_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_prng_s>())).secret_key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_prng_s),
            "::",
            stringify!(secret_key)
        )
    );
}
pub type mam_prng_t = mam_prng_s;
extern "C" {
    #[doc = " @brief Initializes a PRNG with a secret key"]
    #[doc = ""]
    #[doc = " @param[out] prng The PRNG"]
    #[doc = " @param[in] secret_key The secret key"]
    #[doc = ""]
    #[doc = " @return a status code"]
    pub fn mam_prng_init(prng: *mut mam_prng_t, secret_key: trits_t) -> retcode_t;
}
extern "C" {
    #[doc = " @brief Generates pseudo random trits with three nonces"]
    #[doc = ""]
    #[doc = " @param[in] prng A PRNG"]
    #[doc = " @param[in] destination A destination tryte"]
    #[doc = " @param[in] nonce1 The first nonce"]
    #[doc = " @param[in] nonce2 The second nonce"]
    #[doc = " @param[in] nonce3 The third nonce"]
    #[doc = " @param[out] output The pseudo random trits"]
    #[doc = ""]
    #[doc = " @return a status code"]
    pub fn mam_prng_gen3(
        prng: *const mam_prng_t,
        destination: mam_prng_destination_tryte_t,
        nonce1: trits_t,
        nonce2: trits_t,
        nonce3: trits_t,
        output: trits_t,
    ) -> retcode_t;
}
extern "C" {
    #[doc = " @brief Serializes a PRNG into a trits buffer"]
    #[doc = ""]
    #[doc = " @param[in] prng The PRNG"]
    #[doc = " @param[out] buffer The trits buffer"]
    pub fn mam_prng_serialize_2(prng: *const mam_prng_t, buffer: *mut trits_t);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mam_wots_s {
    pub private_key: [trit_t; 13122usize],
}
#[test]
fn bindgen_test_layout_mam_wots_s() {
    assert_eq!(
        ::std::mem::size_of::<mam_wots_s>(),
        13122usize,
        concat!("Size of: ", stringify!(mam_wots_s))
    );
    assert_eq!(
        ::std::mem::align_of::<mam_wots_s>(),
        1usize,
        concat!("Alignment of ", stringify!(mam_wots_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_wots_s>())).private_key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_wots_s),
            "::",
            stringify!(private_key)
        )
    );
}
pub type mam_wots_t = mam_wots_s;
extern "C" {
    #[doc = " @brief Generates a WOTS public key associated with a WOTS private key"]
    #[doc = ""]
    #[doc = " The private key must have already been generated"]
    #[doc = ""]
    #[doc = " @param[in] wots The WOTS private key"]
    #[doc = " @param[out] public_key The WOTS public key"]
    #[doc = ""]
    #[doc = " @return a status code"]
    pub fn mam_wots_gen_pk(wots: *const mam_wots_t, public_key: trits_t) -> retcode_t;
}
extern "C" {
    #[doc = " @brief Generates a WOTS signature associated with a WOTS private key"]
    #[doc = ""]
    #[doc = " @param[in] wots The WOTS private key"]
    #[doc = " @param[in] hash A hash to be signed"]
    #[doc = " @param[out] signature The WOTS signature"]
    #[doc = ""]
    #[doc = " @return a status code"]
    pub fn mam_wots_sign(wots: *const mam_wots_t, hash: trits_t, signature: trits_t) -> retcode_t;
}
extern "C" {
    #[doc = " @brief Recovers a WOTS public key from a WOTS signature"]
    #[doc = ""]
    #[doc = " @param[in] hash A signed hash"]
    #[doc = " @param[in] signature The WOTS signature"]
    #[doc = " @param[out] public_key The WOTS public key"]
    #[doc = ""]
    #[doc = " @return a status code"]
    pub fn mam_wots_recover(hash: trits_t, signature: trits_t, public_key: trits_t) -> retcode_t;
}
#[doc = " \\brief Leaves have height `0`, root has height `D`; `0 <= d < D`; `D <="]
#[doc = " 20`."]
pub type mss_mt_height_t = trint6_t;
#[doc = " \\brief Index (skn) of leaf/node on the level of height `d`; 0 <= i <"]
#[doc = " 2^(D-d)."]
pub type mss_mt_idx_t = trint18_t;
#[doc = " \\brief MSS interface used to generate public key and sign."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mss_s {
    #[doc = "< Merkle tree height."]
    pub height: mss_mt_height_t,
    #[doc = "< Current WOTS private key number."]
    pub skn: mss_mt_idx_t,
    #[doc = "< PRNG interface used to generate WOTS private keys."]
    pub prng: *mut mam_prng_t,
    #[doc = "< Buffer storing complete Merkle-tree."]
    pub mt: *mut trit_t,
    #[doc = "< Nonce = `N1`||`N2`, stored pointers only, NOT copies."]
    pub nonce1: trits_t,
    #[doc = "< Nonce = `N1`||`N2`, stored pointers only, NOT copies."]
    pub nonce2: trits_t,
    pub root: [trit_t; 243usize],
}
#[test]
fn bindgen_test_layout_mss_s() {
    assert_eq!(
        ::std::mem::size_of::<mss_s>(),
        320usize,
        concat!("Size of: ", stringify!(mss_s))
    );
    assert_eq!(
        ::std::mem::align_of::<mss_s>(),
        8usize,
        concat!("Alignment of ", stringify!(mss_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mss_s>())).height as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mss_s),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mss_s>())).skn as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mss_s),
            "::",
            stringify!(skn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mss_s>())).prng as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mss_s),
            "::",
            stringify!(prng)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mss_s>())).mt as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(mss_s), "::", stringify!(mt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mss_s>())).nonce1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mss_s),
            "::",
            stringify!(nonce1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mss_s>())).nonce2 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mss_s),
            "::",
            stringify!(nonce2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mss_s>())).root as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mss_s),
            "::",
            stringify!(root)
        )
    );
}
pub type mam_mss_t = mss_s;
extern "C" {
    #[doc = " MSS interface initialization"]
    #[doc = ""]
    #[doc = " @param mss [in] MSS interface"]
    #[doc = " @param prng [in] PRNG interface"]
    #[doc = " @param sponge [in] Sponge interface"]
    #[doc = " @param height [in] Merkle-tree height"]
    #[doc = " @param nonce1 [in] first nonce"]
    #[doc = " @param nonce2 [in] second nonce"]
    #[doc = ""]
    #[doc = " @return void"]
    pub fn mam_mss_init(
        mss: *mut mam_mss_t,
        prng: *mut mam_prng_t,
        height: mss_mt_height_t,
        nonce1: trits_t,
        nonce2: trits_t,
    );
}
extern "C" {
    #[doc = " Generate MSS keys, stores current and next auth_path"]
    #[doc = ""]
    #[doc = " @param mss [in] MSS interface"]
    #[doc = " @return void"]
    pub fn mam_mss_gen(mss: *mut mam_mss_t);
}
extern "C" {
    #[doc = " Encodes mss height and current sk index"]
    #[doc = ""]
    #[doc = " @param mss [in] MSS interface"]
    #[doc = " @param skn [out] encoded height and current private key number"]
    #[doc = " @return void"]
    pub fn mam_mss_skn(mss: *const mam_mss_t, skn: trits_t);
}
extern "C" {
    #[doc = " Gets the authentication path"]
    #[doc = ""]
    #[doc = " @param mss [in] MSS interface"]
    #[doc = " @param skn [in] number of WOTS instance (current pk index), in traversal mode"]
    #[doc = " this parameter is not used because current authentication path is always"]
    #[doc = " updated"]
    #[doc = " @param path [out] authentication path"]
    #[doc = ""]
    #[doc = " @return void"]
    pub fn mam_mss_auth_path(mss: *mut mam_mss_t, skn: mss_mt_idx_t, path: trits_t);
}
extern "C" {
    #[doc = " Signs a hash"]
    #[doc = ""]
    #[doc = " @param mss [in] MSS interface"]
    #[doc = " @param hash [in] the hash to sign on"]
    #[doc = " @param sig [out] the signature"]
    #[doc = ""]
    #[doc = " @return retcode"]
    pub fn mam_mss_sign(mss: *mut mam_mss_t, hash: trits_t, sig: trits_t) -> retcode_t;
}
extern "C" {
    #[doc = " Signs a hash and advances skn"]
    #[doc = ""]
    #[doc = " @param mss [in] MSS interface"]
    #[doc = " @param hash [in] the hash to sign on"]
    #[doc = " @param sig [out] the signature"]
    #[doc = ""]
    #[doc = " @return retcode"]
    pub fn mam_mss_sign_and_next(mss: *mut mam_mss_t, hash: trits_t, sig: trits_t) -> retcode_t;
}
extern "C" {
    #[doc = " Advances skn"]
    #[doc = ""]
    #[doc = " @param mss [in] MSS interface"]
    #[doc = ""]
    #[doc = " @return True if can produce next signature"]
    pub fn mam_mss_next(mss: *mut mam_mss_t) -> bool;
}
extern "C" {
    #[doc = " Returns the number of remaining secret keys (unused leaves on merkle tree)"]
    #[doc = ""]
    #[doc = " @param mss [in] MSS interface"]
    #[doc = ""]
    #[doc = " @return The number of remaining signatures"]
    pub fn mam_mss_num_remaining_sks(mss: *const mam_mss_t) -> usize;
}
extern "C" {
    #[doc = " Verifies MSS signature."]
    #[doc = ""]
    #[doc = " @param mt_spongos [in] Spongos interface to hash Merkle Tree"]
    #[doc = " @param hash [in] signed hash value"]
    #[doc = " @param sig [in] signature"]
    #[doc = " @param [in] public key (Merkle-tree root)"]
    #[doc = ""]
    #[doc = " @return bool True is the signature is correct, False otherwise"]
    pub fn mam_mss_verify(
        mt_spongos: *mut mam_spongos_t,
        hash: trits_t,
        sig: trits_t,
        pk: trits_t,
    ) -> bool;
}
extern "C" {
    #[doc = " Allocate memory for internal Merkle tree structure."]
    #[doc = ""]
    #[doc = " \\note `mss_init` must still be called afterwards."]
    #[doc = " \\note In case of error `mss_destroy` must be called."]
    #[doc = " \\note Non Merkle tree related objects (WOTS, PRNG, Spongos interfaces)"]
    #[doc = "     must be allocated separately."]
    #[doc = ""]
    #[doc = " @param mss [out] MSS interface"]
    #[doc = " @param height [in] the tree's height"]
    #[doc = ""]
    #[doc = " @return void"]
    pub fn mam_mss_create(mss: *mut mam_mss_t, height: mss_mt_height_t) -> retcode_t;
}
extern "C" {
    #[doc = " Deallocate memory for internal Merkle tree structure."]
    #[doc = " \\note Pointer `m` must be freed afterwards."]
    #[doc = ""]
    #[doc = " @param mss [out] MSS interface"]
    #[doc = ""]
    #[doc = " @return void"]
    pub fn mam_mss_destroy(mss: *mut mam_mss_t);
}
extern "C" {
    #[doc = " returns The size of a serialized Merkle tree."]
    #[doc = ""]
    #[doc = " @param mss [in] MSS interface"]
    #[doc = ""]
    #[doc = " @return size_t The size for stored MT"]
    pub fn mam_mss_serialized_size(mss: *const mam_mss_t) -> usize;
}
extern "C" {
    #[doc = " Serialize Merkle tree."]
    #[doc = ""]
    #[doc = " @param mss [in] MSS interface"]
    #[doc = " @param buffer [out] The serialized MT buffer"]
    #[doc = ""]
    #[doc = " @return void"]
    pub fn mam_mss_serialize(mss: *const mam_mss_t, buffer: trits_t);
}
extern "C" {
    #[doc = " Deerialize Merkle tree."]
    #[doc = ""]
    #[doc = " @param mss [out] MSS interface"]
    #[doc = " @param buffer [in] The serialized MT buffer"]
    #[doc = ""]
    #[doc = " @return void"]
    pub fn mam_mss_deserialize(buffer: *mut trits_t, mss: *mut mam_mss_t) -> retcode_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mam_endpoint_s {
    pub name: trits_t,
    pub mss: mam_mss_t,
}
#[test]
fn bindgen_test_layout_mam_endpoint_s() {
    assert_eq!(
        ::std::mem::size_of::<mam_endpoint_s>(),
        344usize,
        concat!("Size of: ", stringify!(mam_endpoint_s))
    );
    assert_eq!(
        ::std::mem::align_of::<mam_endpoint_s>(),
        8usize,
        concat!("Alignment of ", stringify!(mam_endpoint_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_endpoint_s>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_endpoint_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_endpoint_s>())).mss as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_endpoint_s),
            "::",
            stringify!(mss)
        )
    );
}
pub type mam_endpoint_t = mam_endpoint_s;
pub type mam_endpoint_t_set_entry_t = mam_endpoint_t_set_entry_s;
pub type mam_endpoint_t_set_t = *mut mam_endpoint_t_set_entry_t;
extern "C" {
    #[doc = " Gets an endpoint's id"]
    #[doc = ""]
    #[doc = " @param endpoint The endpoint"]
    #[doc = ""]
    #[doc = " @return the endpoint's id"]
    pub fn mam_endpoint_id(endpoint: *const mam_endpoint_t) -> trits_t;
}
extern "C" {
    #[doc = " Gets an endpoint channel's name"]
    #[doc = ""]
    #[doc = " @param endpoint The endpoint"]
    #[doc = ""]
    #[doc = " @return the endpoint channel's name"]
    pub fn mam_endpoint_channel_name(endpoint: *const mam_endpoint_t) -> trits_t;
}
extern "C" {
    #[doc = " Gets an endpoint's name"]
    #[doc = ""]
    #[doc = " @param endpoint The endpoint"]
    #[doc = ""]
    #[doc = " @return the endpoint's name"]
    pub fn mam_endpoint_name(endpoint: *const mam_endpoint_t) -> trits_t;
}
extern "C" {
    #[doc = " Allocates memory for internal objects and generates MSS public key"]
    #[doc = ""]
    #[doc = " @param allocator A MAM allocator"]
    #[doc = " @param prng A shared PRNG interface used to generate WOTS private keys"]
    #[doc = " @param height MSS MT height"]
    #[doc = " @param channel_name The channel name"]
    #[doc = " @param endpoint_name The endpoint name"]
    #[doc = " @param endpoint The endpoint"]
    #[doc = ""]
    #[doc = " @return a status code"]
    pub fn mam_endpoint_create(
        prng: *mut mam_prng_t,
        height: mss_mt_height_t,
        channel_name: trits_t,
        endpoint_name: trits_t,
        endpoint: *mut mam_endpoint_t,
    ) -> retcode_t;
}
extern "C" {
    #[doc = " Returns the number of remaining secret keys (unused leaves on merkle tree)"]
    #[doc = " @param endpoint The endpoint"]
    #[doc = ""]
    #[doc = " @return number of remaining secret keys"]
    pub fn mam_endpoint_num_remaining_sks(endpoint: *const mam_endpoint_t) -> usize;
}
extern "C" {
    #[doc = " Deallocates memory for internal objects"]
    #[doc = ""]
    #[doc = " @param allocator A MAM allocator"]
    #[doc = " @param endpoint The endpoint"]
    pub fn mam_endpoint_destroy(endpoint: *mut mam_endpoint_t);
}
extern "C" {
    pub fn mam_endpoints_destroy(endpoints: *mut mam_endpoint_t_set_t) -> retcode_t;
}
extern "C" {
    pub fn mam_endpoint_serialized_size(endpoint: *const mam_endpoint_t) -> usize;
}
extern "C" {
    pub fn mam_endpoint_serialize(endpoint: *const mam_endpoint_t, buffer: *mut trits_t);
}
extern "C" {
    pub fn mam_endpoint_deserialize(
        buffer: *mut trits_t,
        channel_name: trits_t,
        prng: *mut mam_prng_t,
        endpoint: *mut mam_endpoint_t,
    ) -> retcode_t;
}
extern "C" {
    pub fn mam_endpoints_serialized_size(endpoints: mam_endpoint_t_set_t) -> usize;
}
extern "C" {
    pub fn mam_endpoints_serialize(endpoints: mam_endpoint_t_set_t, buffer: *mut trits_t);
}
extern "C" {
    pub fn mam_endpoints_deserialize(
        buffer: *mut trits_t,
        channel_name: trits_t,
        prng: *mut mam_prng_t,
        endpoints: *mut mam_endpoint_t_set_t,
    ) -> retcode_t;
}
extern "C" {
    pub fn trit_sum(a: trit_t, b: trit_t) -> trit_t;
}
extern "C" {
    pub fn add_assign(t: *mut trit_t, s: usize, v: i64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_trits(lh: *const trit_t, rh: *mut trit_t, len: usize);
}
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = u32;
pub type id_t = __darwin_id_t;
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_thread_state {
    pub __eax: ::std::os::raw::c_uint,
    pub __ebx: ::std::os::raw::c_uint,
    pub __ecx: ::std::os::raw::c_uint,
    pub __edx: ::std::os::raw::c_uint,
    pub __edi: ::std::os::raw::c_uint,
    pub __esi: ::std::os::raw::c_uint,
    pub __ebp: ::std::os::raw::c_uint,
    pub __esp: ::std::os::raw::c_uint,
    pub __ss: ::std::os::raw::c_uint,
    pub __eflags: ::std::os::raw::c_uint,
    pub __eip: ::std::os::raw::c_uint,
    pub __cs: ::std::os::raw::c_uint,
    pub __ds: ::std::os::raw::c_uint,
    pub __es: ::std::os::raw::c_uint,
    pub __fs: ::std::os::raw::c_uint,
    pub __gs: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_i386_thread_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_thread_state>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_i386_thread_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_thread_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_thread_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__eax as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__eax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ebx as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ebx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ecx as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ecx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__edx as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__edx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__edi as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__edi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__esi as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__esi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ebp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ebp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__esp as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__esp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ss as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__eflags as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__eflags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__eip as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__eip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__cs as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__cs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ds as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__es as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__fs as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__fs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__gs as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__gs)
        )
    );
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_fp_control {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize], u8>,
}
#[test]
fn bindgen_test_layout___darwin_fp_control() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_fp_control>(),
        2usize,
        concat!("Size of: ", stringify!(__darwin_fp_control))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_fp_control>(),
        2usize,
        concat!("Alignment of ", stringify!(__darwin_fp_control))
    );
}
impl __darwin_fp_control {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __pc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___pc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn __rc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___rc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __pc: ::std::os::raw::c_ushort,
        __rc: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let __pc: u16 = unsafe { ::std::mem::transmute(__pc) };
            __pc as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let __rc: u16 = unsafe { ::std::mem::transmute(__rc) };
            __rc as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_control_t = __darwin_fp_control;
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_fp_status {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize], u8>,
}
#[test]
fn bindgen_test_layout___darwin_fp_status() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_fp_status>(),
        2usize,
        concat!("Size of: ", stringify!(__darwin_fp_status))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_fp_status>(),
        2usize,
        concat!("Alignment of ", stringify!(__darwin_fp_status))
    );
}
impl __darwin_fp_status {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __stkflt(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___stkflt(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __errsumm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___errsumm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c0(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c0(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c1(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c1(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c2(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c2(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __tos(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set___tos(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn __c3(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c3(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __busy(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___busy(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __stkflt: ::std::os::raw::c_ushort,
        __errsumm: ::std::os::raw::c_ushort,
        __c0: ::std::os::raw::c_ushort,
        __c1: ::std::os::raw::c_ushort,
        __c2: ::std::os::raw::c_ushort,
        __tos: ::std::os::raw::c_ushort,
        __c3: ::std::os::raw::c_ushort,
        __busy: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let __stkflt: u16 = unsafe { ::std::mem::transmute(__stkflt) };
            __stkflt as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let __errsumm: u16 = unsafe { ::std::mem::transmute(__errsumm) };
            __errsumm as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let __c0: u16 = unsafe { ::std::mem::transmute(__c0) };
            __c0 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let __c1: u16 = unsafe { ::std::mem::transmute(__c1) };
            __c1 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let __c2: u16 = unsafe { ::std::mem::transmute(__c2) };
            __c2 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 3u8, {
            let __tos: u16 = unsafe { ::std::mem::transmute(__tos) };
            __tos as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let __c3: u16 = unsafe { ::std::mem::transmute(__c3) };
            __c3 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let __busy: u16 = unsafe { ::std::mem::transmute(__busy) };
            __busy as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_status_t = __darwin_fp_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mmst_reg {
    pub __mmst_reg: [::std::os::raw::c_char; 10usize],
    pub __mmst_rsrv: [::std::os::raw::c_char; 6usize],
}
#[test]
fn bindgen_test_layout___darwin_mmst_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mmst_reg>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_mmst_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mmst_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_mmst_reg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mmst_reg>())).__mmst_reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mmst_reg),
            "::",
            stringify!(__mmst_reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mmst_reg>())).__mmst_rsrv as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mmst_reg),
            "::",
            stringify!(__mmst_rsrv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_xmm_reg {
    pub __xmm_reg: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_xmm_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_xmm_reg>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_xmm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_xmm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_xmm_reg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_xmm_reg>())).__xmm_reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_xmm_reg),
            "::",
            stringify!(__xmm_reg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ymm_reg {
    pub __ymm_reg: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout___darwin_ymm_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_ymm_reg>(),
        32usize,
        concat!("Size of: ", stringify!(__darwin_ymm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_ymm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_ymm_reg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ymm_reg>())).__ymm_reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ymm_reg),
            "::",
            stringify!(__ymm_reg)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_zmm_reg {
    pub __zmm_reg: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout___darwin_zmm_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_zmm_reg>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_zmm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_zmm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_zmm_reg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_zmm_reg>())).__zmm_reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_zmm_reg),
            "::",
            stringify!(__zmm_reg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_opmask_reg {
    pub __opmask_reg: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout___darwin_opmask_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_opmask_reg>(),
        8usize,
        concat!("Size of: ", stringify!(__darwin_opmask_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_opmask_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_opmask_reg))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_opmask_reg>())).__opmask_reg as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_opmask_reg),
            "::",
            stringify!(__opmask_reg)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_i386_float_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_i386_float_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_float_state>(),
        524usize,
        concat!("Size of: ", stringify!(__darwin_i386_float_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_float_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_float_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_reserved as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_rsrv4 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_i386_avx_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_i386_avx_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_avx_state>(),
        716usize,
        concat!("Size of: ", stringify!(__darwin_i386_avx_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_avx_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_avx_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_reserved as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_mxcsrmask as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_rsrv4 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_reserved1 as *const _ as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__avx_reserved1 as *const _ as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh0 as *const _ as usize
        },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh1 as *const _ as usize
        },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh2 as *const _ as usize
        },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh3 as *const _ as usize
        },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh4 as *const _ as usize
        },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh5 as *const _ as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh6 as *const _ as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh7 as *const _ as usize
        },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_i386_avx512_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
}
#[test]
fn bindgen_test_layout___darwin_i386_avx512_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_avx512_state>(),
        1036usize,
        concat!("Size of: ", stringify!(__darwin_i386_avx512_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_avx512_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_avx512_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_reserved as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_rsrv4 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__avx_reserved1 as *const _
                as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh0 as *const _ as usize
        },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh1 as *const _ as usize
        },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh2 as *const _ as usize
        },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh3 as *const _ as usize
        },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh4 as *const _ as usize
        },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh5 as *const _ as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh6 as *const _ as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh7 as *const _ as usize
        },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k0 as *const _ as usize
        },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k1 as *const _ as usize
        },
        724usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k2 as *const _ as usize
        },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k3 as *const _ as usize
        },
        740usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k4 as *const _ as usize
        },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k5 as *const _ as usize
        },
        756usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k6 as *const _ as usize
        },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k7 as *const _ as usize
        },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh0 as *const _ as usize
        },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh1 as *const _ as usize
        },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh2 as *const _ as usize
        },
        844usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh3 as *const _ as usize
        },
        876usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh4 as *const _ as usize
        },
        908usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh5 as *const _ as usize
        },
        940usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh6 as *const _ as usize
        },
        972usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh7 as *const _ as usize
        },
        1004usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh7)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_i386_exception_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_exception_state>(),
        12usize,
        concat!("Size of: ", stringify!(__darwin_i386_exception_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_exception_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_exception_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_exception_state>())).__trapno as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__trapno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_exception_state>())).__cpu as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__cpu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_exception_state>())).__err as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__err)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_exception_state>())).__faultvaddr as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__faultvaddr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_debug_state32 {
    pub __dr0: ::std::os::raw::c_uint,
    pub __dr1: ::std::os::raw::c_uint,
    pub __dr2: ::std::os::raw::c_uint,
    pub __dr3: ::std::os::raw::c_uint,
    pub __dr4: ::std::os::raw::c_uint,
    pub __dr5: ::std::os::raw::c_uint,
    pub __dr6: ::std::os::raw::c_uint,
    pub __dr7: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_debug_state32>(),
        32usize,
        concat!("Size of: ", stringify!(__darwin_x86_debug_state32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_debug_state32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_debug_state32))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr0 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr1 as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr2 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr3 as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr4 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr5 as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr6 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr7 as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr7)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_thread_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_thread_state64>(),
        168usize,
        concat!("Size of: ", stringify!(__darwin_x86_thread_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_thread_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_thread_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rax as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rbx as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rbx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rcx as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rcx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rdx as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rdx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rdi as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rdi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rsi as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rsi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rbp as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rbp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rsp as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rsp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r8 as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r9 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r10 as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r11 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r12 as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r13 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r14 as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r15 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rip as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rflags as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rflags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__cs as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__fs as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__fs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__gs as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__gs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_thread_full_state64 {
    pub ss64: __darwin_x86_thread_state64,
    pub __ds: __uint64_t,
    pub __es: __uint64_t,
    pub __ss: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_thread_full_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_thread_full_state64>(),
        192usize,
        concat!("Size of: ", stringify!(__darwin_x86_thread_full_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_thread_full_state64>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__darwin_x86_thread_full_state64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_full_state64>())).ss64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(ss64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_full_state64>())).__ds as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_full_state64>())).__es as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_full_state64>())).__ss as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__ss)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_x86_float_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_x86_float_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_float_state64>(),
        524usize,
        concat!("Size of: ", stringify!(__darwin_x86_float_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_float_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_float_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_reserved as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm8 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm9 as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm10 as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm11 as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm12 as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm13 as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm14 as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm15 as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_rsrv4 as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_x86_avx_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_x86_avx_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_avx_state64>(),
        844usize,
        concat!("Size of: ", stringify!(__darwin_x86_avx_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_avx_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_avx_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_reserved as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm8 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm9 as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm10 as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm11 as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm12 as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm13 as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm14 as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm15 as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_rsrv4 as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__avx_reserved1 as *const _
                as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh0 as *const _ as usize
        },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh1 as *const _ as usize
        },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh2 as *const _ as usize
        },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh3 as *const _ as usize
        },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh4 as *const _ as usize
        },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh5 as *const _ as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh6 as *const _ as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh7 as *const _ as usize
        },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh8 as *const _ as usize
        },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh9 as *const _ as usize
        },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh10 as *const _ as usize
        },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh11 as *const _ as usize
        },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh12 as *const _ as usize
        },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh13 as *const _ as usize
        },
        796usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh14 as *const _ as usize
        },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh15 as *const _ as usize
        },
        828usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh15)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_x86_avx512_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
    pub __fpu_zmmh8: __darwin_ymm_reg,
    pub __fpu_zmmh9: __darwin_ymm_reg,
    pub __fpu_zmmh10: __darwin_ymm_reg,
    pub __fpu_zmmh11: __darwin_ymm_reg,
    pub __fpu_zmmh12: __darwin_ymm_reg,
    pub __fpu_zmmh13: __darwin_ymm_reg,
    pub __fpu_zmmh14: __darwin_ymm_reg,
    pub __fpu_zmmh15: __darwin_ymm_reg,
    pub __fpu_zmm16: __darwin_zmm_reg,
    pub __fpu_zmm17: __darwin_zmm_reg,
    pub __fpu_zmm18: __darwin_zmm_reg,
    pub __fpu_zmm19: __darwin_zmm_reg,
    pub __fpu_zmm20: __darwin_zmm_reg,
    pub __fpu_zmm21: __darwin_zmm_reg,
    pub __fpu_zmm22: __darwin_zmm_reg,
    pub __fpu_zmm23: __darwin_zmm_reg,
    pub __fpu_zmm24: __darwin_zmm_reg,
    pub __fpu_zmm25: __darwin_zmm_reg,
    pub __fpu_zmm26: __darwin_zmm_reg,
    pub __fpu_zmm27: __darwin_zmm_reg,
    pub __fpu_zmm28: __darwin_zmm_reg,
    pub __fpu_zmm29: __darwin_zmm_reg,
    pub __fpu_zmm30: __darwin_zmm_reg,
    pub __fpu_zmm31: __darwin_zmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_x86_avx512_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_avx512_state64>(),
        2444usize,
        concat!("Size of: ", stringify!(__darwin_x86_avx512_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_avx512_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_avx512_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_reserved as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm8 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm9 as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm10 as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm11 as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm12 as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm13 as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm14 as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm15 as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_rsrv4 as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__avx_reserved1 as *const _
                as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh0 as *const _ as usize
        },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh1 as *const _ as usize
        },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh2 as *const _ as usize
        },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh3 as *const _ as usize
        },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh4 as *const _ as usize
        },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh5 as *const _ as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh6 as *const _ as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh7 as *const _ as usize
        },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh8 as *const _ as usize
        },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh9 as *const _ as usize
        },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh10 as *const _
                as usize
        },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh11 as *const _
                as usize
        },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh12 as *const _
                as usize
        },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh13 as *const _
                as usize
        },
        796usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh14 as *const _
                as usize
        },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh15 as *const _
                as usize
        },
        828usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k0 as *const _ as usize
        },
        844usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k1 as *const _ as usize
        },
        852usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k2 as *const _ as usize
        },
        860usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k3 as *const _ as usize
        },
        868usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k4 as *const _ as usize
        },
        876usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k5 as *const _ as usize
        },
        884usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k6 as *const _ as usize
        },
        892usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k7 as *const _ as usize
        },
        900usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh0 as *const _ as usize
        },
        908usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh1 as *const _ as usize
        },
        940usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh2 as *const _ as usize
        },
        972usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh3 as *const _ as usize
        },
        1004usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh4 as *const _ as usize
        },
        1036usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh5 as *const _ as usize
        },
        1068usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh6 as *const _ as usize
        },
        1100usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh7 as *const _ as usize
        },
        1132usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh8 as *const _ as usize
        },
        1164usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh9 as *const _ as usize
        },
        1196usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh10 as *const _
                as usize
        },
        1228usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh11 as *const _
                as usize
        },
        1260usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh12 as *const _
                as usize
        },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh13 as *const _
                as usize
        },
        1324usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh14 as *const _
                as usize
        },
        1356usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh15 as *const _
                as usize
        },
        1388usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm16 as *const _ as usize
        },
        1420usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm17 as *const _ as usize
        },
        1484usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm17)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm18 as *const _ as usize
        },
        1548usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm18)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm19 as *const _ as usize
        },
        1612usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm19)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm20 as *const _ as usize
        },
        1676usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm20)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm21 as *const _ as usize
        },
        1740usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm21)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm22 as *const _ as usize
        },
        1804usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm22)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm23 as *const _ as usize
        },
        1868usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm23)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm24 as *const _ as usize
        },
        1932usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm24)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm25 as *const _ as usize
        },
        1996usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm25)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm26 as *const _ as usize
        },
        2060usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm26)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm27 as *const _ as usize
        },
        2124usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm27)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm28 as *const _ as usize
        },
        2188usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm28)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm29 as *const _ as usize
        },
        2252usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm29)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm30 as *const _ as usize
        },
        2316usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm30)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm31 as *const _ as usize
        },
        2380usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm31)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_exception_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_exception_state64>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_x86_exception_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_exception_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_exception_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_exception_state64>())).__trapno as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__trapno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_exception_state64>())).__cpu as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__cpu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_exception_state64>())).__err as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__err)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_exception_state64>())).__faultvaddr as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__faultvaddr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_debug_state64>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_x86_debug_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_debug_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_debug_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr0 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr1 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr3 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr4 as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr5 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr6 as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr7 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr7)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_x86_cpmu_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_cpmu_state64>(),
        128usize,
        concat!("Size of: ", stringify!(__darwin_x86_cpmu_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_cpmu_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_cpmu_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_cpmu_state64>())).__ctrs as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_cpmu_state64),
            "::",
            stringify!(__ctrs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_float_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext32>(),
        600usize,
        concat!("Size of: ", stringify!(__darwin_mcontext32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext32>())).__es as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext32>())).__ss as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext32>())).__fs as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_mcontext_avx32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx32>(),
        792usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx32>())).__es as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx32),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx32>())).__ss as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx32),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx32>())).__fs as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx32),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_mcontext_avx512_32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx512_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx512_32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx512_32>(),
        1112usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx512_32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx512_32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx512_32))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_32>())).__es as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_32),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_32>())).__ss as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_32),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_32>())).__fs as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_32),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_float_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext64>(),
        712usize,
        concat!("Size of: ", stringify!(__darwin_mcontext64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext64>())).__es as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext64>())).__ss as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext64>())).__fs as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_mcontext_avx64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx64>(),
        1032usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx64>())).__es as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx64>())).__ss as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx64>())).__fs as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_mcontext_avx512_64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx512_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx512_64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx512_64>(),
        2632usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx512_64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx512_64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx512_64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_64>())).__es as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_64>())).__ss as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_64>())).__fs as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64),
            "::",
            stringify!(__fs)
        )
    );
}
pub type mcontext_t = *mut __darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_sigaltstack() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_sigaltstack>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_sigaltstack))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_sigaltstack>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_sigaltstack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_sigaltstack>())).ss_sp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_sigaltstack>())).ss_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_sigaltstack>())).ss_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_flags)
        )
    );
}
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
#[test]
fn bindgen_test_layout___darwin_ucontext() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_ucontext>(),
        56usize,
        concat!("Size of: ", stringify!(__darwin_ucontext))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_ucontext>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_ucontext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_onstack as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_onstack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_sigmask as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_sigmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_stack as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_link as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_mcsize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_mcsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_mcontext as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_mcontext)
        )
    );
}
pub type ucontext_t = __darwin_ucontext;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_sigval() {
    assert_eq!(
        ::std::mem::size_of::<sigval>(),
        8usize,
        concat!("Size of: ", stringify!(sigval))
    );
    assert_eq!(
        ::std::mem::align_of::<sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(sigval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigval>())).sival_int as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigval>())).sival_ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_ptr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent() {
    assert_eq!(
        ::std::mem::size_of::<sigevent>(),
        32usize,
        concat!("Size of: ", stringify!(sigevent))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_notify as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_signo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_signo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_notify_function as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent>())).sigev_notify_attributes as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify_attributes)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
#[test]
fn bindgen_test_layout___siginfo() {
    assert_eq!(
        ::std::mem::size_of::<__siginfo>(),
        104usize,
        concat!("Size of: ", stringify!(__siginfo))
    );
    assert_eq!(
        ::std::mem::align_of::<__siginfo>(),
        8usize,
        concat!("Alignment of ", stringify!(__siginfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_signo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_signo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_errno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_errno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_code as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_pid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_uid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_status as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_addr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_value as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_band as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_band)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).__pad as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(__pad)
        )
    );
}
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout___sigaction_u() {
    assert_eq!(
        ::std::mem::size_of::<__sigaction_u>(),
        8usize,
        concat!("Size of: ", stringify!(__sigaction_u))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigaction_u>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigaction_u))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction_u>())).__sa_handler as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction_u),
            "::",
            stringify!(__sa_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction_u>())).__sa_sigaction as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction_u),
            "::",
            stringify!(__sa_sigaction)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut siginfo_t,
            arg5: *mut ::std::os::raw::c_void,
        ),
    >,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sigaction() {
    assert_eq!(
        ::std::mem::size_of::<__sigaction>(),
        24usize,
        concat!("Size of: ", stringify!(__sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigaction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction>())).__sigaction_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(__sigaction_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction>())).sa_tramp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_tramp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction>())).sa_mask as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction>())).sa_flags as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigaction() {
    assert_eq!(
        ::std::mem::size_of::<sigaction>(),
        16usize,
        concat!("Size of: ", stringify!(sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).__sigaction_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(__sigaction_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).sa_mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).sa_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
}
pub type sig_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigvec() {
    assert_eq!(
        ::std::mem::size_of::<sigvec>(),
        16usize,
        concat!("Size of: ", stringify!(sigvec))
    );
    assert_eq!(
        ::std::mem::align_of::<sigvec>(),
        8usize,
        concat!("Alignment of ", stringify!(sigvec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigvec>())).sv_handler as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigvec>())).sv_mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigvec>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    assert_eq!(
        ::std::mem::size_of::<sigstack>(),
        16usize,
        concat!("Size of: ", stringify!(sigstack))
    );
    assert_eq!(
        ::std::mem::align_of::<sigstack>(),
        8usize,
        concat!("Alignment of ", stringify!(sigstack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigstack>())).ss_sp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigstack>())).ss_onstack as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_onstack)
        )
    );
}
extern "C" {
    pub fn signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
}
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_rusage() {
    assert_eq!(
        ::std::mem::size_of::<rusage>(),
        144usize,
        concat!("Size of: ", stringify!(rusage))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_utime as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_utime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_stime as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_stime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_maxrss as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_maxrss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_ixrss as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_ixrss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_idrss as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_idrss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_isrss as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_isrss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_minflt as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_minflt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_majflt as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_majflt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_nswap as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nswap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_inblock as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_inblock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_oublock as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_oublock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_msgsnd as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_msgsnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_msgrcv as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_msgrcv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_nsignals as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nsignals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_nvcsw as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nvcsw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_nivcsw as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nivcsw)
        )
    );
}
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v0 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v0() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v0>(),
        96usize,
        concat!("Size of: ", stringify!(rusage_info_v0))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v0>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v0))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v1 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v1() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v1>(),
        144usize,
        concat!("Size of: ", stringify!(rusage_info_v1))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v1>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_user_time as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_system_time as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_pkg_idle_wkups as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_interrupt_wkups as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_pageins as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_elapsed_abstime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v2 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v2() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v2>(),
        160usize,
        concat!("Size of: ", stringify!(rusage_info_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v2>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_user_time as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_system_time as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_pkg_idle_wkups as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_interrupt_wkups as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_pageins as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_elapsed_abstime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_diskio_bytesread as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_diskio_byteswritten as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v3 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v3() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v3>(),
        232usize,
        concat!("Size of: ", stringify!(rusage_info_v3))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v3>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_user_time as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_system_time as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_pkg_idle_wkups as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_interrupt_wkups as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_pageins as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_elapsed_abstime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_diskio_bytesread as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_diskio_byteswritten as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_default as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_maintenance as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_background as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_utility as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_legacy as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_user_initiated as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_user_interactive as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_billed_system_time as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_serviced_system_time as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v4 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_unused: [u64; 1usize],
}
#[test]
fn bindgen_test_layout_rusage_info_v4() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v4>(),
        296usize,
        concat!("Size of: ", stringify!(rusage_info_v4))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v4>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_user_time as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_system_time as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_pkg_idle_wkups as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_interrupt_wkups as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_pageins as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_elapsed_abstime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_diskio_bytesread as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_diskio_byteswritten as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_default as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_maintenance as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_background as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_utility as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_legacy as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_user_initiated as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_user_interactive as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_billed_system_time as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_serviced_system_time as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_logical_writes as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_logical_writes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_lifetime_max_phys_footprint as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_lifetime_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_instructions as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_instructions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_cycles as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cycles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_billed_energy as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_billed_energy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_serviced_energy as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_serviced_energy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_interval_max_phys_footprint as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_interval_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_unused as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_unused)
        )
    );
}
pub type rusage_info_current = rusage_info_v4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[test]
fn bindgen_test_layout_rlimit() {
    assert_eq!(
        ::std::mem::size_of::<rlimit>(),
        16usize,
        concat!("Size of: ", stringify!(rlimit))
    );
    assert_eq!(
        ::std::mem::align_of::<rlimit>(),
        8usize,
        concat!("Alignment of ", stringify!(rlimit))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rlimit>())).rlim_cur as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rlimit),
            "::",
            stringify!(rlim_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rlimit>())).rlim_max as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rlimit),
            "::",
            stringify!(rlim_max)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_rlimit_control_wakeupmon {
    pub wm_flags: u32,
    pub wm_rate: i32,
}
#[test]
fn bindgen_test_layout_proc_rlimit_control_wakeupmon() {
    assert_eq!(
        ::std::mem::size_of::<proc_rlimit_control_wakeupmon>(),
        8usize,
        concat!("Size of: ", stringify!(proc_rlimit_control_wakeupmon))
    );
    assert_eq!(
        ::std::mem::align_of::<proc_rlimit_control_wakeupmon>(),
        4usize,
        concat!("Alignment of ", stringify!(proc_rlimit_control_wakeupmon))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<proc_rlimit_control_wakeupmon>())).wm_flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(proc_rlimit_control_wakeupmon),
            "::",
            stringify!(wm_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<proc_rlimit_control_wakeupmon>())).wm_rate as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(proc_rlimit_control_wakeupmon),
            "::",
            stringify!(wm_rate)
        )
    );
}
extern "C" {
    pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut rlimit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut rusage) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpriority(
        arg1: ::std::os::raw::c_int,
        arg2: id_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const rlimit) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub w_T: wait__bindgen_ty_1,
    pub w_S: wait__bindgen_ty_2,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_1))
    );
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn w_Termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_w_Termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_w_Coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Termsig: ::std::os::raw::c_uint,
        w_Coredump: ::std::os::raw::c_uint,
        w_Retcode: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let w_Termsig: u32 = unsafe { ::std::mem::transmute(w_Termsig) };
            w_Termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let w_Coredump: u32 = unsafe { ::std::mem::transmute(w_Coredump) };
            w_Coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Retcode: u32 = unsafe { ::std::mem::transmute(w_Retcode) };
            w_Retcode as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_2))
    );
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn w_Stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Stopval: ::std::os::raw::c_uint,
        w_Stopsig: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let w_Stopval: u32 = unsafe { ::std::mem::transmute(w_Stopval) };
            w_Stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Stopsig: u32 = unsafe { ::std::mem::transmute(w_Stopsig) };
            w_Stopsig as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_wait() {
    assert_eq!(
        ::std::mem::size_of::<wait>(),
        4usize,
        concat!("Size of: ", stringify!(wait))
    );
    assert_eq!(
        ::std::mem::align_of::<wait>(),
        4usize,
        concat!("Alignment of ", stringify!(wait))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).w_status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(w_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).w_T as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wait), "::", stringify!(w_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).w_S as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wait), "::", stringify!(w_S))
    );
}
extern "C" {
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn waitpid(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> pid_t;
}
extern "C" {
    pub fn waitid(
        arg1: idtype_t,
        arg2: id_t,
        arg3: *mut siginfo_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wait3(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn wait4(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn alloca(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __count: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                __key: *const ::std::os::raw::c_void,
                __base: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn exit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn llabs(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lldiv(arg1: ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char, arg3: usize) -> usize;
}
extern "C" {
    pub fn mbtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                __base: *const ::std::os::raw::c_void,
                __nel: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn strtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtol(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtold(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtoll(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn system(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn a64l(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn ecvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn fcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        fildes: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn srand48(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn srandom(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arc4random() -> u32;
}
extern "C" {
    pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __nbytes: usize);
}
extern "C" {
    pub fn arc4random_stir();
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
extern "C" {
    pub fn atexit_b(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsearch_b(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cgetcap(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cgetclose() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetfirst(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnext(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnum(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetset(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetustr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daemon(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn devname_r(
        arg1: dev_t,
        arg2: mode_t,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getbsize(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getloadavg(arg1: *mut f64, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn heapsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                __base: *const ::std::os::raw::c_void,
                __nel: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn heapsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                __base: *const ::std::os::raw::c_void,
                __nel: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                __base: *const ::std::os::raw::c_void,
                __nel: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn psort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn psort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                __base: *mut ::std::os::raw::c_void,
                __nel: *const ::std::os::raw::c_void,
                __width: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn qsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                __base: *mut ::std::os::raw::c_void,
                __nel: *const ::std::os::raw::c_void,
                __width: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn radixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sradixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sranddev();
}
extern "C" {
    pub fn srandomdev();
}
extern "C" {
    pub fn reallocf(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strtoq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UT_hash_bucket {
    pub hh_head: *mut UT_hash_handle,
    pub count: ::std::os::raw::c_uint,
    pub expand_mult: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_UT_hash_bucket() {
    assert_eq!(
        ::std::mem::size_of::<UT_hash_bucket>(),
        16usize,
        concat!("Size of: ", stringify!(UT_hash_bucket))
    );
    assert_eq!(
        ::std::mem::align_of::<UT_hash_bucket>(),
        8usize,
        concat!("Alignment of ", stringify!(UT_hash_bucket))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_hash_bucket>())).hh_head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_hash_bucket),
            "::",
            stringify!(hh_head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_hash_bucket>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_hash_bucket),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_hash_bucket>())).expand_mult as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_hash_bucket),
            "::",
            stringify!(expand_mult)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UT_hash_table {
    pub buckets: *mut UT_hash_bucket,
    pub num_buckets: ::std::os::raw::c_uint,
    pub log2_num_buckets: ::std::os::raw::c_uint,
    pub num_items: ::std::os::raw::c_uint,
    pub tail: *mut UT_hash_handle,
    pub hho: isize,
    pub ideal_chain_maxlen: ::std::os::raw::c_uint,
    pub nonideal_items: ::std::os::raw::c_uint,
    pub ineff_expands: ::std::os::raw::c_uint,
    pub noexpand: ::std::os::raw::c_uint,
    pub signature: u32,
}
#[test]
fn bindgen_test_layout_UT_hash_table() {
    assert_eq!(
        ::std::mem::size_of::<UT_hash_table>(),
        64usize,
        concat!("Size of: ", stringify!(UT_hash_table))
    );
    assert_eq!(
        ::std::mem::align_of::<UT_hash_table>(),
        8usize,
        concat!("Alignment of ", stringify!(UT_hash_table))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_hash_table>())).buckets as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_hash_table),
            "::",
            stringify!(buckets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_hash_table>())).num_buckets as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_hash_table),
            "::",
            stringify!(num_buckets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_hash_table>())).log2_num_buckets as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_hash_table),
            "::",
            stringify!(log2_num_buckets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_hash_table>())).num_items as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_hash_table),
            "::",
            stringify!(num_items)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_hash_table>())).tail as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_hash_table),
            "::",
            stringify!(tail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_hash_table>())).hho as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_hash_table),
            "::",
            stringify!(hho)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UT_hash_table>())).ideal_chain_maxlen as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_hash_table),
            "::",
            stringify!(ideal_chain_maxlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_hash_table>())).nonideal_items as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_hash_table),
            "::",
            stringify!(nonideal_items)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_hash_table>())).ineff_expands as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_hash_table),
            "::",
            stringify!(ineff_expands)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_hash_table>())).noexpand as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_hash_table),
            "::",
            stringify!(noexpand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_hash_table>())).signature as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_hash_table),
            "::",
            stringify!(signature)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UT_hash_handle {
    pub tbl: *mut UT_hash_table,
    pub prev: *mut ::std::os::raw::c_void,
    pub next: *mut ::std::os::raw::c_void,
    pub hh_prev: *mut UT_hash_handle,
    pub hh_next: *mut UT_hash_handle,
    pub key: *mut ::std::os::raw::c_void,
    pub keylen: ::std::os::raw::c_uint,
    pub hashv: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_UT_hash_handle() {
    assert_eq!(
        ::std::mem::size_of::<UT_hash_handle>(),
        56usize,
        concat!("Size of: ", stringify!(UT_hash_handle))
    );
    assert_eq!(
        ::std::mem::align_of::<UT_hash_handle>(),
        8usize,
        concat!("Alignment of ", stringify!(UT_hash_handle))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_hash_handle>())).tbl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_hash_handle),
            "::",
            stringify!(tbl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_hash_handle>())).prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_hash_handle),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_hash_handle>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_hash_handle),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_hash_handle>())).hh_prev as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_hash_handle),
            "::",
            stringify!(hh_prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_hash_handle>())).hh_next as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_hash_handle),
            "::",
            stringify!(hh_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_hash_handle>())).key as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_hash_handle),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_hash_handle>())).keylen as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_hash_handle),
            "::",
            stringify!(keylen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_hash_handle>())).hashv as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_hash_handle),
            "::",
            stringify!(hashv)
        )
    );
}
extern "C" {
    pub fn imaxabs(j: intmax_t) -> intmax_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mam_endpoint_t_set_entry_s {
    pub value: mam_endpoint_t,
    pub hh: UT_hash_handle,
}
#[test]
fn bindgen_test_layout_mam_endpoint_t_set_entry_s() {
    assert_eq!(
        ::std::mem::size_of::<mam_endpoint_t_set_entry_s>(),
        400usize,
        concat!("Size of: ", stringify!(mam_endpoint_t_set_entry_s))
    );
    assert_eq!(
        ::std::mem::align_of::<mam_endpoint_t_set_entry_s>(),
        8usize,
        concat!("Alignment of ", stringify!(mam_endpoint_t_set_entry_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mam_endpoint_t_set_entry_s>())).value as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_endpoint_t_set_entry_s),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_endpoint_t_set_entry_s>())).hh as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_endpoint_t_set_entry_s),
            "::",
            stringify!(hh)
        )
    );
}
pub type mam_endpoint_t_on_container_func = ::std::option::Option<
    unsafe extern "C" fn(
        container: *mut ::std::os::raw::c_void,
        type_: *mut mam_endpoint_t,
    ) -> retcode_t,
>;
extern "C" {
    pub fn mam_endpoint_t_set_size(set: mam_endpoint_t_set_t) -> usize;
}
extern "C" {
    pub fn mam_endpoint_t_set_add(
        set: *mut mam_endpoint_t_set_t,
        value: *const mam_endpoint_t,
    ) -> retcode_t;
}
extern "C" {
    pub fn mam_endpoint_t_set_remove(
        set: *mut mam_endpoint_t_set_t,
        value: *const mam_endpoint_t,
    ) -> retcode_t;
}
extern "C" {
    pub fn mam_endpoint_t_set_remove_entry(
        set: *mut mam_endpoint_t_set_t,
        entry: *mut mam_endpoint_t_set_entry_t,
    ) -> retcode_t;
}
extern "C" {
    pub fn mam_endpoint_t_set_append(
        set1: *const mam_endpoint_t_set_t,
        set2: *mut mam_endpoint_t_set_t,
    ) -> retcode_t;
}
extern "C" {
    pub fn mam_endpoint_t_set_contains(
        set: *const mam_endpoint_t_set_t,
        value: *const mam_endpoint_t,
    ) -> bool;
}
extern "C" {
    pub fn mam_endpoint_t_set_find(
        set: *const mam_endpoint_t_set_t,
        arg1: *const mam_endpoint_t,
        entry: *mut *const mam_endpoint_t_set_entry_t,
    ) -> bool;
}
extern "C" {
    pub fn mam_endpoint_t_set_free(set: *mut mam_endpoint_t_set_t);
}
extern "C" {
    pub fn mam_endpoint_t_set_for_each(
        set: *const mam_endpoint_t_set_t,
        func: mam_endpoint_t_on_container_func,
        container: *mut ::std::os::raw::c_void,
    ) -> retcode_t;
}
extern "C" {
    pub fn mam_endpoint_t_set_cmp(
        lhs: *const mam_endpoint_t_set_t,
        rhs: *const mam_endpoint_t_set_t,
    ) -> bool;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mam_channel_s {
    pub name: trits_t,
    pub msg_ord: [trit_t; 81usize],
    pub mss: mam_mss_t,
    pub endpoints: mam_endpoint_t_set_t,
    pub endpoint_ord: trint18_t,
}
#[test]
fn bindgen_test_layout_mam_channel_s() {
    assert_eq!(
        ::std::mem::size_of::<mam_channel_s>(),
        448usize,
        concat!("Size of: ", stringify!(mam_channel_s))
    );
    assert_eq!(
        ::std::mem::align_of::<mam_channel_s>(),
        8usize,
        concat!("Alignment of ", stringify!(mam_channel_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_channel_s>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_channel_s),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_channel_s>())).msg_ord as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_channel_s),
            "::",
            stringify!(msg_ord)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_channel_s>())).mss as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_channel_s),
            "::",
            stringify!(mss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_channel_s>())).endpoints as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_channel_s),
            "::",
            stringify!(endpoints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_channel_s>())).endpoint_ord as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_channel_s),
            "::",
            stringify!(endpoint_ord)
        )
    );
}
pub type mam_channel_t = mam_channel_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mam_channel_t_set_entry_s {
    _unused: [u8; 0],
}
pub type mam_channel_t_set_entry_t = mam_channel_t_set_entry_s;
pub type mam_channel_t_set_t = *mut mam_channel_t_set_entry_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mam_pk_s {
    pub key: [trit_t; 243usize],
}
#[test]
fn bindgen_test_layout_mam_pk_s() {
    assert_eq!(
        ::std::mem::size_of::<mam_pk_s>(),
        243usize,
        concat!("Size of: ", stringify!(mam_pk_s))
    );
    assert_eq!(
        ::std::mem::align_of::<mam_pk_s>(),
        1usize,
        concat!("Alignment of ", stringify!(mam_pk_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_pk_s>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_pk_s),
            "::",
            stringify!(key)
        )
    );
}
pub type mam_pk_t = mam_pk_s;
extern "C" {
    #[doc = " Gets a channel's id"]
    #[doc = ""]
    #[doc = " @param channel The channel"]
    #[doc = ""]
    #[doc = " @return the channel's id"]
    pub fn mam_channel_id(channel: *const mam_channel_t) -> trits_t;
}
extern "C" {
    #[doc = " Gets a channel's name"]
    #[doc = ""]
    #[doc = " @param channel The channel"]
    #[doc = ""]
    #[doc = " @return the channel's name"]
    pub fn mam_channel_name(channel: *const mam_channel_t) -> trits_t;
}
extern "C" {
    #[doc = " Gets a channel's msg_ord"]
    #[doc = ""]
    #[doc = " @param channel The channel"]
    #[doc = ""]
    #[doc = " @return the channel's msg_ord"]
    pub fn mam_channel_msg_ord(channel: *const mam_channel_t) -> trits_t;
}
extern "C" {
    #[doc = " Allocates memory for internal objects, and generates MSS public key"]
    #[doc = ""]
    #[doc = " @param allocator A MAM allocator"]
    #[doc = " @param prng A shared PRNG interface used to generate WOTS private keys"]
    #[doc = " @param height MSS MT height"]
    #[doc = " @param channel_name The channel name"]
    #[doc = " @param channel The channel"]
    #[doc = ""]
    #[doc = " @return a status code"]
    pub fn mam_channel_create(
        prng: *mut mam_prng_t,
        height: mss_mt_height_t,
        channel_name: trits_t,
        channel: *mut mam_channel_t,
    ) -> retcode_t;
}
extern "C" {
    #[doc = " Returns the number of remaining secret keys (unused leaves on merkle tree)"]
    #[doc = " @param channel The channel"]
    #[doc = ""]
    #[doc = " @return number of remaining secret keys"]
    pub fn mam_channel_num_remaining_sks(channel: *const mam_channel_t) -> usize;
}
extern "C" {
    #[doc = " Deallocates memory for internal objects"]
    #[doc = " Before destroying channel, make sure to destroy all associated endpoints"]
    #[doc = ""]
    #[doc = " @param allocator A MAM allocator"]
    #[doc = " @param channel The channel"]
    pub fn mam_channel_destroy(channel: *mut mam_channel_t);
}
extern "C" {
    pub fn mam_channels_destroy(channels: *mut mam_channel_t_set_t) -> retcode_t;
}
extern "C" {
    pub fn mam_channel_serialized_size(channel: *const mam_channel_t) -> usize;
}
extern "C" {
    pub fn mam_channel_serialize(channel: *const mam_channel_t, buffer: *mut trits_t);
}
extern "C" {
    pub fn mam_channel_deserialize(
        buffer: *mut trits_t,
        prng: *mut mam_prng_t,
        channel: *mut mam_channel_t,
    ) -> retcode_t;
}
extern "C" {
    pub fn mam_channels_serialized_size(channels: mam_channel_t_set_t) -> usize;
}
extern "C" {
    pub fn mam_channels_serialize(channels: mam_channel_t_set_t, buffer: *mut trits_t);
}
extern "C" {
    pub fn mam_channels_deserialize(
        buffer: *mut trits_t,
        prng: *mut mam_prng_t,
        channels: *mut mam_channel_t_set_t,
    ) -> retcode_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mam_pk_t_set_entry_s {
    pub value: mam_pk_t,
    pub hh: UT_hash_handle,
}
#[test]
fn bindgen_test_layout_mam_pk_t_set_entry_s() {
    assert_eq!(
        ::std::mem::size_of::<mam_pk_t_set_entry_s>(),
        304usize,
        concat!("Size of: ", stringify!(mam_pk_t_set_entry_s))
    );
    assert_eq!(
        ::std::mem::align_of::<mam_pk_t_set_entry_s>(),
        8usize,
        concat!("Alignment of ", stringify!(mam_pk_t_set_entry_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_pk_t_set_entry_s>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_pk_t_set_entry_s),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_pk_t_set_entry_s>())).hh as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_pk_t_set_entry_s),
            "::",
            stringify!(hh)
        )
    );
}
pub type mam_pk_t_set_entry_t = mam_pk_t_set_entry_s;
pub type mam_pk_t_set_t = *mut mam_pk_t_set_entry_t;
pub type mam_pk_t_on_container_func = ::std::option::Option<
    unsafe extern "C" fn(container: *mut ::std::os::raw::c_void, type_: *mut mam_pk_t) -> retcode_t,
>;
extern "C" {
    pub fn mam_pk_t_set_size(set: mam_pk_t_set_t) -> usize;
}
extern "C" {
    pub fn mam_pk_t_set_add(set: *mut mam_pk_t_set_t, value: *const mam_pk_t) -> retcode_t;
}
extern "C" {
    pub fn mam_pk_t_set_remove(set: *mut mam_pk_t_set_t, value: *const mam_pk_t) -> retcode_t;
}
extern "C" {
    pub fn mam_pk_t_set_remove_entry(
        set: *mut mam_pk_t_set_t,
        entry: *mut mam_pk_t_set_entry_t,
    ) -> retcode_t;
}
extern "C" {
    pub fn mam_pk_t_set_append(set1: *const mam_pk_t_set_t, set2: *mut mam_pk_t_set_t)
        -> retcode_t;
}
extern "C" {
    pub fn mam_pk_t_set_contains(set: *const mam_pk_t_set_t, value: *const mam_pk_t) -> bool;
}
extern "C" {
    pub fn mam_pk_t_set_find(
        set: *const mam_pk_t_set_t,
        arg1: *const mam_pk_t,
        entry: *mut *const mam_pk_t_set_entry_t,
    ) -> bool;
}
extern "C" {
    pub fn mam_pk_t_set_free(set: *mut mam_pk_t_set_t);
}
extern "C" {
    pub fn mam_pk_t_set_for_each(
        set: *const mam_pk_t_set_t,
        func: mam_pk_t_on_container_func,
        container: *mut ::std::os::raw::c_void,
    ) -> retcode_t;
}
extern "C" {
    pub fn mam_pk_t_set_cmp(lhs: *const mam_pk_t_set_t, rhs: *const mam_pk_t_set_t) -> bool;
}
pub type poly_coeff_t = trint9_t;
pub type poly_dcoeff_t = trint18_t;
pub type poly_t = [poly_coeff_t; 1024usize];
extern "C" {
    #[doc = " Convert integer into internal polynomial coefficient representation"]
    #[doc = " The input integer must be within the range [-(Q-1)/2,...,(Q-1)/2]"]
    pub fn poly_coeff_from_trint9(t: trint9_t) -> poly_coeff_t;
}
extern "C" {
    #[doc = " Convert internal polynomial coefficient representation into an integer"]
    #[doc = " The output integer will be within the range [-(Q-1)/2,...,(Q-1)/2]"]
    pub fn poly_coeff_to_trint9(c: poly_coeff_t) -> trint9_t;
}
extern "C" {
    pub fn poly_coeff_add(a: poly_coeff_t, b: poly_coeff_t) -> poly_coeff_t;
}
extern "C" {
    pub fn poly_coeff_inv(a: poly_coeff_t) -> poly_coeff_t;
}
extern "C" {
    #[doc = " t(x) := NTT(f)"]
    #[doc = " t\u{2c7c} = f(\u{3b3}\u{b2}\u{2b2}\u{207a}\u{b9}) \u{2261} \u{3a3}\u{1d62}f\u{1d62}\u{3b3}\u{207d}\u{b2}\u{2b2}\u{207a}\u{b9}\u{207e}\u{2071}"]
    pub fn poly_ntt(f: *mut poly_coeff_t, t: *mut poly_coeff_t);
}
extern "C" {
    #[doc = " f(x) := NTT\u{207b}\u{b9}(t)"]
    #[doc = " f\u{2096} = \u{3b3}\u{207b}\u{1d4f}n\u{207b}\u{b9} t(\u{3b3}\u{207b}\u{b2}\u{1d4f})"]
    #[doc = ""]
    #[doc = " t(\u{3b3}\u{207b}\u{b2}\u{1d4f})"]
    #[doc = " \u{2261} \u{3a3}\u{2c7c}t\u{2c7c}\u{3b3}\u{207b}\u{b2}\u{1d4f}\u{2b2}"]
    #[doc = " \u{2261} \u{3a3}\u{2c7c}(\u{3a3}\u{1d62}f\u{1d62}\u{3b3}\u{207d}\u{b2}\u{2b2}\u{207a}\u{b9}\u{207e}\u{2071})\u{3b3}\u{207b}\u{b2}\u{1d4f}\u{2b2}"]
    #[doc = " \u{2261} \u{3a3}\u{1d62}f\u{1d62}(\u{3a3}\u{2c7c}\u{3b3}\u{207d}\u{b2}\u{2b2}\u{207a}\u{b9}\u{207e}\u{2071}\u{207b}\u{b2}\u{1d4f}\u{2b2})"]
    #[doc = " \u{2261} \u{3a3}\u{1d62}f\u{1d62}\u{3b3}\u{2071}(\u{3a3}\u{2c7c}\u{3b3}\u{b2}\u{2b2}\u{207d}\u{2071}\u{207b}\u{1d4f}\u{207e})"]
    #[doc = " \u{2261} f\u{2096}\u{3b3}\u{1d4f}n"]
    pub fn poly_intt(t: *mut poly_coeff_t, f: *mut poly_coeff_t);
}
extern "C" {
    pub fn poly_round_to_trits(f: *mut poly_coeff_t, t: trits_t);
}
extern "C" {
    pub fn poly_from_trits(f: *mut poly_coeff_t, t: trits_t) -> bool;
}
#[doc = " The NTRU layer supports an NTRU-style public key encryption scheme"]
#[doc = " Using NTRU a sender can encrypt session keys with a public key of a recipient"]
#[doc = " The secret key must be kept in secret"]
#[doc = " The corresponding public key, on the contrary, is publicly announced"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mam_ntru_pk_s {
    pub key: [trit_t; 9216usize],
}
#[test]
fn bindgen_test_layout_mam_ntru_pk_s() {
    assert_eq!(
        ::std::mem::size_of::<mam_ntru_pk_s>(),
        9216usize,
        concat!("Size of: ", stringify!(mam_ntru_pk_s))
    );
    assert_eq!(
        ::std::mem::align_of::<mam_ntru_pk_s>(),
        1usize,
        concat!("Alignment of ", stringify!(mam_ntru_pk_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_ntru_pk_s>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_ntru_pk_s),
            "::",
            stringify!(key)
        )
    );
}
pub type mam_ntru_pk_t = mam_ntru_pk_s;
pub type mam_ntru_pk_t_set_entry_t = mam_ntru_pk_t_set_entry_s;
pub type mam_ntru_pk_t_set_t = *mut mam_ntru_pk_t_set_entry_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mam_ntru_sk_s {
    pub public_key: mam_ntru_pk_t,
    pub secret_key: [trit_t; 1024usize],
    pub f: poly_t,
}
#[test]
fn bindgen_test_layout_mam_ntru_sk_s() {
    assert_eq!(
        ::std::mem::size_of::<mam_ntru_sk_s>(),
        12288usize,
        concat!("Size of: ", stringify!(mam_ntru_sk_s))
    );
    assert_eq!(
        ::std::mem::align_of::<mam_ntru_sk_s>(),
        2usize,
        concat!("Alignment of ", stringify!(mam_ntru_sk_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_ntru_sk_s>())).public_key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_ntru_sk_s),
            "::",
            stringify!(public_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_ntru_sk_s>())).secret_key as *const _ as usize },
        9216usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_ntru_sk_s),
            "::",
            stringify!(secret_key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_ntru_sk_s>())).f as *const _ as usize },
        10240usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_ntru_sk_s),
            "::",
            stringify!(f)
        )
    );
}
pub type mam_ntru_sk_t = mam_ntru_sk_s;
pub type mam_ntru_sk_t_set_entry_t = mam_ntru_sk_t_set_entry_s;
pub type mam_ntru_sk_t_set_t = *mut mam_ntru_sk_t_set_entry_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mam_ntru_pk_t_set_entry_s {
    pub value: mam_ntru_pk_t,
    pub hh: UT_hash_handle,
}
#[test]
fn bindgen_test_layout_mam_ntru_pk_t_set_entry_s() {
    assert_eq!(
        ::std::mem::size_of::<mam_ntru_pk_t_set_entry_s>(),
        9272usize,
        concat!("Size of: ", stringify!(mam_ntru_pk_t_set_entry_s))
    );
    assert_eq!(
        ::std::mem::align_of::<mam_ntru_pk_t_set_entry_s>(),
        8usize,
        concat!("Alignment of ", stringify!(mam_ntru_pk_t_set_entry_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_ntru_pk_t_set_entry_s>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_ntru_pk_t_set_entry_s),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_ntru_pk_t_set_entry_s>())).hh as *const _ as usize },
        9216usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_ntru_pk_t_set_entry_s),
            "::",
            stringify!(hh)
        )
    );
}
pub type mam_ntru_pk_t_on_container_func = ::std::option::Option<
    unsafe extern "C" fn(
        container: *mut ::std::os::raw::c_void,
        type_: *mut mam_ntru_pk_t,
    ) -> retcode_t,
>;
extern "C" {
    pub fn mam_ntru_pk_t_set_size(set: mam_ntru_pk_t_set_t) -> usize;
}
extern "C" {
    pub fn mam_ntru_pk_t_set_add(
        set: *mut mam_ntru_pk_t_set_t,
        value: *const mam_ntru_pk_t,
    ) -> retcode_t;
}
extern "C" {
    pub fn mam_ntru_pk_t_set_remove(
        set: *mut mam_ntru_pk_t_set_t,
        value: *const mam_ntru_pk_t,
    ) -> retcode_t;
}
extern "C" {
    pub fn mam_ntru_pk_t_set_remove_entry(
        set: *mut mam_ntru_pk_t_set_t,
        entry: *mut mam_ntru_pk_t_set_entry_t,
    ) -> retcode_t;
}
extern "C" {
    pub fn mam_ntru_pk_t_set_append(
        set1: *const mam_ntru_pk_t_set_t,
        set2: *mut mam_ntru_pk_t_set_t,
    ) -> retcode_t;
}
extern "C" {
    pub fn mam_ntru_pk_t_set_contains(
        set: *const mam_ntru_pk_t_set_t,
        value: *const mam_ntru_pk_t,
    ) -> bool;
}
extern "C" {
    pub fn mam_ntru_pk_t_set_find(
        set: *const mam_ntru_pk_t_set_t,
        arg1: *const mam_ntru_pk_t,
        entry: *mut *const mam_ntru_pk_t_set_entry_t,
    ) -> bool;
}
extern "C" {
    pub fn mam_ntru_pk_t_set_free(set: *mut mam_ntru_pk_t_set_t);
}
extern "C" {
    pub fn mam_ntru_pk_t_set_for_each(
        set: *const mam_ntru_pk_t_set_t,
        func: mam_ntru_pk_t_on_container_func,
        container: *mut ::std::os::raw::c_void,
    ) -> retcode_t;
}
extern "C" {
    pub fn mam_ntru_pk_t_set_cmp(
        lhs: *const mam_ntru_pk_t_set_t,
        rhs: *const mam_ntru_pk_t_set_t,
    ) -> bool;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mam_ntru_sk_t_set_entry_s {
    pub value: mam_ntru_sk_t,
    pub hh: UT_hash_handle,
}
#[test]
fn bindgen_test_layout_mam_ntru_sk_t_set_entry_s() {
    assert_eq!(
        ::std::mem::size_of::<mam_ntru_sk_t_set_entry_s>(),
        12344usize,
        concat!("Size of: ", stringify!(mam_ntru_sk_t_set_entry_s))
    );
    assert_eq!(
        ::std::mem::align_of::<mam_ntru_sk_t_set_entry_s>(),
        8usize,
        concat!("Alignment of ", stringify!(mam_ntru_sk_t_set_entry_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_ntru_sk_t_set_entry_s>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_ntru_sk_t_set_entry_s),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_ntru_sk_t_set_entry_s>())).hh as *const _ as usize },
        12288usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_ntru_sk_t_set_entry_s),
            "::",
            stringify!(hh)
        )
    );
}
pub type mam_ntru_sk_t_on_container_func = ::std::option::Option<
    unsafe extern "C" fn(
        container: *mut ::std::os::raw::c_void,
        type_: *mut mam_ntru_sk_t,
    ) -> retcode_t,
>;
extern "C" {
    pub fn mam_ntru_sk_t_set_size(set: mam_ntru_sk_t_set_t) -> usize;
}
extern "C" {
    pub fn mam_ntru_sk_t_set_add(
        set: *mut mam_ntru_sk_t_set_t,
        value: *const mam_ntru_sk_t,
    ) -> retcode_t;
}
extern "C" {
    pub fn mam_ntru_sk_t_set_remove(
        set: *mut mam_ntru_sk_t_set_t,
        value: *const mam_ntru_sk_t,
    ) -> retcode_t;
}
extern "C" {
    pub fn mam_ntru_sk_t_set_remove_entry(
        set: *mut mam_ntru_sk_t_set_t,
        entry: *mut mam_ntru_sk_t_set_entry_t,
    ) -> retcode_t;
}
extern "C" {
    pub fn mam_ntru_sk_t_set_append(
        set1: *const mam_ntru_sk_t_set_t,
        set2: *mut mam_ntru_sk_t_set_t,
    ) -> retcode_t;
}
extern "C" {
    pub fn mam_ntru_sk_t_set_contains(
        set: *const mam_ntru_sk_t_set_t,
        value: *const mam_ntru_sk_t,
    ) -> bool;
}
extern "C" {
    pub fn mam_ntru_sk_t_set_find(
        set: *const mam_ntru_sk_t_set_t,
        arg1: *const mam_ntru_sk_t,
        entry: *mut *const mam_ntru_sk_t_set_entry_t,
    ) -> bool;
}
extern "C" {
    pub fn mam_ntru_sk_t_set_free(set: *mut mam_ntru_sk_t_set_t);
}
extern "C" {
    pub fn mam_ntru_sk_t_set_for_each(
        set: *const mam_ntru_sk_t_set_t,
        func: mam_ntru_sk_t_on_container_func,
        container: *mut ::std::os::raw::c_void,
    ) -> retcode_t;
}
extern "C" {
    pub fn mam_ntru_sk_t_set_cmp(
        lhs: *const mam_ntru_sk_t_set_t,
        rhs: *const mam_ntru_sk_t_set_t,
    ) -> bool;
}
extern "C" {
    #[doc = " NTRU encryption of a session key"]
    #[doc = ""]
    #[doc = " @param ntru_pk A NTRU public key"]
    #[doc = " @param prng A PRNG interface"]
    #[doc = " @param spongos A spongos interface"]
    #[doc = " @param nonce A nonce"]
    #[doc = " @param session_key A session symmetric key to be encrypted"]
    #[doc = " @param encrypted_session_key The encrypted session key"]
    #[doc = ""]
    #[doc = " @return a status code"]
    pub fn ntru_pk_encr(
        ntru_pk: *const mam_ntru_pk_t,
        prng: *const mam_prng_t,
        spongos: *mut mam_spongos_t,
        nonce: trits_t,
        session_key: trits_t,
        encrypted_session_key: trits_t,
    ) -> retcode_t;
}
extern "C" {
    #[doc = " NTRU encryption of a session key"]
    #[doc = ""]
    #[doc = " @param public_key A NTRU public key"]
    #[doc = " @param spongos A spongos interface"]
    #[doc = " @param r Pseudo-random trits"]
    #[doc = " @param session_key A session symmetric key to be encrypted"]
    #[doc = " @param encrypted_session_key The encrypted session key"]
    #[doc = ""]
    #[doc = " @return a status code"]
    pub fn ntru_pk_encr_r(
        ntru_pk: *const mam_ntru_pk_t,
        spongos: *mut mam_spongos_t,
        r: trits_t,
        session_key: trits_t,
        encrypted_session_key: trits_t,
    ) -> retcode_t;
}
extern "C" {
    #[doc = " Gets the size of a serialized set of NTRU public keys"]
    #[doc = ""]
    #[doc = " @param ntru_pks The set of NTRU public keys"]
    #[doc = ""]
    #[doc = " @return the serialized size"]
    pub fn mam_ntru_pks_serialized_size(ntru_pks: mam_ntru_pk_t_set_t) -> usize;
}
extern "C" {
    #[doc = " Serializes a set of NTRU public keys into a trits buffer"]
    #[doc = ""]
    #[doc = " @param ntru_pks The set of NTRU public keys"]
    #[doc = " @param trits The trits buffer to serialize into"]
    #[doc = ""]
    #[doc = " @return a status code"]
    pub fn mam_ntru_pks_serialize(ntru_pks: mam_ntru_pk_t_set_t, trits: *mut trits_t) -> retcode_t;
}
extern "C" {
    #[doc = " Deserializes a set of NTRU public keys from a trits buffer"]
    #[doc = ""]
    #[doc = " @param trits The trits buffer to deserialize from"]
    #[doc = " @param ntru_pks The set of NTRU public keys"]
    #[doc = ""]
    #[doc = " @return a status code"]
    pub fn mam_ntru_pks_deserialize(
        trits: *mut trits_t,
        ntru_pks: *mut mam_ntru_pk_t_set_t,
    ) -> retcode_t;
}
extern "C" {
    #[doc = " Safely resets a NTRU secret key by clearing its secret part"]
    #[doc = ""]
    #[doc = " @param ntru_sk The NTRU secret key"]
    #[doc = ""]
    #[doc = " @return a status code"]
    pub fn ntru_sk_reset(ntru_sk: *mut mam_ntru_sk_t) -> retcode_t;
}
extern "C" {
    #[doc = " Generates a NTRU secret key"]
    #[doc = ""]
    #[doc = " @param ntru_sk The NTRU secret key"]
    #[doc = " @param prng A PRNG interface"]
    #[doc = " @param nonce A nonce"]
    pub fn ntru_sk_gen(ntru_sk: *const mam_ntru_sk_t, prng: *const mam_prng_t, nonce: trits_t);
}
extern "C" {
    #[doc = " NTRU decryption of an encrypted session key"]
    #[doc = ""]
    #[doc = " @param ntru_sk A NTRU secret key"]
    #[doc = " @param spongos A spongos interface"]
    #[doc = " @param encrypted_session_key An encrypted session key"]
    #[doc = " @param session_key The decrypted session symmetric key"]
    #[doc = ""]
    #[doc = " @return true if decryption succeeded,false otherwise"]
    pub fn ntru_sk_decr(
        ntru_sk: *const mam_ntru_sk_t,
        spongos: *mut mam_spongos_t,
        encrypted_session_key: trits_t,
        session_key: trits_t,
    ) -> bool;
}
extern "C" {
    #[doc = " Loads the internal representation of a NTRU secret key"]
    #[doc = ""]
    #[doc = " @param ntru_sk A NTRU secret key"]
    pub fn ntru_sk_load(ntru_sk: *mut mam_ntru_sk_t);
}
extern "C" {
    #[doc = " Safely destroys a set of NTRU secret keys by clearing their secret part and"]
    #[doc = " releasing memory"]
    #[doc = ""]
    #[doc = " @param ntru_pks The set of NTRU public keys"]
    pub fn mam_ntru_sks_destroy(ntru_sks: *mut mam_ntru_sk_t_set_t);
}
extern "C" {
    #[doc = " Gets the size of a serialized set of NTRU secret keys"]
    #[doc = ""]
    #[doc = " @param ntru_sks The set of NTRU secret keys"]
    #[doc = ""]
    #[doc = " @return the serialized size"]
    pub fn mam_ntru_sks_serialized_size(ntru_sks: mam_ntru_sk_t_set_t) -> usize;
}
extern "C" {
    #[doc = " Serializes a set of NTRU secret keys into a trits buffer"]
    #[doc = ""]
    #[doc = " @param ntru_sks The set of NTRU secret keys"]
    #[doc = " @param trits The trits buffer to serialize into"]
    #[doc = ""]
    #[doc = " @return a status code"]
    pub fn mam_ntru_sks_serialize(ntru_sks: mam_ntru_sk_t_set_t, trits: *mut trits_t) -> retcode_t;
}
extern "C" {
    #[doc = " Deserializes a set of NTRU secret keys from a trits buffer"]
    #[doc = ""]
    #[doc = " @param trits The trits buffer to deserialize from"]
    #[doc = " @param ntru_sks The set of NTRU secret keys"]
    #[doc = ""]
    #[doc = " @return a status code"]
    pub fn mam_ntru_sks_deserialize(
        trits: *mut trits_t,
        ntru_sks: *mut mam_ntru_sk_t_set_t,
    ) -> retcode_t;
}
#[doc = " Pre-Shared Key (PSK) is a secret key of Authenticated Encryption (AE)"]
#[doc = " It is preliminarily transmitted between the entities and is beyond the scope"]
#[doc = " of MAM"]
#[doc = " The PSK id is an identifier of a group of recipients who share the same PSK"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mam_psk_s {
    pub id: [trit_t; 81usize],
    pub key: [trit_t; 243usize],
}
#[test]
fn bindgen_test_layout_mam_psk_s() {
    assert_eq!(
        ::std::mem::size_of::<mam_psk_s>(),
        324usize,
        concat!("Size of: ", stringify!(mam_psk_s))
    );
    assert_eq!(
        ::std::mem::align_of::<mam_psk_s>(),
        1usize,
        concat!("Alignment of ", stringify!(mam_psk_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_psk_s>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_psk_s),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_psk_s>())).key as *const _ as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_psk_s),
            "::",
            stringify!(key)
        )
    );
}
pub type mam_psk_t = mam_psk_s;
pub type mam_psk_t_set_entry_t = mam_psk_t_set_entry_s;
pub type mam_psk_t_set_t = *mut mam_psk_t_set_entry_t;
extern "C" {
    #[doc = " Generates a pre-shared key with an id and a nonce"]
    #[doc = ""]
    #[doc = " @param psk The pre-shared key"]
    #[doc = " @param prng A PRNG interface"]
    #[doc = " @param id The pre-shared key id (27 trytes)"]
    #[doc = " @param nonce A trytes nonce"]
    #[doc = " @param nonce_length Length of the trytes nonce"]
    #[doc = ""]
    #[doc = " @return a status code"]
    pub fn mam_psk_gen(
        psk: *mut mam_psk_t,
        prng: *const mam_prng_t,
        id: *const tryte_t,
        nonce: *const tryte_t,
        nonce_length: usize,
    ) -> retcode_t;
}
extern "C" {
    #[doc = " Safely destroys a pre-shared key by clearing its secret part"]
    #[doc = ""]
    #[doc = " @param psk The pre-shared key"]
    pub fn mam_psk_destroy(psk: *mut mam_psk_t);
}
extern "C" {
    #[doc = " Gets a pre-shared key id trits"]
    #[doc = ""]
    #[doc = " @param psk The pre-shared key"]
    #[doc = ""]
    #[doc = " @return the pre-shared key id trits"]
    pub fn mam_psk_id(psk: *const mam_psk_t) -> trits_t;
}
extern "C" {
    #[doc = " Gets a pre-shared key trits"]
    #[doc = ""]
    #[doc = " @param psk The pre-shared key"]
    #[doc = ""]
    #[doc = " @return the pre-shared key trits"]
    pub fn mam_psk_key(psk: *const mam_psk_t) -> trits_t;
}
extern "C" {
    #[doc = " Safely destroys a set of pre-shared keys by clearing their secret part and"]
    #[doc = " releasing memory"]
    #[doc = ""]
    #[doc = " @param psks The set of pre-shared keys"]
    pub fn mam_psks_destroy(psks: *mut mam_psk_t_set_t);
}
extern "C" {
    #[doc = " Gets the size of a serialized set of pre-shared keys"]
    #[doc = ""]
    #[doc = " @param psks The set of pre-shared keys"]
    #[doc = ""]
    #[doc = " @return the serialized size"]
    pub fn mam_psks_serialized_size(psks: mam_psk_t_set_t) -> usize;
}
extern "C" {
    #[doc = " Serializes a set of pre-shared keys into a trits buffer"]
    #[doc = ""]
    #[doc = " @param psks The set of pre-shared keys"]
    #[doc = " @param trits The trits buffer to serialize into"]
    #[doc = ""]
    #[doc = " @return a status code"]
    pub fn mam_psks_serialize(psks: mam_psk_t_set_t, trits: *mut trits_t) -> retcode_t;
}
extern "C" {
    #[doc = " Deserializes a set of pre-shared keys from a trits buffer"]
    #[doc = ""]
    #[doc = " @param trits The trits buffer to deserialize from"]
    #[doc = " @param psks The set of pre-shared keys"]
    #[doc = ""]
    #[doc = " @return a status code"]
    pub fn mam_psks_deserialize(trits: *mut trits_t, psks: *mut mam_psk_t_set_t) -> retcode_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mam_psk_t_set_entry_s {
    pub value: mam_psk_t,
    pub hh: UT_hash_handle,
}
#[test]
fn bindgen_test_layout_mam_psk_t_set_entry_s() {
    assert_eq!(
        ::std::mem::size_of::<mam_psk_t_set_entry_s>(),
        384usize,
        concat!("Size of: ", stringify!(mam_psk_t_set_entry_s))
    );
    assert_eq!(
        ::std::mem::align_of::<mam_psk_t_set_entry_s>(),
        8usize,
        concat!("Alignment of ", stringify!(mam_psk_t_set_entry_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_psk_t_set_entry_s>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_psk_t_set_entry_s),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_psk_t_set_entry_s>())).hh as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_psk_t_set_entry_s),
            "::",
            stringify!(hh)
        )
    );
}
pub type mam_psk_t_on_container_func = ::std::option::Option<
    unsafe extern "C" fn(
        container: *mut ::std::os::raw::c_void,
        type_: *mut mam_psk_t,
    ) -> retcode_t,
>;
extern "C" {
    pub fn mam_psk_t_set_size(set: mam_psk_t_set_t) -> usize;
}
extern "C" {
    pub fn mam_psk_t_set_add(set: *mut mam_psk_t_set_t, value: *const mam_psk_t) -> retcode_t;
}
extern "C" {
    pub fn mam_psk_t_set_remove(set: *mut mam_psk_t_set_t, value: *const mam_psk_t) -> retcode_t;
}
extern "C" {
    pub fn mam_psk_t_set_remove_entry(
        set: *mut mam_psk_t_set_t,
        entry: *mut mam_psk_t_set_entry_t,
    ) -> retcode_t;
}
extern "C" {
    pub fn mam_psk_t_set_append(
        set1: *const mam_psk_t_set_t,
        set2: *mut mam_psk_t_set_t,
    ) -> retcode_t;
}
extern "C" {
    pub fn mam_psk_t_set_contains(set: *const mam_psk_t_set_t, value: *const mam_psk_t) -> bool;
}
extern "C" {
    pub fn mam_psk_t_set_find(
        set: *const mam_psk_t_set_t,
        arg1: *const mam_psk_t,
        entry: *mut *const mam_psk_t_set_entry_t,
    ) -> bool;
}
extern "C" {
    pub fn mam_psk_t_set_free(set: *mut mam_psk_t_set_t);
}
extern "C" {
    pub fn mam_psk_t_set_for_each(
        set: *const mam_psk_t_set_t,
        func: mam_psk_t_on_container_func,
        container: *mut ::std::os::raw::c_void,
    ) -> retcode_t;
}
extern "C" {
    pub fn mam_psk_t_set_cmp(lhs: *const mam_psk_t_set_t, rhs: *const mam_psk_t_set_t) -> bool;
}
pub const mam_msg_pubkey_e_mam_msg_pubkey_chid: mam_msg_pubkey_e = 0;
pub const mam_msg_pubkey_e_mam_msg_pubkey_epid: mam_msg_pubkey_e = 1;
pub const mam_msg_pubkey_e_mam_msg_pubkey_chid1: mam_msg_pubkey_e = 2;
pub const mam_msg_pubkey_e_mam_msg_pubkey_epid1: mam_msg_pubkey_e = 3;
pub type mam_msg_pubkey_e = u32;
pub use self::mam_msg_pubkey_e as mam_msg_pubkey_t;
pub const mam_msg_keyload_e_mam_msg_keyload_psk: mam_msg_keyload_e = 1;
pub const mam_msg_keyload_e_mam_msg_keyload_ntru: mam_msg_keyload_e = 2;
pub type mam_msg_keyload_e = u32;
pub use self::mam_msg_keyload_e as mam_msg_keyload_t;
pub const mam_msg_checksum_e_mam_msg_checksum_none: mam_msg_checksum_e = 0;
pub const mam_msg_checksum_e_mam_msg_checksum_mac: mam_msg_checksum_e = 1;
pub const mam_msg_checksum_e_mam_msg_checksum_mssig: mam_msg_checksum_e = 2;
pub type mam_msg_checksum_e = u32;
pub use self::mam_msg_checksum_e as mam_msg_checksum_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mam_msg_write_context_s {
    pub chid: [trit_t; 243usize],
    pub spongos: mam_spongos_t,
    pub ord: trint18_t,
    pub mss: *mut mam_mss_t,
}
#[test]
fn bindgen_test_layout_mam_msg_write_context_s() {
    assert_eq!(
        ::std::mem::size_of::<mam_msg_write_context_s>(),
        1008usize,
        concat!("Size of: ", stringify!(mam_msg_write_context_s))
    );
    assert_eq!(
        ::std::mem::align_of::<mam_msg_write_context_s>(),
        8usize,
        concat!("Alignment of ", stringify!(mam_msg_write_context_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_msg_write_context_s>())).chid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_msg_write_context_s),
            "::",
            stringify!(chid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_msg_write_context_s>())).spongos as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_msg_write_context_s),
            "::",
            stringify!(spongos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_msg_write_context_s>())).ord as *const _ as usize },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_msg_write_context_s),
            "::",
            stringify!(ord)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_msg_write_context_s>())).mss as *const _ as usize },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_msg_write_context_s),
            "::",
            stringify!(mss)
        )
    );
}
pub type mam_msg_write_context_t = mam_msg_write_context_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mam_msg_read_context_s {
    pub spongos: mam_spongos_t,
    pub pk: mam_pk_t,
    pub ord: trint18_t,
}
#[test]
fn bindgen_test_layout_mam_msg_read_context_s() {
    assert_eq!(
        ::std::mem::size_of::<mam_msg_read_context_s>(),
        992usize,
        concat!("Size of: ", stringify!(mam_msg_read_context_s))
    );
    assert_eq!(
        ::std::mem::align_of::<mam_msg_read_context_s>(),
        8usize,
        concat!("Alignment of ", stringify!(mam_msg_read_context_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_msg_read_context_s>())).spongos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_msg_read_context_s),
            "::",
            stringify!(spongos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_msg_read_context_s>())).pk as *const _ as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_msg_read_context_s),
            "::",
            stringify!(pk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_msg_read_context_s>())).ord as *const _ as usize },
        988usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_msg_read_context_s),
            "::",
            stringify!(ord)
        )
    );
}
pub type mam_msg_read_context_t = mam_msg_read_context_s;
extern "C" {
    #[doc = " Gets the header size for encoding"]
    #[doc = ""]
    #[doc = " @param ch - The channel[in]"]
    #[doc = " @param ep - The endpoint[in]"]
    #[doc = " @param ch1 - The new channel[in]"]
    #[doc = " @param ep1 - The new endpoint[in]"]
    #[doc = " @param psks - The set of pre-shared-keys[in]"]
    #[doc = " @param ntru_pks - The set of the NTRU public keys[in]"]
    #[doc = ""]
    #[doc = " @return return the size of the header"]
    pub fn mam_msg_header_size(
        ch: *const mam_channel_t,
        ep: *const mam_endpoint_t,
        ch1: *const mam_channel_t,
        ep1: *const mam_endpoint_t,
        psks: mam_psk_t_set_t,
        ntru_pks: mam_ntru_pk_t_set_t,
    ) -> usize;
}
extern "C" {
    #[doc = " Writes a header into trits buffer"]
    #[doc = ""]
    #[doc = " @param ctx - The context[in, out]"]
    #[doc = " @param prng - The PRNG[in]"]
    #[doc = " @param ch - The channel[in]"]
    #[doc = " @param ep - The endpoint[in]"]
    #[doc = " @param ch1 - The new channel[in]"]
    #[doc = " @param ep1 - The new endpoint[in]"]
    #[doc = " @param msg_id - The msg id[in]"]
    #[doc = " @param msg_type_id - The message type id[in]"]
    #[doc = " @param psks - The set of pre-shared-keys[in]"]
    #[doc = " @param ntru_pks - The set of the NTRU public keys[in]"]
    #[doc = " @param msg - The buffer[out]"]
    #[doc = ""]
    #[doc = " @return return error code"]
    pub fn mam_msg_write_header(
        ctx: *mut mam_msg_write_context_t,
        prng: *const mam_prng_t,
        ch: *mut mam_channel_t,
        ep: *mut mam_endpoint_t,
        ch1: *mut mam_channel_t,
        ep1: *mut mam_endpoint_t,
        msg_id: trits_t,
        msg_type_id: trint9_t,
        psks: mam_psk_t_set_t,
        ntru_pks: mam_ntru_pk_t_set_t,
        msg: *mut trits_t,
    ) -> retcode_t;
}
extern "C" {
    #[doc = " Gets the packet size for encoding"]
    #[doc = ""]
    #[doc = " @param checksum - The checksum option[in]"]
    #[doc = " @param mss - The mss (relevant for `mam_msg_checksum`_mssig checksum"]
    #[doc = " option)[in]"]
    #[doc = " @param payload_size - The size of the payload to encode into the packet[in]"]
    #[doc = ""]
    #[doc = " @return return the size of the packet"]
    pub fn mam_msg_packet_size(
        checksum: mam_msg_checksum_t,
        mss: *const mam_mss_t,
        payload_size: usize,
    ) -> usize;
}
extern "C" {
    #[doc = " Writes a packet into a buffer"]
    #[doc = ""]
    #[doc = " @param ctx - The context[in, out]"]
    #[doc = " @param checksum - The checksum option[in]"]
    #[doc = " @param payload - The payload to encode into the packet[in]"]
    #[doc = " @param buffer - The buffer where the packet is encoded[out]"]
    #[doc = ""]
    #[doc = " @return return the size of the packet"]
    pub fn mam_msg_write_packet(
        ctx: *mut mam_msg_write_context_t,
        checksum: mam_msg_checksum_t,
        payload: trits_t,
        buffer: *mut trits_t,
    ) -> retcode_t;
}
extern "C" {
    #[doc = " Reads a header"]
    #[doc = ""]
    #[doc = " @param ctx - The context[in, out]"]
    #[doc = " @param msg - The buffer to decode[in]"]
    #[doc = " @param psks - The set of pre-shared-keys[in]"]
    #[doc = " @param ntru_sks - The set of the NTRU secret keys[in]"]
    #[doc = " @param msg_id - The msg_id[out]"]
    #[doc = " @param trusted_channels_pks - The set of trusted channels pks [in, out]"]
    #[doc = " @param trusted_endpoints_pks - The set of trusted endpoint pks [in, out]"]
    #[doc = ""]
    #[doc = " @return return error code"]
    pub fn mam_msg_read_header(
        ctx: *mut mam_msg_read_context_t,
        msg: *mut trits_t,
        psks: mam_psk_t_set_t,
        ntru_sks: mam_ntru_sk_t_set_t,
        msg_id: trits_t,
        trusted_channels_pks: *mut mam_pk_t_set_t,
        trusted_endpoints_pks: *mut mam_pk_t_set_t,
    ) -> retcode_t;
}
extern "C" {
    #[doc = " Reads a packet"]
    #[doc = ""]
    #[doc = " @param ctx - The context[in, out]"]
    #[doc = " @param buffer - The buffer to decode[in]"]
    #[doc = " @param payload - The decoded payload[out]"]
    #[doc = ""]
    #[doc = " @return return error code"]
    pub fn mam_msg_read_packet(
        ctx: *mut mam_msg_read_context_t,
        buffer: *mut trits_t,
        payload: *mut trits_t,
    ) -> retcode_t;
}
extern "C" {
    #[doc = " Gets the size for serialization of mam_msg_write_context_t"]
    #[doc = ""]
    #[doc = " @param ctx - The context[in]"]
    #[doc = ""]
    #[doc = " @return return the size"]
    pub fn mam_msg_write_ctx_serialized_size(ctx: *const mam_msg_write_context_t) -> usize;
}
extern "C" {
    #[doc = " Serializes a mam_msg_write_context_t into buffer"]
    #[doc = ""]
    #[doc = " @param ctx - The context[in]"]
    #[doc = " @param buffer - The buffer[out]"]
    #[doc = ""]
    #[doc = " @return return error code"]
    pub fn mam_msg_write_ctx_serialize(ctx: *const mam_msg_write_context_t, buffer: *mut trits_t);
}
extern "C" {
    #[doc = " Deserializes a mam_msg_write_context_t from buffer"]
    #[doc = ""]
    #[doc = " @param buffer - The buffer[in]"]
    #[doc = " @param ctx - The context[in, out]"]
    #[doc = ""]
    #[doc = " @return return error code"]
    pub fn mam_msg_write_ctx_deserialize(
        buffer: *mut trits_t,
        ctx: *mut mam_msg_write_context_t,
        channels: mam_channel_t_set_t,
    ) -> retcode_t;
}
extern "C" {
    #[doc = " Gets the size for serialization of mam_msg_read_context_t"]
    #[doc = ""]
    #[doc = " @param ctx - The context[in]"]
    #[doc = ""]
    #[doc = " @return return the size"]
    pub fn mam_msg_read_ctx_serialized_size(ctx: *const mam_msg_read_context_t) -> usize;
}
extern "C" {
    #[doc = " Serializes a mam_msg_read_context_t into buffer"]
    #[doc = ""]
    #[doc = " @param ctx - The context[in]"]
    #[doc = " @param buffer - The buffer[out]"]
    #[doc = ""]
    #[doc = " @return return error code"]
    pub fn mam_msg_read_ctx_serialize(ctx: *const mam_msg_read_context_t, buffer: *mut trits_t);
}
extern "C" {
    #[doc = " Deserializes a mam_msg_read_context_t from buffer"]
    #[doc = ""]
    #[doc = " @param buffer - The buffer[in]"]
    #[doc = " @param ctx - The context[in, out]"]
    #[doc = ""]
    #[doc = " @return return error code"]
    pub fn mam_msg_read_ctx_deserialize(
        buffer: *mut trits_t,
        ctx: *mut mam_msg_read_context_t,
    ) -> retcode_t;
}
pub type byte_t = i8;
extern "C" {
    #[doc = " Packs an array of trits into byte (max 5 packed trits)"]
    #[doc = " @param[in] trits - An array of trits"]
    #[doc = " @param[in] num_trits - the number of trits to convert"]
    #[doc = " @return byte_t - the num_trits trits packed into a byte"]
    pub fn trits_to_byte(trits: *const trit_t, num_trits: usize) -> byte_t;
}
extern "C" {
    #[doc = " Packs an array of trits into an array of bytes"]
    #[doc = " @param[in] trits - An array of trits"]
    #[doc = " @param[in] cum - the accumulator, maybe be not 0"]
    #[doc = " @param[in] num_trits - the number of trits to convert"]
    #[doc = " @return byte_t - the num_trits trits packed into a byte"]
    pub fn trits_to_bytes(trits: *const trit_t, bytes: *mut byte_t, num_trits: usize);
}
extern "C" {
    #[doc = " Unpacks a byte into an array of trits"]
    #[doc = " @param[in] byte - A byte of packed trits"]
    #[doc = " @param[in] trits - An array of trits"]
    #[doc = " @param[in] num_trits - the number of trits to unpack (max 5)"]
    pub fn byte_to_trits(byte: byte_t, trits: *mut trit_t, num_trits: usize);
}
extern "C" {
    #[doc = " Unpacks an array of byte into an array of trits"]
    #[doc = " @param[in] bytes - An array bytes (packed trits)"]
    #[doc = " @param[in] n_bytes - the number of bytes in the array"]
    #[doc = " @param[in] trits - An array of trits"]
    #[doc = " @param[in] num_trits - the number of trits to unpack"]
    pub fn bytes_to_trits(
        bytes: *const byte_t,
        num_bytes: usize,
        trits: *mut trit_t,
        num_trits: usize,
    );
}
pub type flex_trit_t = i8;
extern "C" {
    #[doc = " Returns a portion of length num_trits of an array into a new array from"]
    #[doc = " start. The original array will not be modified."]
    #[doc = " @param[in] to_flex_trits - the array that will contain the slice"]
    #[doc = " @param[in] to_len - the number of trits encoded in the to_flex_trits array"]
    #[doc = " @param[in] flex_trits - the original array"]
    #[doc = " @param[in] len - the number of trits the flex_trits array stores"]
    #[doc = " @param[in] start - the start index in the original array"]
    #[doc = " @param[in] num_trits - the number of trits to extract"]
    #[doc = " @return size_t - the number of trits extracted"]
    pub fn flex_trits_slice(
        to_flex_trits: *mut flex_trit_t,
        to_len: usize,
        flex_trits: *const flex_trit_t,
        len: usize,
        start: usize,
        num_trits: usize,
    ) -> usize;
}
extern "C" {
    #[doc = " Inserts the contents of an array into another array starting at a given"]
    #[doc = " index."]
    #[doc = " @param[in] to_flex_trits - the array to insert into"]
    #[doc = " @param[in] to_len - the number of trits encoded in the to_flex_trits array"]
    #[doc = " @param[in] flex_trits - the array containing the trits to copy over"]
    #[doc = " @param[in] len - the number of trits the flex_trits array stores"]
    #[doc = " @param[in] start - the start index in the destination array"]
    #[doc = " @param[in] num_trits - the number of trits to copy over"]
    #[doc = " @return size_t - the number of trits copied over"]
    pub fn flex_trits_insert(
        to_flex_trits: *mut flex_trit_t,
        to_len: usize,
        flex_trits: *const flex_trit_t,
        len: usize,
        start: usize,
        num_trits: usize,
    ) -> usize;
}
extern "C" {
    #[doc = " Inserts the contents of an array into another array starting at a given"]
    #[doc = " index."]
    #[doc = " @param[in] dst_trits - the array to insert into"]
    #[doc = " @param[in] dst_len - the number of trits encoded in the to_flex_trits array"]
    #[doc = " @param[in] src_trits - the array containing the trits to copy over"]
    #[doc = " @param[in] src_len - the number of trits the flex_trits array stores"]
    #[doc = " @param[in] src_start_pos - the start index on the source array"]
    #[doc = " @param[in] dst_start_pos - the start index on the destination array"]
    #[doc = " @param[in] num_trits - the number of trits to copy over"]
    #[doc = " @return size_t - the number of trits copied over"]
    pub fn flex_trits_insert_from_pos(
        dst_trits: *mut flex_trit_t,
        dst_len: usize,
        src_trits: *const flex_trit_t,
        src_len: usize,
        src_start_pos: usize,
        dst_start_pos: usize,
        num_trits: usize,
    ) -> usize;
}
extern "C" {
    #[doc = " Returns an array of trits regardless of the current memory storage"]
    #[doc = " scheme"]
    #[doc = " @param[in] trits - an array of individual trits"]
    #[doc = " @param[in] to_len - the number of trits the trits array contains"]
    #[doc = " @param[in] flex_trits - the array of packed trits"]
    #[doc = " @param[in] len - the number of trits the flex_trits array stores"]
    #[doc = " @param[in] num_trits - the number of trits to extract"]
    #[doc = " @return size_t - the number of trits encoded"]
    pub fn flex_trits_to_trits(
        trits: *mut trit_t,
        to_len: usize,
        flex_trits: *const flex_trit_t,
        len: usize,
        num_trits: usize,
    ) -> usize;
}
extern "C" {
    #[doc = " Returns an array of trits packed in the current memory storage scheme"]
    #[doc = " @param[in] to_flex_trits - an array of flex_trits"]
    #[doc = " @param[in] to_len - the number of trits encoded in the to_flex_trits array"]
    #[doc = " @param[in] trits - an array of individual trits"]
    #[doc = " @param[in] len - the number of trits the trits array contains"]
    #[doc = " @param[in] num_trits - the number of trits to pack"]
    #[doc = " @return size_t - the number of trits decoded"]
    pub fn flex_trits_from_trits(
        to_flex_trits: *mut flex_trit_t,
        to_len: usize,
        trits: *const trit_t,
        len: usize,
        num_trits: usize,
    ) -> usize;
}
extern "C" {
    #[doc = " Returns an array of trytes."]
    #[doc = " @param[in] trytes - an array to store trytes"]
    #[doc = " @param[in] to_len - the number of trytes the trytes array contains"]
    #[doc = " @param[in] flex_trits - the array of packed trits"]
    #[doc = " @param[in] len - the number of trits the flex_trits array contains"]
    #[doc = " @param[in] num_trits - the number of trits to pack"]
    #[doc = " @return size_t - the number of trits encoded"]
    pub fn flex_trits_to_trytes(
        trytes: *mut tryte_t,
        to_len: usize,
        flex_trits: *const flex_trit_t,
        len: usize,
        num_trits: usize,
    ) -> usize;
}
extern "C" {
    #[doc = " Returns an array of flex_trits."]
    #[doc = " @param[in] to_flex_trits - the array of packed trits"]
    #[doc = " @param[in] to_len - the number of trits in the to_flex_trits array"]
    #[doc = " @param[in] trytes - an array of trytes"]
    #[doc = " @param[in] len - the number of trytes in the trytes array"]
    #[doc = " @param[in] num_trytes - the size of trytes to unpack"]
    #[doc = " @return size_t - the number of trytes decoded"]
    pub fn flex_trits_from_trytes(
        to_flex_trits: *mut flex_trit_t,
        to_len: usize,
        trytes: *const tryte_t,
        len: usize,
        num_trytes: usize,
    ) -> usize;
}
extern "C" {
    #[doc = " Returns an array of bytes."]
    #[doc = " @param[in] bytes - an array to store bytes"]
    #[doc = " @param[in] to_len - the number of trits the bytes array contains"]
    #[doc = " @param[in] flex_trits - the array of packed trits"]
    #[doc = " @param[in] len - the number of trits the flex_trits array contains"]
    #[doc = " @param[in] num_trits - the number of trits to pack"]
    #[doc = " @return size_t - the number of trits encoded"]
    pub fn flex_trits_to_bytes(
        bytes: *mut byte_t,
        to_len: usize,
        flex_trits: *const flex_trit_t,
        len: usize,
        num_trits: usize,
    ) -> usize;
}
extern "C" {
    #[doc = " Returns an array of flex_trits."]
    #[doc = " @param[in] to_flex_trits - the array of packed trits"]
    #[doc = " @param[in] to_len - the number of trits in the to_flex_trits array"]
    #[doc = " @param[in] bytes - an array of bytes"]
    #[doc = " @param[in] len - the number of trits in the bytes array"]
    #[doc = " @param[in] num_trits - the number of trits to unpack"]
    #[doc = " @return size_t - the number of trits decoded"]
    pub fn flex_trits_from_bytes(
        to_flex_trits: *mut flex_trit_t,
        to_len: usize,
        bytes: *const byte_t,
        len: usize,
        num_trits: usize,
    ) -> usize;
}
extern "C" {
    pub fn normalize_hash_to_trits(hash: *const trit_t, normalized_hash: *mut trit_t);
}
extern "C" {
    pub fn normalize_flex_hash(hash: *const flex_trit_t, normalized_hash: *mut byte_t);
}
extern "C" {
    pub fn normalize_flex_hash_to_trits(hash: *const flex_trit_t, normalized_hash: *mut trit_t);
}
extern "C" {
    pub fn KeccakP1600_Initialize(state: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn KeccakP1600_AddByte(
        state: *mut ::std::os::raw::c_void,
        data: ::std::os::raw::c_uchar,
        offset: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn KeccakP1600_AddBytes(
        state: *mut ::std::os::raw::c_void,
        data: *const ::std::os::raw::c_uchar,
        offset: ::std::os::raw::c_uint,
        length: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn KeccakP1600_OverwriteBytes(
        state: *mut ::std::os::raw::c_void,
        data: *const ::std::os::raw::c_uchar,
        offset: ::std::os::raw::c_uint,
        length: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn KeccakP1600_OverwriteWithZeroes(
        state: *mut ::std::os::raw::c_void,
        byteCount: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn KeccakP1600_Permute_Nrounds(
        state: *mut ::std::os::raw::c_void,
        nrounds: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn KeccakP1600_Permute_12rounds(state: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn KeccakP1600_Permute_24rounds(state: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn KeccakP1600_ExtractBytes(
        state: *const ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_uchar,
        offset: ::std::os::raw::c_uint,
        length: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn KeccakP1600_ExtractAndAddBytes(
        state: *const ::std::os::raw::c_void,
        input: *const ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
        offset: ::std::os::raw::c_uint,
        length: ::std::os::raw::c_uint,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct KeccakWidth1600_SpongeInstanceStruct {
    pub state: [::std::os::raw::c_uchar; 200usize],
    pub rate: ::std::os::raw::c_uint,
    pub byteIOIndex: ::std::os::raw::c_uint,
    pub squeezing: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_KeccakWidth1600_SpongeInstanceStruct() {
    assert_eq!(
        ::std::mem::size_of::<KeccakWidth1600_SpongeInstanceStruct>(),
        212usize,
        concat!(
            "Size of: ",
            stringify!(KeccakWidth1600_SpongeInstanceStruct)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<KeccakWidth1600_SpongeInstanceStruct>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(KeccakWidth1600_SpongeInstanceStruct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<KeccakWidth1600_SpongeInstanceStruct>())).state as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(KeccakWidth1600_SpongeInstanceStruct),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<KeccakWidth1600_SpongeInstanceStruct>())).rate as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(KeccakWidth1600_SpongeInstanceStruct),
            "::",
            stringify!(rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<KeccakWidth1600_SpongeInstanceStruct>())).byteIOIndex as *const _
                as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(KeccakWidth1600_SpongeInstanceStruct),
            "::",
            stringify!(byteIOIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<KeccakWidth1600_SpongeInstanceStruct>())).squeezing as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(KeccakWidth1600_SpongeInstanceStruct),
            "::",
            stringify!(squeezing)
        )
    );
}
pub type KeccakWidth1600_SpongeInstance = KeccakWidth1600_SpongeInstanceStruct;
extern "C" {
    pub fn KeccakWidth1600_Sponge(
        rate: ::std::os::raw::c_uint,
        capacity: ::std::os::raw::c_uint,
        input: *const ::std::os::raw::c_uchar,
        inputByteLen: usize,
        suffix: ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
        outputByteLen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn KeccakWidth1600_SpongeInitialize(
        spongeInstance: *mut KeccakWidth1600_SpongeInstance,
        rate: ::std::os::raw::c_uint,
        capacity: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn KeccakWidth1600_SpongeAbsorb(
        spongeInstance: *mut KeccakWidth1600_SpongeInstance,
        data: *const ::std::os::raw::c_uchar,
        dataByteLen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn KeccakWidth1600_SpongeAbsorbLastFewBits(
        spongeInstance: *mut KeccakWidth1600_SpongeInstance,
        delimitedData: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn KeccakWidth1600_SpongeSqueeze(
        spongeInstance: *mut KeccakWidth1600_SpongeInstance,
        data: *mut ::std::os::raw::c_uchar,
        dataByteLen: usize,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct KeccakWidth1600_12rounds_SpongeInstanceStruct {
    pub state: [::std::os::raw::c_uchar; 200usize],
    pub rate: ::std::os::raw::c_uint,
    pub byteIOIndex: ::std::os::raw::c_uint,
    pub squeezing: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_KeccakWidth1600_12rounds_SpongeInstanceStruct() {
    assert_eq!(
        ::std::mem::size_of::<KeccakWidth1600_12rounds_SpongeInstanceStruct>(),
        212usize,
        concat!(
            "Size of: ",
            stringify!(KeccakWidth1600_12rounds_SpongeInstanceStruct)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<KeccakWidth1600_12rounds_SpongeInstanceStruct>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(KeccakWidth1600_12rounds_SpongeInstanceStruct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<KeccakWidth1600_12rounds_SpongeInstanceStruct>())).state
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(KeccakWidth1600_12rounds_SpongeInstanceStruct),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<KeccakWidth1600_12rounds_SpongeInstanceStruct>())).rate
                as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(KeccakWidth1600_12rounds_SpongeInstanceStruct),
            "::",
            stringify!(rate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<KeccakWidth1600_12rounds_SpongeInstanceStruct>())).byteIOIndex
                as *const _ as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(KeccakWidth1600_12rounds_SpongeInstanceStruct),
            "::",
            stringify!(byteIOIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<KeccakWidth1600_12rounds_SpongeInstanceStruct>())).squeezing
                as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(KeccakWidth1600_12rounds_SpongeInstanceStruct),
            "::",
            stringify!(squeezing)
        )
    );
}
pub type KeccakWidth1600_12rounds_SpongeInstance = KeccakWidth1600_12rounds_SpongeInstanceStruct;
extern "C" {
    pub fn KeccakWidth1600_12rounds_Sponge(
        rate: ::std::os::raw::c_uint,
        capacity: ::std::os::raw::c_uint,
        input: *const ::std::os::raw::c_uchar,
        inputByteLen: usize,
        suffix: ::std::os::raw::c_uchar,
        output: *mut ::std::os::raw::c_uchar,
        outputByteLen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn KeccakWidth1600_12rounds_SpongeInitialize(
        spongeInstance: *mut KeccakWidth1600_12rounds_SpongeInstance,
        rate: ::std::os::raw::c_uint,
        capacity: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn KeccakWidth1600_12rounds_SpongeAbsorb(
        spongeInstance: *mut KeccakWidth1600_12rounds_SpongeInstance,
        data: *const ::std::os::raw::c_uchar,
        dataByteLen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn KeccakWidth1600_12rounds_SpongeAbsorbLastFewBits(
        spongeInstance: *mut KeccakWidth1600_12rounds_SpongeInstance,
        delimitedData: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn KeccakWidth1600_12rounds_SpongeSqueeze(
        spongeInstance: *mut KeccakWidth1600_12rounds_SpongeInstance,
        data: *mut ::std::os::raw::c_uchar,
        dataByteLen: usize,
    ) -> ::std::os::raw::c_int;
}
pub type BitSequence = ::std::os::raw::c_uchar;
pub type BitLength = usize;
pub const HashReturn_SUCCESS: HashReturn = 0;
pub const HashReturn_FAIL: HashReturn = 1;
pub const HashReturn_BAD_HASHLEN: HashReturn = 2;
pub type HashReturn = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Keccak_HashInstance {
    pub sponge: KeccakWidth1600_SpongeInstance,
    pub fixedOutputLength: ::std::os::raw::c_uint,
    pub delimitedSuffix: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_Keccak_HashInstance() {
    assert_eq!(
        ::std::mem::size_of::<Keccak_HashInstance>(),
        224usize,
        concat!("Size of: ", stringify!(Keccak_HashInstance))
    );
    assert_eq!(
        ::std::mem::align_of::<Keccak_HashInstance>(),
        8usize,
        concat!("Alignment of ", stringify!(Keccak_HashInstance))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Keccak_HashInstance>())).sponge as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Keccak_HashInstance),
            "::",
            stringify!(sponge)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Keccak_HashInstance>())).fixedOutputLength as *const _ as usize
        },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(Keccak_HashInstance),
            "::",
            stringify!(fixedOutputLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Keccak_HashInstance>())).delimitedSuffix as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(Keccak_HashInstance),
            "::",
            stringify!(delimitedSuffix)
        )
    );
}
extern "C" {
    #[doc = " Function to initialize the Keccak[r, c] sponge function instance used in sequential hashing mode."]
    #[doc = " @param  hashInstance    Pointer to the hash instance to be initialized."]
    #[doc = " @param  rate        The value of the rate r."]
    #[doc = " @param  capacity    The value of the capacity c."]
    #[doc = " @param  hashbitlen  The desired number of output bits,"]
    #[doc = "                     or 0 for an arbitrarily-long output."]
    #[doc = " @param  delimitedSuffix Bits that will be automatically appended to the end"]
    #[doc = "                         of the input message, as in domain separation."]
    #[doc = "                         This is a byte containing from 0 to 7 bits"]
    #[doc = "                         formatted like the @a delimitedData parameter of"]
    #[doc = "                         the Keccak_SpongeAbsorbLastFewBits() function."]
    #[doc = " @pre    One must have r+c=1600 and the rate a multiple of 8 bits in this implementation."]
    #[doc = " @return SUCCESS if successful, FAIL otherwise."]
    pub fn Keccak_HashInitialize(
        hashInstance: *mut Keccak_HashInstance,
        rate: ::std::os::raw::c_uint,
        capacity: ::std::os::raw::c_uint,
        hashbitlen: ::std::os::raw::c_uint,
        delimitedSuffix: ::std::os::raw::c_uchar,
    ) -> HashReturn;
}
extern "C" {
    #[doc = " Function to give input data to be absorbed."]
    #[doc = " @param  hashInstance    Pointer to the hash instance initialized by Keccak_HashInitialize()."]
    #[doc = " @param  data        Pointer to the input data."]
    #[doc = "                     When @a databitLen is not a multiple of 8, the last bits of data must be"]
    #[doc = "                     in the least significant bits of the last byte (little-endian convention)."]
    #[doc = "                     In this case, the (8 - @a databitLen mod 8) most significant bits"]
    #[doc = "                     of the last byte are ignored."]
    #[doc = " @param  databitLen  The number of input bits provided in the input data."]
    #[doc = " @pre    In the previous call to Keccak_HashUpdate(), databitlen was a multiple of 8."]
    #[doc = " @return SUCCESS if successful, FAIL otherwise."]
    pub fn Keccak_HashUpdate(
        hashInstance: *mut Keccak_HashInstance,
        data: *const BitSequence,
        databitlen: BitLength,
    ) -> HashReturn;
}
extern "C" {
    #[doc = " Function to call after all input blocks have been input and to get"]
    #[doc = " output bits if the length was specified when calling Keccak_HashInitialize()."]
    #[doc = " @param  hashInstance    Pointer to the hash instance initialized by Keccak_HashInitialize()."]
    #[doc = " If @a hashbitlen was not 0 in the call to Keccak_HashInitialize(), the number of"]
    #[doc = "     output bits is equal to @a hashbitlen."]
    #[doc = " If @a hashbitlen was 0 in the call to Keccak_HashInitialize(), the output bits"]
    #[doc = "     must be extracted using the Keccak_HashSqueeze() function."]
    #[doc = " @param  hashval     Pointer to the buffer where to store the output data."]
    #[doc = " @return SUCCESS if successful, FAIL otherwise."]
    pub fn Keccak_HashFinal(
        hashInstance: *mut Keccak_HashInstance,
        hashval: *mut BitSequence,
    ) -> HashReturn;
}
extern "C" {
    #[doc = " Function to squeeze output data."]
    #[doc = " @param  hashInstance    Pointer to the hash instance initialized by Keccak_HashInitialize()."]
    #[doc = " @param  data        Pointer to the buffer where to store the output data."]
    #[doc = " @param  databitlen  The number of output bits desired (must be a multiple of 8)."]
    #[doc = " @pre    Keccak_HashFinal() must have been already called."]
    #[doc = " @pre    @a databitlen is a multiple of 8."]
    #[doc = " @return SUCCESS if successful, FAIL otherwise."]
    pub fn Keccak_HashSqueeze(
        hashInstance: *mut Keccak_HashInstance,
        data: *mut BitSequence,
        databitlen: BitLength,
    ) -> HashReturn;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Kerl {
    pub keccak: Keccak_HashInstance,
}
#[test]
fn bindgen_test_layout_Kerl() {
    assert_eq!(
        ::std::mem::size_of::<Kerl>(),
        224usize,
        concat!("Size of: ", stringify!(Kerl))
    );
    assert_eq!(
        ::std::mem::align_of::<Kerl>(),
        8usize,
        concat!("Alignment of ", stringify!(Kerl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Kerl>())).keccak as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Kerl),
            "::",
            stringify!(keccak)
        )
    );
}
extern "C" {
    pub fn kerl_init(ctx: *mut Kerl);
}
extern "C" {
    pub fn kerl_absorb(ctx: *mut Kerl, trits: *const trit_t, length: usize);
}
extern "C" {
    pub fn kerl_squeeze(ctx: *mut Kerl, trits: *mut trit_t, length: usize);
}
extern "C" {
    pub fn kerl_reset(ctx: *mut Kerl);
}
pub type ctor_f = ::std::option::Option<
    unsafe extern "C" fn(dst: *mut ::std::os::raw::c_void, src: *const ::std::os::raw::c_void),
>;
pub type dtor_f = ::std::option::Option<unsafe extern "C" fn(elt: *mut ::std::os::raw::c_void)>;
pub type init_f = ::std::option::Option<unsafe extern "C" fn(elt: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UT_icd {
    pub sz: usize,
    pub init: init_f,
    pub copy: ctor_f,
    pub dtor: dtor_f,
}
#[test]
fn bindgen_test_layout_UT_icd() {
    assert_eq!(
        ::std::mem::size_of::<UT_icd>(),
        32usize,
        concat!("Size of: ", stringify!(UT_icd))
    );
    assert_eq!(
        ::std::mem::align_of::<UT_icd>(),
        8usize,
        concat!("Alignment of ", stringify!(UT_icd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_icd>())).sz as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_icd),
            "::",
            stringify!(sz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_icd>())).init as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_icd),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_icd>())).copy as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_icd),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_icd>())).dtor as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_icd),
            "::",
            stringify!(dtor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UT_array {
    pub i: ::std::os::raw::c_uint,
    pub n: ::std::os::raw::c_uint,
    pub icd: UT_icd,
    pub d: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_UT_array() {
    assert_eq!(
        ::std::mem::size_of::<UT_array>(),
        48usize,
        concat!("Size of: ", stringify!(UT_array))
    );
    assert_eq!(
        ::std::mem::align_of::<UT_array>(),
        8usize,
        concat!("Alignment of ", stringify!(UT_array))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_array>())).i as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_array),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_array>())).n as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_array),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_array>())).icd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_array),
            "::",
            stringify!(icd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UT_array>())).d as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(UT_array),
            "::",
            stringify!(d)
        )
    );
}
extern "C" {
    pub static ut_str_icd: UT_icd;
}
extern "C" {
    pub static ut_int_icd: UT_icd;
}
extern "C" {
    pub static ut_ptr_icd: UT_icd;
}
#[doc = " Transaction data structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iota_transaction_fields_essence_s {
    pub address: [flex_trit_t; 243usize],
    pub value: i64,
    pub obsolete_tag: [flex_trit_t; 81usize],
    pub timestamp: u64,
    pub current_index: i64,
    pub last_index: i64,
    pub bundle: [flex_trit_t; 243usize],
}
#[test]
fn bindgen_test_layout_iota_transaction_fields_essence_s() {
    assert_eq!(
        ::std::mem::size_of::<iota_transaction_fields_essence_s>(),
        616usize,
        concat!("Size of: ", stringify!(iota_transaction_fields_essence_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iota_transaction_fields_essence_s>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iota_transaction_fields_essence_s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iota_transaction_fields_essence_s>())).address as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iota_transaction_fields_essence_s),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iota_transaction_fields_essence_s>())).value as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(iota_transaction_fields_essence_s),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iota_transaction_fields_essence_s>())).obsolete_tag as *const _
                as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(iota_transaction_fields_essence_s),
            "::",
            stringify!(obsolete_tag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iota_transaction_fields_essence_s>())).timestamp as *const _
                as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(iota_transaction_fields_essence_s),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iota_transaction_fields_essence_s>())).current_index as *const _
                as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(iota_transaction_fields_essence_s),
            "::",
            stringify!(current_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iota_transaction_fields_essence_s>())).last_index as *const _
                as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(iota_transaction_fields_essence_s),
            "::",
            stringify!(last_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iota_transaction_fields_essence_s>())).bundle as *const _
                as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(iota_transaction_fields_essence_s),
            "::",
            stringify!(bundle)
        )
    );
}
pub type iota_transaction_fields_essence_t = iota_transaction_fields_essence_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iota_transaction_fields_attachment_s {
    pub trunk: [flex_trit_t; 243usize],
    pub branch: [flex_trit_t; 243usize],
    pub attachment_timestamp: u64,
    pub attachment_timestamp_lower: u64,
    pub attachment_timestamp_upper: u64,
    pub nonce: [flex_trit_t; 81usize],
    pub tag: [flex_trit_t; 81usize],
}
#[test]
fn bindgen_test_layout_iota_transaction_fields_attachment_s() {
    assert_eq!(
        ::std::mem::size_of::<iota_transaction_fields_attachment_s>(),
        680usize,
        concat!(
            "Size of: ",
            stringify!(iota_transaction_fields_attachment_s)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iota_transaction_fields_attachment_s>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iota_transaction_fields_attachment_s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iota_transaction_fields_attachment_s>())).trunk as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iota_transaction_fields_attachment_s),
            "::",
            stringify!(trunk)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iota_transaction_fields_attachment_s>())).branch as *const _
                as usize
        },
        243usize,
        concat!(
            "Offset of field: ",
            stringify!(iota_transaction_fields_attachment_s),
            "::",
            stringify!(branch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iota_transaction_fields_attachment_s>())).attachment_timestamp
                as *const _ as usize
        },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(iota_transaction_fields_attachment_s),
            "::",
            stringify!(attachment_timestamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iota_transaction_fields_attachment_s>()))
                .attachment_timestamp_lower as *const _ as usize
        },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(iota_transaction_fields_attachment_s),
            "::",
            stringify!(attachment_timestamp_lower)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iota_transaction_fields_attachment_s>()))
                .attachment_timestamp_upper as *const _ as usize
        },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(iota_transaction_fields_attachment_s),
            "::",
            stringify!(attachment_timestamp_upper)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iota_transaction_fields_attachment_s>())).nonce as *const _
                as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(iota_transaction_fields_attachment_s),
            "::",
            stringify!(nonce)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iota_transaction_fields_attachment_s>())).tag as *const _
                as usize
        },
        593usize,
        concat!(
            "Offset of field: ",
            stringify!(iota_transaction_fields_attachment_s),
            "::",
            stringify!(tag)
        )
    );
}
pub type iota_transaction_fields_attachment_t = iota_transaction_fields_attachment_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iota_transaction_fields_consensus_s {
    pub hash: [flex_trit_t; 243usize],
}
#[test]
fn bindgen_test_layout_iota_transaction_fields_consensus_s() {
    assert_eq!(
        ::std::mem::size_of::<iota_transaction_fields_consensus_s>(),
        243usize,
        concat!("Size of: ", stringify!(iota_transaction_fields_consensus_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iota_transaction_fields_consensus_s>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(iota_transaction_fields_consensus_s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iota_transaction_fields_consensus_s>())).hash as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iota_transaction_fields_consensus_s),
            "::",
            stringify!(hash)
        )
    );
}
pub type iota_transaction_fields_consensus_t = iota_transaction_fields_consensus_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iota_transaction_fields_data_s {
    pub signature_or_message: [flex_trit_t; 6561usize],
}
#[test]
fn bindgen_test_layout_iota_transaction_fields_data_s() {
    assert_eq!(
        ::std::mem::size_of::<iota_transaction_fields_data_s>(),
        6561usize,
        concat!("Size of: ", stringify!(iota_transaction_fields_data_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iota_transaction_fields_data_s>(),
        1usize,
        concat!("Alignment of ", stringify!(iota_transaction_fields_data_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iota_transaction_fields_data_s>())).signature_or_message
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iota_transaction_fields_data_s),
            "::",
            stringify!(signature_or_message)
        )
    );
}
pub type iota_transaction_fields_data_t = iota_transaction_fields_data_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iota_transaction_fields_metadata_s {
    pub snapshot_index: u64,
    pub solid: bool,
    pub validity: u8,
    pub arrival_timestamp: u64,
}
#[test]
fn bindgen_test_layout_iota_transaction_fields_metadata_s() {
    assert_eq!(
        ::std::mem::size_of::<iota_transaction_fields_metadata_s>(),
        24usize,
        concat!("Size of: ", stringify!(iota_transaction_fields_metadata_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iota_transaction_fields_metadata_s>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iota_transaction_fields_metadata_s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iota_transaction_fields_metadata_s>())).snapshot_index
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iota_transaction_fields_metadata_s),
            "::",
            stringify!(snapshot_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iota_transaction_fields_metadata_s>())).solid as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iota_transaction_fields_metadata_s),
            "::",
            stringify!(solid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iota_transaction_fields_metadata_s>())).validity as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(iota_transaction_fields_metadata_s),
            "::",
            stringify!(validity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iota_transaction_fields_metadata_s>())).arrival_timestamp
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(iota_transaction_fields_metadata_s),
            "::",
            stringify!(arrival_timestamp)
        )
    );
}
pub type iota_transaction_fields_metadata_t = iota_transaction_fields_metadata_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct field_mask_s {
    pub essence: u8,
    pub attachment: u8,
    pub consensus: u8,
    pub data: u8,
    pub metadata: u8,
}
#[test]
fn bindgen_test_layout_field_mask_s() {
    assert_eq!(
        ::std::mem::size_of::<field_mask_s>(),
        5usize,
        concat!("Size of: ", stringify!(field_mask_s))
    );
    assert_eq!(
        ::std::mem::align_of::<field_mask_s>(),
        1usize,
        concat!("Alignment of ", stringify!(field_mask_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<field_mask_s>())).essence as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(field_mask_s),
            "::",
            stringify!(essence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<field_mask_s>())).attachment as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(field_mask_s),
            "::",
            stringify!(attachment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<field_mask_s>())).consensus as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(field_mask_s),
            "::",
            stringify!(consensus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<field_mask_s>())).data as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(field_mask_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<field_mask_s>())).metadata as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(field_mask_s),
            "::",
            stringify!(metadata)
        )
    );
}
pub type field_mask_t = field_mask_s;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iota_transaction_s {
    pub essence: iota_transaction_fields_essence_t,
    pub attachment: iota_transaction_fields_attachment_t,
    pub consensus: iota_transaction_fields_consensus_t,
    pub data: iota_transaction_fields_data_t,
    pub metadata: iota_transaction_fields_metadata_t,
    pub loaded_columns_mask: field_mask_t,
}
#[test]
fn bindgen_test_layout_iota_transaction_s() {
    assert_eq!(
        ::std::mem::size_of::<iota_transaction_s>(),
        8136usize,
        concat!("Size of: ", stringify!(iota_transaction_s))
    );
    assert_eq!(
        ::std::mem::align_of::<iota_transaction_s>(),
        8usize,
        concat!("Alignment of ", stringify!(iota_transaction_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iota_transaction_s>())).essence as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iota_transaction_s),
            "::",
            stringify!(essence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iota_transaction_s>())).attachment as *const _ as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(iota_transaction_s),
            "::",
            stringify!(attachment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iota_transaction_s>())).consensus as *const _ as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(iota_transaction_s),
            "::",
            stringify!(consensus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iota_transaction_s>())).data as *const _ as usize },
        1539usize,
        concat!(
            "Offset of field: ",
            stringify!(iota_transaction_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iota_transaction_s>())).metadata as *const _ as usize },
        8104usize,
        concat!(
            "Offset of field: ",
            stringify!(iota_transaction_s),
            "::",
            stringify!(metadata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iota_transaction_s>())).loaded_columns_mask as *const _ as usize
        },
        8128usize,
        concat!(
            "Offset of field: ",
            stringify!(iota_transaction_s),
            "::",
            stringify!(loaded_columns_mask)
        )
    );
}
pub type iota_transaction_t = iota_transaction_s;
pub const field_mask_essence_e_MASK_ESSENCE_ADDRESS: field_mask_essence_e = 1;
pub const field_mask_essence_e_MASK_ESSENCE_VALUE: field_mask_essence_e = 2;
pub const field_mask_essence_e_MASK_ESSENCE_OBSOLETE_TAG: field_mask_essence_e = 4;
pub const field_mask_essence_e_MASK_ESSENCE_TIMESTAMP: field_mask_essence_e = 8;
pub const field_mask_essence_e_MASK_ESSENCE_CURRENT_INDEX: field_mask_essence_e = 16;
pub const field_mask_essence_e_MASK_ESSENCE_LAST_INDEX: field_mask_essence_e = 32;
pub const field_mask_essence_e_MASK_ESSENCE_BUNDLE: field_mask_essence_e = 64;
pub const field_mask_essence_e_MASK_ESSENCE_ALL: field_mask_essence_e = 127;
pub type field_mask_essence_e = u32;
pub use self::field_mask_essence_e as field_mask_essence_t;
pub const field_mask_attachment_e_MASK_ATTACHMENT_TRUNK: field_mask_attachment_e = 1;
pub const field_mask_attachment_e_MASK_ATTACHMENT_BRANCH: field_mask_attachment_e = 2;
pub const field_mask_attachment_e_MASK_ATTACHMENT_TIMESTAMP: field_mask_attachment_e = 4;
pub const field_mask_attachment_e_MASK_ATTACHMENT_TIMESTAMP_LOWER: field_mask_attachment_e = 8;
pub const field_mask_attachment_e_MASK_ATTACHMENT_TIMESTAMP_UPPER: field_mask_attachment_e = 16;
pub const field_mask_attachment_e_MASK_ATTACHMENT_NONCE: field_mask_attachment_e = 32;
pub const field_mask_attachment_e_MASK_ATTACHMENT_TAG: field_mask_attachment_e = 64;
pub const field_mask_attachment_e_MASK_ATTACHMENT_ALL: field_mask_attachment_e = 127;
pub type field_mask_attachment_e = u32;
pub use self::field_mask_attachment_e as field_mask_attachment_t;
pub const field_mask_consensus_e_MASK_CONSENSUS_HASH: field_mask_consensus_e = 1;
pub const field_mask_consensus_e_MASK_CONSENSUS_ALL: field_mask_consensus_e = 1;
pub type field_mask_consensus_e = u32;
pub use self::field_mask_consensus_e as field_mask_consensus_t;
pub const field_mask_data_e_MASK_DATA_SIG_OR_MSG: field_mask_data_e = 1;
pub const field_mask_data_e_MASK_DATA_ALL: field_mask_data_e = 1;
pub type field_mask_data_e = u32;
pub use self::field_mask_data_e as field_mask_data_t;
pub const field_mask_metadata_e_MASK_METADATA_SNAPSHOT_INDEX: field_mask_metadata_e = 1;
pub const field_mask_metadata_e_MASK_METADATA_SOLID: field_mask_metadata_e = 2;
pub const field_mask_metadata_e_MASK_METADATA_VALIDITY: field_mask_metadata_e = 4;
pub const field_mask_metadata_e_MASK_METADATA_ARRIVAL_TIMESTAMP: field_mask_metadata_e = 8;
pub const field_mask_metadata_e_MASK_METADATA_ALL: field_mask_metadata_e = 15;
pub type field_mask_metadata_e = u32;
pub use self::field_mask_metadata_e as field_mask_metadata_t;
extern "C" {
    #[doc = " Utility functions"]
    pub fn transaction_reset(transaction: *mut iota_transaction_t);
}
extern "C" {
    pub fn transaction_weight_magnitude(transaction: *const iota_transaction_t) -> u8;
}
extern "C" {
    #[doc = " Constructors"]
    pub fn transaction_new() -> *mut iota_transaction_t;
}
extern "C" {
    pub fn transaction_deserialize(
        trits: *const flex_trit_t,
        compute_hash: bool,
    ) -> *mut iota_transaction_t;
}
extern "C" {
    #[doc = " Serialization"]
    pub fn transaction_serialize(transaction: *const iota_transaction_t) -> *mut flex_trit_t;
}
extern "C" {
    pub fn transaction_serialize_on_flex_trits(
        transaction: *const iota_transaction_t,
        trits: *mut flex_trit_t,
    ) -> usize;
}
extern "C" {
    #[doc = " Deserialization"]
    pub fn transaction_deserialize_from_trits(
        transaction: *mut iota_transaction_t,
        trits: *const flex_trit_t,
        compute_hash: bool,
    ) -> usize;
}
extern "C" {
    #[doc = " Destructor"]
    pub fn transaction_free(transaction: *mut iota_transaction_t);
}
pub type transaction_array_t = UT_array;
extern "C" {
    pub static ut_transactions_icd: UT_icd;
}
pub const bundle_status_e_BUNDLE_NOT_INITIALIZED: bundle_status_e = 0;
pub const bundle_status_e_BUNDLE_VALID: bundle_status_e = 1;
pub const bundle_status_e_BUNDLE_EMPTY: bundle_status_e = 2;
pub const bundle_status_e_BUNDLE_INCOMPLETE: bundle_status_e = 3;
pub const bundle_status_e_BUNDLE_INVALID_TX: bundle_status_e = 4;
pub const bundle_status_e_BUNDLE_INVALID_INPUT_ADDRESS: bundle_status_e = 5;
pub const bundle_status_e_BUNDLE_INVALID_VALUE: bundle_status_e = 6;
pub const bundle_status_e_BUNDLE_INVALID_HASH: bundle_status_e = 7;
pub const bundle_status_e_BUNDLE_INVALID_SIGNATURE: bundle_status_e = 8;
pub type bundle_status_e = u32;
pub use self::bundle_status_e as bundle_status_t;
pub type bundle_transactions_t = UT_array;
pub type bundle_hashes_t = UT_array;
extern "C" {
    pub fn bundle_transactions_new(bundle: *mut *mut bundle_transactions_t);
}
extern "C" {
    pub fn bundle_transactions_free(bundle: *mut *mut bundle_transactions_t);
}
extern "C" {
    pub fn bundle_transactions_add(
        bundle: *mut bundle_transactions_t,
        transaction: *const iota_transaction_t,
    );
}
extern "C" {
    pub fn bundle_calculate_hash(
        bundle: *mut bundle_transactions_t,
        kerl: *mut Kerl,
        out: *mut flex_trit_t,
    );
}
extern "C" {
    pub fn bundle_finalize(bundle: *mut bundle_transactions_t, kerl: *mut Kerl);
}
extern "C" {
    pub fn bundle_validate(
        bundle: *mut bundle_transactions_t,
        status: *mut bundle_status_t,
    ) -> retcode_t;
}
extern "C" {
    pub fn bundle_reset_indexes(bundle: *mut bundle_transactions_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct trit_t_to_mam_msg_read_context_t_map_entry_s {
    pub key: *mut trit_t,
    pub value: *mut mam_msg_read_context_t,
    pub hh: UT_hash_handle,
}
#[test]
fn bindgen_test_layout_trit_t_to_mam_msg_read_context_t_map_entry_s() {
    assert_eq!(
        ::std::mem::size_of::<trit_t_to_mam_msg_read_context_t_map_entry_s>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(trit_t_to_mam_msg_read_context_t_map_entry_s)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<trit_t_to_mam_msg_read_context_t_map_entry_s>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(trit_t_to_mam_msg_read_context_t_map_entry_s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<trit_t_to_mam_msg_read_context_t_map_entry_s>())).key as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(trit_t_to_mam_msg_read_context_t_map_entry_s),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<trit_t_to_mam_msg_read_context_t_map_entry_s>())).value
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(trit_t_to_mam_msg_read_context_t_map_entry_s),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<trit_t_to_mam_msg_read_context_t_map_entry_s>())).hh as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(trit_t_to_mam_msg_read_context_t_map_entry_s),
            "::",
            stringify!(hh)
        )
    );
}
pub type trit_t_to_mam_msg_read_context_t_map_entry_t =
    trit_t_to_mam_msg_read_context_t_map_entry_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct trit_t_to_mam_msg_read_context_t_map_s {
    pub key_size: usize,
    pub value_size: usize,
    pub map: *mut trit_t_to_mam_msg_read_context_t_map_entry_t,
}
#[test]
fn bindgen_test_layout_trit_t_to_mam_msg_read_context_t_map_s() {
    assert_eq!(
        ::std::mem::size_of::<trit_t_to_mam_msg_read_context_t_map_s>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(trit_t_to_mam_msg_read_context_t_map_s)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<trit_t_to_mam_msg_read_context_t_map_s>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(trit_t_to_mam_msg_read_context_t_map_s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<trit_t_to_mam_msg_read_context_t_map_s>())).key_size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(trit_t_to_mam_msg_read_context_t_map_s),
            "::",
            stringify!(key_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<trit_t_to_mam_msg_read_context_t_map_s>())).value_size
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(trit_t_to_mam_msg_read_context_t_map_s),
            "::",
            stringify!(value_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<trit_t_to_mam_msg_read_context_t_map_s>())).map as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(trit_t_to_mam_msg_read_context_t_map_s),
            "::",
            stringify!(map)
        )
    );
}
pub type trit_t_to_mam_msg_read_context_t_map_t = trit_t_to_mam_msg_read_context_t_map_s;
extern "C" {
    pub fn trit_t_to_mam_msg_read_context_t_map_init(
        map: *mut trit_t_to_mam_msg_read_context_t_map_t,
        key_size: usize,
        value_size: usize,
    ) -> retcode_t;
}
extern "C" {
    pub fn trit_t_to_mam_msg_read_context_t_map_size(
        map: *const trit_t_to_mam_msg_read_context_t_map_t,
    ) -> usize;
}
extern "C" {
    pub fn trit_t_to_mam_msg_read_context_t_map_add(
        map: *mut trit_t_to_mam_msg_read_context_t_map_t,
        key: *const trit_t,
        value: *const mam_msg_read_context_t,
    ) -> retcode_t;
}
extern "C" {
    pub fn trit_t_to_mam_msg_read_context_t_map_contains(
        map: *const trit_t_to_mam_msg_read_context_t_map_t,
        key: *const trit_t,
    ) -> bool;
}
extern "C" {
    pub fn trit_t_to_mam_msg_read_context_t_map_find(
        map: *const trit_t_to_mam_msg_read_context_t_map_t,
        key: *const trit_t,
        res: *mut *mut trit_t_to_mam_msg_read_context_t_map_entry_t,
    ) -> bool;
}
extern "C" {
    pub fn trit_t_to_mam_msg_read_context_t_map_free(
        map: *mut trit_t_to_mam_msg_read_context_t_map_t,
    ) -> retcode_t;
}
extern "C" {
    pub fn trit_t_to_mam_msg_read_context_t_map_cmp(
        lhs: *const trit_t_to_mam_msg_read_context_t_map_t,
        rhs: *const trit_t_to_mam_msg_read_context_t_map_t,
    ) -> bool;
}
extern "C" {
    pub fn trit_t_to_mam_msg_read_context_t_map_remove(
        map: *mut trit_t_to_mam_msg_read_context_t_map_t,
        key: *const trit_t,
    ) -> bool;
}
extern "C" {
    pub fn trit_t_to_mam_msg_read_context_t_map_remove_entry(
        map: *mut trit_t_to_mam_msg_read_context_t_map_t,
        entry: *mut trit_t_to_mam_msg_read_context_t_map_entry_t,
    ) -> retcode_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct trit_t_to_mam_msg_write_context_t_map_entry_s {
    pub key: *mut trit_t,
    pub value: *mut mam_msg_write_context_t,
    pub hh: UT_hash_handle,
}
#[test]
fn bindgen_test_layout_trit_t_to_mam_msg_write_context_t_map_entry_s() {
    assert_eq!(
        ::std::mem::size_of::<trit_t_to_mam_msg_write_context_t_map_entry_s>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(trit_t_to_mam_msg_write_context_t_map_entry_s)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<trit_t_to_mam_msg_write_context_t_map_entry_s>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(trit_t_to_mam_msg_write_context_t_map_entry_s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<trit_t_to_mam_msg_write_context_t_map_entry_s>())).key
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(trit_t_to_mam_msg_write_context_t_map_entry_s),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<trit_t_to_mam_msg_write_context_t_map_entry_s>())).value
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(trit_t_to_mam_msg_write_context_t_map_entry_s),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<trit_t_to_mam_msg_write_context_t_map_entry_s>())).hh as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(trit_t_to_mam_msg_write_context_t_map_entry_s),
            "::",
            stringify!(hh)
        )
    );
}
pub type trit_t_to_mam_msg_write_context_t_map_entry_t =
    trit_t_to_mam_msg_write_context_t_map_entry_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct trit_t_to_mam_msg_write_context_t_map_s {
    pub key_size: usize,
    pub value_size: usize,
    pub map: *mut trit_t_to_mam_msg_write_context_t_map_entry_t,
}
#[test]
fn bindgen_test_layout_trit_t_to_mam_msg_write_context_t_map_s() {
    assert_eq!(
        ::std::mem::size_of::<trit_t_to_mam_msg_write_context_t_map_s>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(trit_t_to_mam_msg_write_context_t_map_s)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<trit_t_to_mam_msg_write_context_t_map_s>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(trit_t_to_mam_msg_write_context_t_map_s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<trit_t_to_mam_msg_write_context_t_map_s>())).key_size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(trit_t_to_mam_msg_write_context_t_map_s),
            "::",
            stringify!(key_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<trit_t_to_mam_msg_write_context_t_map_s>())).value_size
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(trit_t_to_mam_msg_write_context_t_map_s),
            "::",
            stringify!(value_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<trit_t_to_mam_msg_write_context_t_map_s>())).map as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(trit_t_to_mam_msg_write_context_t_map_s),
            "::",
            stringify!(map)
        )
    );
}
pub type trit_t_to_mam_msg_write_context_t_map_t = trit_t_to_mam_msg_write_context_t_map_s;
extern "C" {
    pub fn trit_t_to_mam_msg_write_context_t_map_init(
        map: *mut trit_t_to_mam_msg_write_context_t_map_t,
        key_size: usize,
        value_size: usize,
    ) -> retcode_t;
}
extern "C" {
    pub fn trit_t_to_mam_msg_write_context_t_map_size(
        map: *const trit_t_to_mam_msg_write_context_t_map_t,
    ) -> usize;
}
extern "C" {
    pub fn trit_t_to_mam_msg_write_context_t_map_add(
        map: *mut trit_t_to_mam_msg_write_context_t_map_t,
        key: *const trit_t,
        value: *const mam_msg_write_context_t,
    ) -> retcode_t;
}
extern "C" {
    pub fn trit_t_to_mam_msg_write_context_t_map_contains(
        map: *const trit_t_to_mam_msg_write_context_t_map_t,
        key: *const trit_t,
    ) -> bool;
}
extern "C" {
    pub fn trit_t_to_mam_msg_write_context_t_map_find(
        map: *const trit_t_to_mam_msg_write_context_t_map_t,
        key: *const trit_t,
        res: *mut *mut trit_t_to_mam_msg_write_context_t_map_entry_t,
    ) -> bool;
}
extern "C" {
    pub fn trit_t_to_mam_msg_write_context_t_map_free(
        map: *mut trit_t_to_mam_msg_write_context_t_map_t,
    ) -> retcode_t;
}
extern "C" {
    pub fn trit_t_to_mam_msg_write_context_t_map_cmp(
        lhs: *const trit_t_to_mam_msg_write_context_t_map_t,
        rhs: *const trit_t_to_mam_msg_write_context_t_map_t,
    ) -> bool;
}
extern "C" {
    pub fn trit_t_to_mam_msg_write_context_t_map_remove(
        map: *mut trit_t_to_mam_msg_write_context_t_map_t,
        key: *const trit_t,
    ) -> bool;
}
extern "C" {
    pub fn trit_t_to_mam_msg_write_context_t_map_remove_entry(
        map: *mut trit_t_to_mam_msg_write_context_t_map_t,
        entry: *mut trit_t_to_mam_msg_write_context_t_map_entry_t,
    ) -> retcode_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mam_api_s {
    pub prng: mam_prng_t,
    pub ntru_sks: mam_ntru_sk_t_set_t,
    pub ntru_pks: mam_ntru_pk_t_set_t,
    pub psks: mam_psk_t_set_t,
    pub channels: mam_channel_t_set_t,
    pub channel_ord: trint18_t,
    pub write_ctxs: trit_t_to_mam_msg_write_context_t_map_t,
    pub read_ctxs: trit_t_to_mam_msg_read_context_t_map_t,
    pub trusted_channel_ids: mam_pk_t_set_t,
    pub trusted_endpoint_ids: mam_pk_t_set_t,
}
#[test]
fn bindgen_test_layout_mam_api_s() {
    assert_eq!(
        ::std::mem::size_of::<mam_api_s>(),
        352usize,
        concat!("Size of: ", stringify!(mam_api_s))
    );
    assert_eq!(
        ::std::mem::align_of::<mam_api_s>(),
        8usize,
        concat!("Alignment of ", stringify!(mam_api_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_api_s>())).prng as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_api_s),
            "::",
            stringify!(prng)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_api_s>())).ntru_sks as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_api_s),
            "::",
            stringify!(ntru_sks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_api_s>())).ntru_pks as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_api_s),
            "::",
            stringify!(ntru_pks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_api_s>())).psks as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_api_s),
            "::",
            stringify!(psks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_api_s>())).channels as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_api_s),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_api_s>())).channel_ord as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_api_s),
            "::",
            stringify!(channel_ord)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_api_s>())).write_ctxs as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_api_s),
            "::",
            stringify!(write_ctxs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_api_s>())).read_ctxs as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_api_s),
            "::",
            stringify!(read_ctxs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_api_s>())).trusted_channel_ids as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_api_s),
            "::",
            stringify!(trusted_channel_ids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mam_api_s>())).trusted_endpoint_ids as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(mam_api_s),
            "::",
            stringify!(trusted_endpoint_ids)
        )
    );
}
pub type mam_api_t = mam_api_s;
extern "C" {
    #[doc = " Initialize an API"]
    #[doc = ""]
    #[doc = " @param api - The API [out]"]
    #[doc = " @param mam_seed - The seed for PRNG initialization [in]"]
    #[doc = ""]
    #[doc = " @return return code"]
    pub fn mam_api_init(api: *mut mam_api_t, mam_seed: *const tryte_t) -> retcode_t;
}
extern "C" {
    #[doc = " Destroys an API"]
    #[doc = ""]
    #[doc = " @param api - The API [in,out]"]
    #[doc = ""]
    #[doc = " @return return code"]
    pub fn mam_api_destroy(api: *mut mam_api_t) -> retcode_t;
}
extern "C" {
    #[doc = " Add a trusted channel id into the api's trusted channels set"]
    #[doc = ""]
    #[doc = " @param api - The API [in,out]"]
    #[doc = " @param pk - A new public key [in]"]
    #[doc = ""]
    #[doc = " @return return code"]
    pub fn mam_api_add_trusted_channel_pk(api: *mut mam_api_t, pk: *const tryte_t) -> retcode_t;
}
extern "C" {
    #[doc = " Add a trusted endpoint id into the api's trusted endpoints set"]
    #[doc = ""]
    #[doc = " @param api - The API [in,out]"]
    #[doc = " @param pk - A new public key [in]"]
    #[doc = ""]
    #[doc = " @return return code"]
    pub fn mam_api_add_trusted_endpoint_pk(api: *mut mam_api_t, pk: *const tryte_t) -> retcode_t;
}
extern "C" {
    #[doc = " Add a NTRU secret key to api's NTRU sks set"]
    #[doc = ""]
    #[doc = " @param api - The API [in,out]"]
    #[doc = " @param ntru_sk - A new ntru public key (allows for both enc/dec) [in]"]
    #[doc = ""]
    #[doc = " @return return code"]
    pub fn mam_api_add_ntru_sk(api: *mut mam_api_t, ntru_sk: *const mam_ntru_sk_t) -> retcode_t;
}
extern "C" {
    #[doc = " Add a NTRU public key to api's NTRU pks set"]
    #[doc = ""]
    #[doc = " @param api - The API [in,out]"]
    #[doc = " @param ntru_pk - A new ntru public key (allows for encryption only) [in]"]
    #[doc = ""]
    #[doc = " @return return code"]
    pub fn mam_api_add_ntru_pk(api: *mut mam_api_t, ntru_pk: *const mam_ntru_pk_t) -> retcode_t;
}
extern "C" {
    #[doc = " Add a pre shared key to api's psks set"]
    #[doc = ""]
    #[doc = " @param api - The API [in,out]"]
    #[doc = " @param psk - A new psk [in]"]
    #[doc = ""]
    #[doc = " @return return code"]
    pub fn mam_api_add_psk(api: *mut mam_api_t, psk: *const mam_psk_t) -> retcode_t;
}
extern "C" {
    #[doc = " Creates and adds a channel to the API"]
    #[doc = ""]
    #[doc = " @param api - The API [in, out]"]
    #[doc = " @param height - The channel's MSS height [in]"]
    #[doc = " @param channel_id - The channel id [out]"]
    #[doc = ""]
    #[doc = " @return return code"]
    pub fn mam_api_create_channel(
        api: *mut mam_api_t,
        height: usize,
        channel_id: *mut tryte_t,
    ) -> retcode_t;
}
extern "C" {
    #[doc = " Gets a channel from its id"]
    #[doc = ""]
    #[doc = " @param api - The API [in]"]
    #[doc = " @param channel_id - The channel id [in]"]
    #[doc = ""]
    #[doc = " @return a pointer to the channel or NULL if not found"]
    pub fn mam_api_get_channel(
        api: *const mam_api_t,
        channel_id: *const tryte_t,
    ) -> *mut mam_channel_t;
}
extern "C" {
    #[doc = " Creates and adds an endpoint to the API"]
    #[doc = ""]
    #[doc = " @param api - The API [in, out]"]
    #[doc = " @param height - The endpoint's MSS height [in]"]
    #[doc = " @param channel_id - The associated channel id [in]"]
    #[doc = " @param endpoint_id - The endpoint id [out]"]
    #[doc = ""]
    #[doc = " @return return code"]
    pub fn mam_api_create_endpoint(
        api: *mut mam_api_t,
        height: usize,
        channel_id: *const tryte_t,
        endpoint_id: *mut tryte_t,
    ) -> retcode_t;
}
extern "C" {
    #[doc = " Gets an endpoint from its id"]
    #[doc = ""]
    #[doc = " @param api - The API [in]"]
    #[doc = " @param channel_id - The associated channel id [in]"]
    #[doc = " @param endpoint_id - The endpoint id [in]"]
    #[doc = ""]
    #[doc = " @return a pointer to the endpoint or NULL if not found"]
    pub fn mam_api_get_endpoint(
        api: *const mam_api_t,
        channel_id: *const tryte_t,
        endpoint_id: *const tryte_t,
    ) -> *mut mam_endpoint_t;
}
extern "C" {
    #[doc = " Creates a MAM tag that can be used in IOTA transactions"]
    #[doc = ""]
    #[doc = " @param tag - The tag [out]"]
    #[doc = " @param msg_id - The message ID [in]"]
    #[doc = " @param ord - The packet ord [in]"]
    pub fn mam_api_write_tag(tag: *mut trit_t, msg_id: *const trit_t, ord: trint18_t);
}
extern "C" {
    #[doc = " Writes MAM header on a channel(keyloads (session keys) + potential packet)"]
    #[doc = " into a bundle"]
    #[doc = ""]
    #[doc = " @param api - The API [in,out]"]
    #[doc = " @param ch_id - A known channel ID [in]"]
    #[doc = " @param psks - pre shared keys used for encrypting the session keys [in]"]
    #[doc = " @param ntru_pks - ntru public keys used for encrypting the session keys [in]"]
    #[doc = " @param msg_type_id - The message type [in]"]
    #[doc = " @param bundle - The bundle that the packet will be written into [out]"]
    #[doc = " @param msg_id - The msg_id (hashed channel_name and message index within the"]
    #[doc = "  channel) embedded into transaction's tag (together with packet index to"]
    #[doc = " allow Tangle lookup) [out]"]
    #[doc = ""]
    #[doc = " @return return code"]
    pub fn mam_api_bundle_write_header_on_channel(
        api: *mut mam_api_t,
        ch_id: *const tryte_t,
        psks: mam_psk_t_set_t,
        ntru_pks: mam_ntru_pk_t_set_t,
        msg_type_id: trint9_t,
        bundle: *mut bundle_transactions_t,
        msg_id: *mut trit_t,
    ) -> retcode_t;
}
extern "C" {
    #[doc = " Writes MAM header on an endpoint(keyloads (session keys) + potential packet)"]
    #[doc = " into a bundle"]
    #[doc = ""]
    #[doc = " @param api - The API [in,out]"]
    #[doc = " @param ch_id - A known channel ID [in]"]
    #[doc = " @param ep_id - A known endpoint ID [in]"]
    #[doc = " @param psks - pre shared keys used for encrypting the session keys [in]"]
    #[doc = " @param ntru_pks - ntru public keys used for encrypting the session keys [in]"]
    #[doc = " @param msg_type_id - The message type [in]"]
    #[doc = " @param bundle - The bundle that the packet will be written into [out]"]
    #[doc = " @param msg_id - The msg_id (hashed channel_name and message index within the"]
    #[doc = "  channel) embedded into transaction's tag (together with packet index to"]
    #[doc = " allow Tangle lookup) [out]"]
    #[doc = ""]
    #[doc = " @return return code"]
    pub fn mam_api_bundle_write_header_on_endpoint(
        api: *mut mam_api_t,
        ch_id: *const tryte_t,
        ep_id: *const tryte_t,
        psks: mam_psk_t_set_t,
        ntru_pks: mam_ntru_pk_t_set_t,
        msg_type_id: trint9_t,
        bundle: *mut bundle_transactions_t,
        msg_id: *mut trit_t,
    ) -> retcode_t;
}
extern "C" {
    #[doc = " Writes an announcement of a new channel (keyloads (session keys) +"]
    #[doc = " potential packet) into a bundle"]
    #[doc = ""]
    #[doc = " @param api - The API [in,out]"]
    #[doc = " @param ch_id - A known channel ID [in]"]
    #[doc = " @param ch1_id - The new channel ID [in]"]
    #[doc = " @param psks - pre shared keys used for encrypting the session keys [in]"]
    #[doc = " @param ntru_pks - ntru public keys used for encrypting the session keys [in]"]
    #[doc = " @param msg_type_id - The message type [in]"]
    #[doc = " @param bundle - The bundle that the packet will be written into [out]"]
    #[doc = " @param msg_id - The msg_id (hashed channel_name and message index within the"]
    #[doc = "  channel) embedded into transaction's tag (together with packet index to"]
    #[doc = " allow Tangle lookup) [out]"]
    #[doc = ""]
    #[doc = " @return return code"]
    pub fn mam_api_bundle_announce_new_channel(
        api: *mut mam_api_t,
        ch_id: *const tryte_t,
        ch1_id: *const tryte_t,
        psks: mam_psk_t_set_t,
        ntru_pks: mam_ntru_pk_t_set_t,
        msg_type_id: trint9_t,
        bundle: *mut bundle_transactions_t,
        msg_id: *mut trit_t,
    ) -> retcode_t;
}
extern "C" {
    #[doc = " Writes an announcement of a new endpoint (keyloads (session keys) +"]
    #[doc = " potential packet) into a bundle"]
    #[doc = ""]
    #[doc = " @param api - The API [in,out]"]
    #[doc = " @param ch_id - A known channel ID [in]"]
    #[doc = " @param ep1_id - The new endpoint ID [in]"]
    #[doc = " @param psks - pre shared keys used for encrypting the session keys [in]"]
    #[doc = " @param ntru_pks - ntru public keys used for encrypting the session keys [in]"]
    #[doc = " @param msg_type_id - The message type [in]"]
    #[doc = " @param bundle - The bundle that the packet will be written into [out]"]
    #[doc = " @param msg_id - The msg_id (hashed channel_name and message index within the"]
    #[doc = "  channel) embedded into transaction's tag (together with packet index to"]
    #[doc = " allow Tangle lookup) [out]"]
    #[doc = ""]
    #[doc = " @return return code"]
    pub fn mam_api_bundle_announce_new_endpoint(
        api: *mut mam_api_t,
        ch_id: *const tryte_t,
        ep1_id: *const tryte_t,
        psks: mam_psk_t_set_t,
        ntru_pks: mam_ntru_pk_t_set_t,
        msg_type_id: trint9_t,
        bundle: *mut bundle_transactions_t,
        msg_id: *mut trit_t,
    ) -> retcode_t;
}
extern "C" {
    #[doc = " Writes MAM packet into a bundle"]
    #[doc = ""]
    #[doc = " @param api - The API [in,out]"]
    #[doc = " @param msg_id - The msg_id"]
    #[doc = " @param payload - payload to write into the packet [in]"]
    #[doc = " @param payload size - The payload size [in]"]
    #[doc = " @param is_last_packet - indicate whether or not this is the last packet [in]"]
    #[doc = " @param bundle - The bundle that the packet will be written into [out]"]
    #[doc = ""]
    #[doc = " @return return code"]
    pub fn mam_api_bundle_write_packet(
        api: *mut mam_api_t,
        msg_id: *const trit_t,
        payload: *const tryte_t,
        payload_size: usize,
        checksum: mam_msg_checksum_t,
        is_last_packet: bool,
        bundle: *mut bundle_transactions_t,
    ) -> retcode_t;
}
extern "C" {
    #[doc = " Reads MAM's session key and potentially the first packet using NTRU secret"]
    #[doc = " key"]
    #[doc = ""]
    #[doc = " @param api - The API"]
    #[doc = " @param bundle - The bundle containing the MAM message"]
    #[doc = " @param packet_payload - First packet payload [out] (will be allocated if"]
    #[doc = " packet is present)"]
    #[doc = ""]
    #[doc = " @return return code"]
    pub fn mam_api_bundle_read(
        api: *mut mam_api_t,
        bundle: *const bundle_transactions_t,
        payload: *mut *mut tryte_t,
        payload_size: *mut usize,
        is_last_packet: *mut bool,
    ) -> retcode_t;
}
extern "C" {
    #[doc = " Gets the number of trits needed for an API serialization"]
    #[doc = " @param api - The API [in]"]
    #[doc = ""]
    #[doc = " @return return the size"]
    pub fn mam_api_serialized_size(api: *const mam_api_t) -> usize;
}
extern "C" {
    #[doc = " Serializes an API struct into a buffer"]
    #[doc = " @param api - The API [in]"]
    #[doc = " @param buffer - The buffer to serialize the api into [out]"]
    #[doc = ""]
    #[doc = " @return return void"]
    pub fn mam_api_serialize(api: *const mam_api_t, buffer: *mut trits_t);
}
extern "C" {
    #[doc = " Deserializes a buffer into API struct"]
    #[doc = ""]
    #[doc = " @param buffer - The buffer from where to deserialize [in]"]
    #[doc = " @param api - The API [out]"]
    #[doc = ""]
    #[doc = " @return return code"]
    pub fn mam_api_deserialize(buffer: *mut trits_t, api: *mut mam_api_t) -> retcode_t;
}
extern "C" {
    #[doc = " Saves an API into a file"]
    #[doc = ""]
    #[doc = " @param api - The API [in]"]
    #[doc = " @param filename - The file name where to serialize the API into [in]"]
    #[doc = ""]
    #[doc = ""]
    #[doc = " @return return code"]
    pub fn mam_api_save(
        api: *const mam_api_t,
        filename: *const ::std::os::raw::c_char,
    ) -> retcode_t;
}
extern "C" {
    #[doc = " Loads an API into a file"]
    #[doc = ""]
    #[doc = " @param filename - The file name where the API is serialized [in]"]
    #[doc = " @param api - The API [out]"]
    #[doc = ""]
    #[doc = " @return return code"]
    pub fn mam_api_load(filename: *const ::std::os::raw::c_char, api: *mut mam_api_t) -> retcode_t;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}